"use client"

import { useState, useEffect } from "react"
import "../../assets/styles/dialog-base.css"
import "../../assets/styles/enhanced-dialogs.css"
import "../../assets/styles/RfidManagerDialog.css"
import { 
  layDanhSachThe, 
  themTheMobile,
  capNhatTheRFIDMobile, 
  xoaTheRFID,
  layNhatKyTheoTheNgocChung,
  timTheDangCoPhien,
  thongTinTheDangCoXeGui,
  layTheRFIDTheoUID,
  layDanhSachChinhSachGiaV2,
  tinhNgayKetThucChinhSach
} from "../../api/api"
import CardHistoryDialog from "./CardHistoryDialog"

const RfidManagerDialog = ({ onClose, onSave }) => {
  // Basic states
  const [cards, setCards] = useState([])
  const [filteredCards, setFilteredCards] = useState([])
  const [selectedCard, setSelectedCard] = useState(null)
  const [editingCard, setEditingCard] = useState(null)
  const [loading, setLoading] = useState(false)
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState("all")
  const [typeFilter, setTypeFilter] = useState("all")
  
  // Dialog states
  const [showHistory, setShowHistory] = useState(false)
  const [cardHistory, setCardHistory] = useState([])
  const [showAddDialog, setShowAddDialog] = useState(false)
  const [showCardHistory, setShowCardHistory] = useState(false)
  const [selectedCardForHistory, setSelectedCardForHistory] = useState(null)
  
  // Enhanced states from mobile app
  const [policies, setPolicies] = useState([])
  const [cardsWithVehicles, setCardsWithVehicles] = useState(new Set())
  const [showPolicyAssignment, setShowPolicyAssignment] = useState(false)
  const [selectedCardForPolicy, setSelectedCardForPolicy] = useState(null)
  const [validationErrors, setValidationErrors] = useState({})

  // Form state - theo chu·∫©n mobile app
  const [formData, setFormData] = useState({
    uidThe: "",
    loaiThe: "KHACH", // Gi·ªëng mobile app
    trangThai: "1",
    bienSoXe: "",
    maChinhSach: "",
    ngayKetThucCS: "",
    tongNgay: 0,
    ngayBatDauCS: "",
    ghiChu: ""
  })
  
  // Debug log current form data
  console.log(`üêõ Current formData:`, formData)

  // Card types theo mobile app
  const cardTypes = [
    { value: 'KHACH', label: 'Th·∫ª th∆∞·ªùng', icon: 'üí≥', description: 'Th·∫ª d√†nh cho kh√°ch th∆∞·ªùng' },
    { value: 'VIP', label: 'Th·∫ª VIP', icon: 'üíé', description: 'Th·∫ª VIP v·ªõi ∆∞u ƒë√£i ƒë·∫∑c bi·ªát' },
    { value: 'NHANVIEN', label: 'Th·∫ª nh√¢n vi√™n', icon: 'üë§', description: 'Th·∫ª d√†nh cho nh√¢n vi√™n' }
  ]

  useEffect(() => {
    loadCards()
    loadPolicies()
  }, [])

  useEffect(() => {
    filterCards()
  }, [cards, searchTerm, statusFilter, typeFilter])

  // T·ª± ƒë·ªông t√≠nh ng√†y k·∫øt th√∫c ch√≠nh s√°ch khi thay ƒë·ªïi (realtime update)
  useEffect(() => {
    console.log(`üîç useEffect triggered - maChinhSach: ${formData.maChinhSach}, ngayBatDauCS: ${formData.ngayBatDauCS}`)
    console.log(`üîç Available policies count: ${policies.length}`)
    console.log(`üîç Available policies:`, policies.map(p => ({ 
      maChinhSach: p.maChinhSach, 
      tongNgay: p.tongNgay,
      donGia: p.donGia 
    })))
    
    if (formData.maChinhSach && formData.ngayBatDauCS) {
      const selectedPolicy = policies.find(p => p.maChinhSach === formData.maChinhSach)
      console.log(`üîç Selected policy for ${formData.maChinhSach}:`, selectedPolicy)
      
      if (selectedPolicy && selectedPolicy.tongNgay > 0) {
        const endDate = calculatePolicyEndDate(formData.ngayBatDauCS, selectedPolicy.tongNgay)
        console.log(`üîç Calculated end date: ${endDate}`)
        
        // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ng√†y k·∫øt th√∫c th·ª±c s·ª± thay ƒë·ªïi
        if (endDate && endDate !== formData.ngayKetThucCS) {
          console.log(`üîç Updating formData with new end date: ${endDate}`)
          setFormData(prev => ({
            ...prev,
            ngayKetThucCS: endDate,
            tongNgay: selectedPolicy.tongNgay
          }))
        }
      } else {
        console.log(`üîç No policy found or tongNgay <= 0`)
      }
    } else {
      console.log(`üîç Missing maChinhSach or ngayBatDauCS`)
    }
  }, [formData.maChinhSach, formData.ngayBatDauCS, policies])

  // T·ª± ƒë·ªông set ng√†y b·∫Øt ƒë·∫ßu m·∫∑c ƒë·ªãnh khi ch·ªçn ch√≠nh s√°ch VIP
  useEffect(() => {
    if (formData.maChinhSach && !formData.ngayBatDauCS) {
      const selectedPolicy = policies.find(p => p.maChinhSach === formData.maChinhSach)
      if (selectedPolicy && selectedPolicy.tongNgay > 0) {
        const today = new Date().toISOString().split('T')[0] // Format YYYY-MM-DD
        setFormData(prev => ({
          ...prev,
          ngayBatDauCS: today
        }))
      }
    }
  }, [formData.maChinhSach, policies])

  const loadCards = async () => {
    try {
      setLoading(true)
      const cardList = await layDanhSachThe()
      setCards(cardList || [])
    } catch (error) {
      console.error("Error loading cards:", error)
      alert("L·ªói t·∫£i danh s√°ch th·∫ª: " + error.message)
    } finally {
      setLoading(false)
    }
  }

  const loadPolicies = async () => {
    try {
      // L·∫•y t·ª´ API th·ª±c t·∫ø thay v√¨ hardcode
      const policyList = await layDanhSachChinhSachGiaV2()
      console.log(`üìã Loaded policies from API:`, policyList)
      setPolicies(policyList || [])
    } catch (error) {
      console.error("Error loading policies:", error)
      // Fallback v·ªõi d·ªØ li·ªáu m·∫´u
      const fallbackPolicies = [
        { maChinhSach: "CS_VIP_1T", tenChinhSach: "VIP 1 Th√°ng", tongNgay: 30, donGia: 500000 },
        { maChinhSach: "CS_VIP_3T", tenChinhSach: "VIP 3 Th√°ng", tongNgay: 90, donGia: 1400000 },
        { maChinhSach: "CS_VIP_1NAM", tenChinhSach: "VIP 1 NƒÉm", tongNgay: 365, donGia: 5000000 }
      ]
      console.log(`üìã Using fallback policies:`, fallbackPolicies)
      setPolicies(fallbackPolicies)
    }
  }

  const filterCards = () => {
    let filtered = [...cards]

    if (searchTerm) {
      filtered = filtered.filter(card => 
        card.uidThe?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        card.loaiThe?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        card.bienSoXe?.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    if (statusFilter !== "all") {
      filtered = filtered.filter(card => card.trangThai === statusFilter)
    }

    if (typeFilter !== "all") {
      filtered = filtered.filter(card => card.loaiThe === typeFilter)
    }

    setFilteredCards(filtered)
  }

  const handleAddCard = () => {
    setEditingCard(null)
    setValidationErrors({})
    setFormData({
      uidThe: "",
      loaiThe: "KHACH", // M·∫∑c ƒë·ªãnh gi·ªëng mobile app
      trangThai: "1",
      bienSoXe: "",
      maChinhSach: "",
      ngayKetThucCS: "",
      tongNgay: 0,
      ngayBatDauCS: "",
      ghiChu: ""
    })
    setShowAddDialog(true)
  }

  const handleEditCard = (card) => {
    setEditingCard(card)
    setValidationErrors({})
    setFormData({
      uidThe: card.uidThe,
      loaiThe: card.loaiThe || "KHACH",
      trangThai: card.trangThai || "1",
      bienSoXe: card.bienSoXe || "",
      maChinhSach: card.maChinhSach || "",
      ngayKetThucCS: card.ngayKetThucCS || "",
      tongNgay: card.tongNgay || 0,
      ngayBatDauCS: card.ngayBatDauCS || "",
      ghiChu: card.ghiChu || ""
    })
    setShowAddDialog(true)
  }

  const handleDeleteCard = async (card) => {
    if (!window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th·∫ª ${card.uidThe}?`)) {
      return
    }

    try {
      // Check if card has active session
      const activeSession = await timTheDangCoPhien(card.uidThe)
      if (activeSession && activeSession.length > 0) {
        alert("Kh√¥ng th·ªÉ x√≥a th·∫ª ƒëang c√≥ phi√™n g·ª≠i xe!")
        return
      }

      setLoading(true)
      const result = await xoaTheRFID(card.uidThe)
      
      if (result && result.success) {
        alert("X√≥a th·∫ª th√†nh c√¥ng")
        await loadCards()
      } else {
        alert("L·ªói x√≥a th·∫ª: " + (result?.message || "Kh√¥ng x√°c ƒë·ªãnh"))
      }
    } catch (error) {
      console.error("Error deleting card:", error)
      alert("L·ªói x√≥a th·∫ª: " + error.message)
    } finally {
      setLoading(false)
    }
  }

  const handleViewHistory = (card) => {
    setSelectedCardForHistory(card.uidThe)
    setShowCardHistory(true)
  }

  // Validation theo mobile app
  const validateCardForm = () => {
    const errors = {}

    // Ki·ªÉm tra UID th·∫ª
    if (!formData.uidThe.trim()) {
      errors.uidThe = "Vui l√≤ng nh·∫≠p m√£ th·∫ª"
    } else if (formData.uidThe.trim().length < 4) {
      errors.uidThe = "M√£ th·∫ª ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±"
    }

    // Ki·ªÉm tra bi·ªÉn s·ªë b·∫Øt bu·ªôc cho VIP v√† NHANVIEN (nh∆∞ mobile app)
    if ((formData.loaiThe === 'VIP' || formData.loaiThe === 'NHANVIEN') && 
        !formData.bienSoXe.trim()) {
      errors.bienSoXe = "Vui l√≤ng nh·∫≠p bi·ªÉn s·ªë xe cho th·∫ª VIP/Nh√¢n vi√™n"
    }

    // Ki·ªÉm tra format bi·ªÉn s·ªë n·∫øu c√≥ nh·∫≠p
    if (formData.bienSoXe.trim() && formData.bienSoXe.trim().length < 7) {
      errors.bienSoXe = "Bi·ªÉn s·ªë xe kh√¥ng h·ª£p l·ªá (√≠t nh·∫•t 7 k√Ω t·ª±)"
    }

    // Ki·ªÉm tra ch√≠nh s√°ch VIP ph·∫£i c√≥ ng√†y b·∫Øt ƒë·∫ßu
    if (formData.maChinhSach && !formData.ngayBatDauCS) {
      errors.ngayBatDauCS = "Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu ch√≠nh s√°ch"
    }

    // T·ª± ƒë·ªông t√≠nh ng√†y k·∫øt th√∫c n·∫øu c√≥ ch√≠nh s√°ch v√† ng√†y b·∫Øt ƒë·∫ßu nh∆∞ng ch∆∞a c√≥ ng√†y k·∫øt th√∫c
    if (formData.maChinhSach && formData.ngayBatDauCS && !formData.ngayKetThucCS) {
      const selectedPolicy = policies.find(p => p.maChinhSach === formData.maChinhSach)
      if (selectedPolicy && selectedPolicy.tongNgay > 0) {
        // T√≠nh ng√†y k·∫øt th√∫c ngay l·∫≠p t·ª©c
        const calculatedEndDate = tinhNgayKetThucChinhSach(formData.ngayBatDauCS, selectedPolicy.tongNgay)
        console.log(`üîß Auto-calculate end date: ${formData.ngayBatDauCS} + ${selectedPolicy.tongNgay} days = ${calculatedEndDate}`)
        
        // C·∫≠p nh·∫≠t formData v·ªõi ng√†y k·∫øt th√∫c ƒë√£ t√≠nh
        setFormData(prev => ({
          ...prev,
          ngayKetThucCS: calculatedEndDate,
          tongNgay: selectedPolicy.tongNgay
        }))
        
        // Kh√¥ng b√°o l·ªói n·∫øu c√≥ th·ªÉ t√≠nh ƒë∆∞·ª£c
        if (!calculatedEndDate) {
          errors.ngayKetThucCS = "Kh√¥ng th·ªÉ t√≠nh ng√†y k·∫øt th√∫c ch√≠nh s√°ch. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu."
        }
      }
    }

    setValidationErrors(errors)
    return Object.keys(errors).length === 0
  }

  const handleFormSubmit = async () => {
    // Validation tr∆∞·ªõc khi submit
    if (!validateCardForm()) {
      return
    }

    try {
      setLoading(true)
      let result

      if (editingCard) {
        // ƒê·∫£m b·∫£o ng√†y k·∫øt th√∫c ch√≠nh s√°ch ƒë∆∞·ª£c t√≠nh ƒë√∫ng cho tr∆∞·ªùng h·ª£p edit
        let finalEndDate = formData.ngayKetThucCS
        
        // N·∫øu c√≥ ch√≠nh s√°ch v√† ng√†y b·∫Øt ƒë·∫ßu nh∆∞ng ch∆∞a c√≥ ng√†y k·∫øt th√∫c, t√≠nh l·∫°i
        if (formData.maChinhSach && formData.ngayBatDauCS && !finalEndDate) {
          const selectedPolicy = policies.find(p => p.maChinhSach === formData.maChinhSach)
          if (selectedPolicy && selectedPolicy.tongNgay > 0) {
            finalEndDate = tinhNgayKetThucChinhSach(formData.ngayBatDauCS, selectedPolicy.tongNgay)
            console.log(`üîÑ T√≠nh l·∫°i ng√†y k·∫øt th√∫c cho edit: ${formData.ngayBatDauCS} + ${selectedPolicy.tongNgay} ng√†y = ${finalEndDate}`)
          }
        }

        // Debug log ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu g·ª≠i ƒëi khi edit
        console.log(`üì§ D·ªØ li·ªáu g·ª≠i capNhatTheRFIDMobile:`, {
          uidThe: formData.uidThe,
          loaiThe: formData.loaiThe,
          trangThai: formData.trangThai,
          bienSoXe: formData.bienSoXe.trim() || "",
          maChinhSach: formData.maChinhSach || "",
          ngayKetThucCS: finalEndDate || "",
          tongNgayChinhSach: formData.tongNgay
        })

        // C·∫≠p nh·∫≠t th·∫ª - s·ª≠ d·ª•ng mobile app API v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
        result = await capNhatTheRFIDMobile({
          uidThe: formData.uidThe,
          loaiThe: formData.loaiThe,
          trangThai: formData.trangThai,
          bienSoXe: formData.bienSoXe.trim() || "",
          maChinhSach: formData.maChinhSach || "",
          ngayKetThucCS: finalEndDate || ""
        })
      } else {
        // ƒê·∫£m b·∫£o ng√†y k·∫øt th√∫c ch√≠nh s√°ch ƒë∆∞·ª£c t√≠nh ƒë√∫ng tr∆∞·ªõc khi g·ª≠i
        let finalEndDate = formData.ngayKetThucCS
        
        // N·∫øu c√≥ ch√≠nh s√°ch v√† ng√†y b·∫Øt ƒë·∫ßu nh∆∞ng ch∆∞a c√≥ ng√†y k·∫øt th√∫c, t√≠nh l·∫°i
        if (formData.maChinhSach && formData.ngayBatDauCS && !finalEndDate) {
          const selectedPolicy = policies.find(p => p.maChinhSach === formData.maChinhSach)
          if (selectedPolicy && selectedPolicy.tongNgay > 0) {
            finalEndDate = tinhNgayKetThucChinhSach(formData.ngayBatDauCS, selectedPolicy.tongNgay)
            console.log(`üîÑ T√≠nh l·∫°i ng√†y k·∫øt th√∫c: ${formData.ngayBatDauCS} + ${selectedPolicy.tongNgay} ng√†y = ${finalEndDate}`)
          }
        }

        // Debug log ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu g·ª≠i ƒëi
        console.log(`üì§ D·ªØ li·ªáu g·ª≠i themTheMobile:`, {
          uidThe: formData.uidThe.trim(),
          loaiThe: formData.loaiThe,
          trangThai: formData.trangThai,
          bienSoXe: formData.bienSoXe.trim() || "",
          maChinhSach: formData.maChinhSach || "",
          ngayKetThucCS: finalEndDate || "",
          tongNgayChinhSach: formData.tongNgay
        })

        // Th√™m th·∫ª m·ªõi - s·ª≠ d·ª•ng mobile app API
        result = await themTheMobile(
          formData.uidThe.trim(),
          formData.loaiThe,
          formData.trangThai,
          formData.bienSoXe.trim() || "",
          formData.maChinhSach || "",
          finalEndDate || ""
        )
      }

      if (result && result.success) {
        // Th√¥ng b√°o th√†nh c√¥ng gi·ªëng mobile app
        const cardTypeName = cardTypes.find(t => t.value === formData.loaiThe)?.label || formData.loaiThe
        const successMessage = editingCard 
          ? `ƒê√£ c·∫≠p nh·∫≠t th·∫ª ${formData.uidThe} (${cardTypeName}) th√†nh c√¥ng!`
          : `ƒê√£ th√™m th·∫ª ${formData.uidThe} (${cardTypeName}) th√†nh c√¥ng!${
              formData.bienSoXe.trim() ? `\nBi·ªÉn s·ªë: ${formData.bienSoXe.trim()}` : ''
            }`
        
        alert(successMessage)
        setShowAddDialog(false)
        await loadCards()
      } else {
        alert("L·ªói: " + (result?.message || "Kh√¥ng th·ªÉ l∆∞u th·∫ª"))
      }
    } catch (error) {
      console.error("Error saving card:", error)
      alert("L·ªói: " + (error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh"))
    } finally {
      setLoading(false)
    }
  }

  const getStatusText = (status) => {
    return status === "1" ? "Ho·∫°t ƒë·ªông" : "Kh√¥ng ho·∫°t ƒë·ªông"
  }

  const getStatusClass = (status) => {
    return status === "1" ? "badge-success" : "badge-danger"
  }

  const formatDate = (dateString) => {
    if (!dateString) return "N/A"
    return new Date(dateString).toLocaleDateString("vi-VN")
  }

  const calculatePolicyEndDate = (startDate, policyDays) => {
    console.log(`üîÑ calculatePolicyEndDate called with: startDate=${startDate}, policyDays=${policyDays}`)
    
    if (!startDate || !policyDays || policyDays <= 0) {
      console.log(`‚ö†Ô∏è Invalid input for calculatePolicyEndDate`)
      return ''
    }
    
    const endDate = tinhNgayKetThucChinhSach(startDate, policyDays)
    console.log(`üîÑ T√≠nh ng√†y k·∫øt th√∫c ch√≠nh s√°ch: ${startDate} + ${policyDays} ng√†y = ${endDate}`)
    return endDate
  }
  return (
    <div className="rfid-dialog">
      <div className="dialog-overlay">
        <div className="dialog-container extra-large">
          <div className="dialog-header">
            <h2 className="dialog-title">Qu·∫£n L√Ω Th·∫ª RFID</h2>
            <button className="dialog-close" onClick={onClose}>√ó</button>
          </div>

          <div className="dialog-subtitle">
            Qu·∫£n l√Ω th·∫ª RFID v√† xem l·ªãch s·ª≠ s·ª≠ d·ª•ng th·∫ª
          </div>

          <div className="dialog-content main-sidebar">
            {/* Left Panel - Card List */}
            <div className="dialog-panel">
              <div className="dialog-panel-title" style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>
                <span>Danh S√°ch Th·∫ª ({filteredCards.length})</span>
                <button className="dialog-btn dialog-btn-primary" onClick={handleAddCard}>
                  + Th√™m Th·∫ª
                </button>
              </div>
              
              {/* Search and Filters */}
              <div className="dialog-grid cols-3" style={{marginBottom: '16px'}}>
                <div className="form-group">
                  <label>T√¨m ki·∫øm:</label>
                  <input
                    type="text"
                    className="dialog-input"
                    placeholder="UID th·∫ª ho·∫∑c bi·ªÉn s·ªë..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
                
                <div className="form-group">
                  <label>Tr·∫°ng th√°i:</label>
                  <select 
                    className="dialog-select"
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value)}
                  >
                    <option value="all">T·∫•t c·∫£</option>
                    <option value="1">Ho·∫°t ƒë·ªông</option>
                    <option value="0">Kh√¥ng ho·∫°t ƒë·ªông</option>
                  </select>
                </div>
                
                <div className="form-group">
                  <label>Lo·∫°i th·∫ª:</label>
                  <select 
                    className="dialog-select"
                    value={typeFilter}
                    onChange={(e) => setTypeFilter(e.target.value)}
                  >
                    <option value="all">T·∫•t c·∫£</option>
                    {cardTypes.map(type => (
                      <option key={type.value} value={type.value}>{type.label}</option>
                    ))}
                  </select>
                </div>
              </div>

              {loading ? (
                <div className="dialog-loading">ƒêang t·∫£i...</div>
              ) : (
                <div style={{maxHeight: '400px', overflowY: 'auto'}}>
                  <table className="dialog-table">
                    <thead>
                      <tr>
                        <th>UID Th·∫ª</th>
                        <th>Lo·∫°i</th>
                        <th>Tr·∫°ng th√°i</th>
                        <th>Bi·ªÉn s·ªë</th>
                        <th>Ch√≠nh s√°ch</th>
                        <th>Thao t√°c</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredCards.map(card => (
                        <tr 
                          key={card.uidThe}
                          className={selectedCard?.uidThe === card.uidThe ? 'selected' : ''}
                          onClick={() => setSelectedCard(card)}
                        >
                          <td style={{ fontFamily: 'monospace' }}>{card.uidThe}</td>
                          <td>
                            <span className={`badge ${
                              card.loaiThe === 'VIP' ? 'badge-premium' : 
                              card.loaiThe === 'NHANVIEN' ? 'badge-info' : 
                              card.loaiThe === 'KHACH' ? 'badge-default' : 'badge-secondary'
                            }`}>
                              {cardTypes.find(t => t.value === card.loaiThe)?.label || card.loaiThe}
                            </span>
                          </td>
                          <td>
                            <span className={`badge ${getStatusClass(card.trangThai)}`}>
                              {getStatusText(card.trangThai)}
                            </span>
                          </td>
                          <td style={{ fontFamily: 'monospace' }}>{card.bienSoXe || 'Ch∆∞a c√≥'}</td>
                          <td>
                            {card.maChinhSach ? (
                              <div className="policy-info">
                                <span className="policy-name">{card.maChinhSach}</span>
                                {card.ngayKetThucCS && (
                                  <small className="policy-expire">
                                    H·∫øt h·∫°n: {formatDate(card.ngayKetThucCS)}
                                  </small>
                                )}
                              </div>
                            ) : (
                              <span className="no-policy">Ch∆∞a c√≥</span>
                            )}
                          </td>
                          <td>
                            <div className="action-buttons">
                              <button 
                                className="btn-small btn-secondary"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  handleEditCard(card)
                                }}
                                title="Ch·ªânh s·ª≠a"
                              >
                                S·ª≠a
                              </button>
                              <button 
                                className="btn-small btn-warning"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  handleViewHistory(card)
                                }}
                                title="Xem l·ªãch s·ª≠"
                              >
                                L·ªãch s·ª≠
                              </button>
                              <button 
                                className="btn-small btn-danger"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  handleDeleteCard(card)
                                }}
                                title="X√≥a"
                              >
                                X√≥a
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                      {filteredCards.length === 0 && (
                        <tr>
                          <td colSpan="6" className="no-data">
                            {searchTerm || statusFilter !== "all" || typeFilter !== "all" 
                              ? "Kh√¥ng t√¨m th·∫•y th·∫ª n√†o" 
                              : "Ch∆∞a c√≥ th·∫ª n√†o"}
                          </td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              )}
            </div>

            {/* Right Panel - Statistics */}
            <div className="dialog-panel primary">
              <div className="dialog-panel-title">Th·ªëng K√™</div>
              
              <div className="dialog-info-card">
                <div className="dialog-info-title">T·ªïng Quan</div>
                <div className="stats-grid">
                  <div className="stat-item">
                    <span className="stat-number">{cards.length}</span>
                    <span className="stat-label">T·ªïng th·∫ª</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-number">
                      {cards.filter(card => card.trangThai === "1").length}
                    </span>
                    <span className="stat-label">Ho·∫°t ƒë·ªông</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-number">
                      {cards.filter(card => card.trangThai === "0").length}
                    </span>
                    <span className="stat-label">Kh√¥ng ho·∫°t ƒë·ªông</span>
                  </div>
                </div>
              </div>

              <div className="dialog-info-card">
                <div className="dialog-info-title">Ph√¢n Lo·∫°i Th·∫ª</div>
                <div className="card-type-stats">
                  {cardTypes.map(type => {
                    const count = cards.filter(card => card.loaiThe === type.value).length
                    return count > 0 ? (
                      <div key={type.value} className="type-stat">
                        <span className="type-icon">{type.icon}</span>
                        <span className="type-name">{type.label}</span>
                        <span className="type-count">{count}</span>
                      </div>
                    ) : null
                  })}
                </div>
              </div>

              {selectedCard && (
                <div className="dialog-info-card">
                  <div className="dialog-info-title">Chi Ti·∫øt Th·∫ª</div>
                  <div className="card-details">
                    <div><strong>UID:</strong> <code>{selectedCard.uidThe}</code></div>
                    <div><strong>Lo·∫°i:</strong> {cardTypes.find(t => t.value === selectedCard.loaiThe)?.label || selectedCard.loaiThe}</div>
                    <div><strong>Tr·∫°ng th√°i:</strong> {getStatusText(selectedCard.trangThai)}</div>
                    <div><strong>Bi·ªÉn s·ªë:</strong> {selectedCard.bienSoXe || 'Ch∆∞a c√≥'}</div>
                    <div><strong>Ng√†y ph√°t h√†nh:</strong> {formatDate(selectedCard.ngayPhatHanh)}</div>
                    {selectedCard.maChinhSach && (
                      <>
                        <div><strong>Ch√≠nh s√°ch:</strong> {selectedCard.maChinhSach}</div>
                        {selectedCard.ngayKetThucCS && (
                          <div><strong>H·∫øt h·∫°n:</strong> {formatDate(selectedCard.ngayKetThucCS)}</div>
                        )}
                      </>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>

          <div className="dialog-footer">
            <button className="dialog-btn dialog-btn-secondary" onClick={onClose}>
              ƒê√≥ng
            </button>
          </div>
        </div>
      </div>

      {/* Add/Edit Card Dialog */}
      {showAddDialog && (
        <div className="dialog-overlay">
          <div className="dialog-container">
            <div className="dialog-header">
              <h3 className="dialog-title">{editingCard ? "S·ª≠a Th·∫ª" : "Th√™m Th·∫ª M·ªõi"}</h3>
              <button className="dialog-close" onClick={() => setShowAddDialog(false)}>√ó</button>
            </div>

            <div className="dialog-content">
              {/* Th√¥ng b√°o c·∫£nh b√°o gi·ªëng mobile app */}
              {!editingCard && (
                <div className="warning-card" style={{
                  background: '#fff3cd',
                  border: '1px solid #ffeaa7',
                  borderRadius: '6px',
                  padding: '12px',
                  marginBottom: '16px',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px'
                }}>
                  <span style={{color: '#ff9800', fontSize: '18px'}}>‚ö†Ô∏è</span>
                  <span style={{color: '#856404', fontSize: '14px'}}>
                    Th·∫ª RFID ch∆∞a t·ªìn t·∫°i trong h·ªá th·ªëng. Vui l√≤ng th√™m th·∫ª m·ªõi ƒë·ªÉ ti·∫øp t·ª•c.
                  </span>
                </div>
              )}

              <div className="form-group">
                <label>M√£ Th·∫ª RFID <span style={{color: 'red'}}>*</span></label>
                <input
                  type="text"
                  className={`dialog-input ${validationErrors.uidThe ? 'error' : ''}`}
                  value={formData.uidThe}
                  onChange={(e) => {
                    setFormData({...formData, uidThe: e.target.value})
                    if (validationErrors.uidThe) {
                      setValidationErrors({...validationErrors, uidThe: null})
                    }
                  }}
                  placeholder="Nh·∫≠p m√£ th·∫ª RFID"
                  disabled={!!editingCard}
                  style={{ fontFamily: 'monospace', fontSize: '1.1rem' }}
                  maxLength={50}
                />
                {validationErrors.uidThe && (
                  <div className="error-message" style={{color: 'red', fontSize: '12px', marginTop: '4px'}}>
                    {validationErrors.uidThe}
                  </div>
                )}
              </div>

              <div className="form-group">
                <label>Lo·∫°i Th·∫ª <span style={{color: 'red'}}>*</span></label>
                <select
                  className="dialog-select"
                  value={formData.loaiThe}
                  onChange={(e) => {
                    const newLoaiThe = e.target.value
                    setFormData({
                      ...formData, 
                      loaiThe: newLoaiThe,
                      // Reset bi·ªÉn s·ªë v√† ch√≠nh s√°ch khi ƒë·ªïi lo·∫°i
                      bienSoXe: newLoaiThe === 'KHACH' ? '' : formData.bienSoXe, 
                      maChinhSach: newLoaiThe === 'KHACH' ? '' : formData.maChinhSach
                    })
                    // Clear validation error
                    if (validationErrors.bienSoXe && newLoaiThe === 'KHACH') {
                      setValidationErrors({...validationErrors, bienSoXe: null})
                    }
                  }}
                >
                  {cardTypes.map((type) => (
                    <option key={type.value} value={type.value}>
                      {type.icon} {type.label}
                    </option>
                  ))}
                </select>
                {/* Hi·ªÉn th·ªã m√¥ t·∫£ lo·∫°i th·∫ª */}
                <div style={{fontSize: '12px', color: '#666', marginTop: '4px'}}>
                  {cardTypes.find(t => t.value === formData.loaiThe)?.description}
                </div>
              </div>

              <div className="form-group">
                <label>Tr·∫°ng Th√°i <span style={{color: 'red'}}>*</span></label>
                <select
                  className="dialog-select"
                  value={formData.trangThai}
                  onChange={(e) => setFormData({...formData, trangThai: e.target.value})}
                >
                  <option value="1">üü¢ Ho·∫°t ƒë·ªông</option>
                  <option value="0">üî¥ Kh√¥ng ho·∫°t ƒë·ªông</option>
                </select>
              </div>

              <div className="form-group">
                <label>
                  Bi·ªÉn S·ªë Xe 
                  {(formData.loaiThe === 'VIP' || formData.loaiThe === 'NHANVIEN') && (
                    <span style={{color: 'red'}}>*</span>
                  )}
                </label>
                <input
                  type="text"
                  className={`dialog-input ${validationErrors.bienSoXe ? 'error' : ''}`}
                  value={formData.bienSoXe}
                  onChange={(e) => {
                    const value = e.target.value.toUpperCase()
                    setFormData({...formData, bienSoXe: value})
                    if (validationErrors.bienSoXe) {
                      setValidationErrors({...validationErrors, bienSoXe: null})
                    }
                  }}
                  placeholder={
                    formData.loaiThe === 'VIP' || formData.loaiThe === 'NHANVIEN' 
                      ? "Nh·∫≠p bi·ªÉn s·ªë xe (b·∫Øt bu·ªôc)" 
                      : "Nh·∫≠p bi·ªÉn s·ªë xe (t√πy ch·ªçn)"
                  }
                  style={{ fontFamily: 'monospace' }}
                  maxLength={15}
                />
                {validationErrors.bienSoXe && (
                  <div className="error-message" style={{color: 'red', fontSize: '12px', marginTop: '4px'}}>
                    {validationErrors.bienSoXe}
                  </div>
                )}
                {(formData.loaiThe === 'VIP' || formData.loaiThe === 'NHANVIEN') && (
                  <div style={{fontSize: '12px', color: '#ff9800', marginTop: '4px'}}>
                    ‚ö†Ô∏è Bi·ªÉn s·ªë xe b·∫Øt bu·ªôc cho th·∫ª VIP/Nh√¢n vi√™n
                  </div>
                )}
              </div>

              {(formData.loaiThe === 'VIP' || formData.loaiThe === 'NHANVIEN') && (
                <>
                  <div className="form-group">
                    <label>M√£ Ch√≠nh S√°ch</label>
                    <select
                      className="dialog-select"
                      value={formData.maChinhSach}
                      onChange={(e) => {
                        const selectedPolicyId = e.target.value
                        const selectedPolicy = policies.find(p => p.maChinhSach === selectedPolicyId)
                        
                        console.log(`üéØ User selected policy: ${selectedPolicyId}`)
                        console.log(`üéØ Selected policy details:`, selectedPolicy)
                        
                        // N·∫øu ch·ªçn ch√≠nh s√°ch c√≥ tongNgay > 0 v√† ch∆∞a c√≥ ng√†y b·∫Øt ƒë·∫ßu, t·ª± ƒë·ªông set ng√†y h√¥m nay
                        let startDate = formData.ngayBatDauCS
                        if (selectedPolicy?.tongNgay > 0 && !startDate) {
                          startDate = new Date().toISOString().split('T')[0] // YYYY-MM-DD
                          console.log(`üéØ Auto-set start date to today: ${startDate}`)
                        }
                        
                        // T·ª± ƒë·ªông c·∫≠p nh·∫≠t th√¥ng tin ch√≠nh s√°ch v√† t√≠nh ng√†y k·∫øt th√∫c
                        const updatedFormData = {
                          ...formData, 
                          maChinhSach: selectedPolicyId,
                          tongNgay: selectedPolicy?.tongNgay || 0,
                          ngayBatDauCS: startDate
                        }
                        
                        // T√≠nh ng√†y k·∫øt th√∫c n·∫øu c√≥ ch√≠nh s√°ch VIP v√† ng√†y b·∫Øt ƒë·∫ßu
                        if (selectedPolicy?.tongNgay > 0 && startDate) {
                          const calculatedEndDate = calculatePolicyEndDate(startDate, selectedPolicy.tongNgay)
                          updatedFormData.ngayKetThucCS = calculatedEndDate
                          console.log(`üéØ Auto-calculated end date: ${calculatedEndDate}`)
                        } else {
                          updatedFormData.ngayKetThucCS = "" // Clear end date for non-VIP policies
                        }
                        
                        console.log(`üéØ Final updated form data:`, updatedFormData)
                        setFormData(updatedFormData)
                      }}
                    >
                      <option value="">-- Ch·ªçn ch√≠nh s√°ch --</option>
                      {policies.map(policy => (
                        <option key={policy.maChinhSach} value={policy.maChinhSach}>
                          {policy.maChinhSach} - {policy.donGia?.toLocaleString()}ƒë{policy.tongNgay > 0 ? `/${policy.tongNgay} ng√†y` : '/l∆∞·ª£t'}
                        </option>
                      ))}
                    </select>
                    {formData.maChinhSach && (
                      <div style={{fontSize: '12px', color: '#6b7280', marginTop: '4px'}}>
                        {(() => {
                          const selectedPolicy = policies.find(p => p.maChinhSach === formData.maChinhSach)
                          if (selectedPolicy) {
                            return selectedPolicy.tongNgay > 0 
                              ? `Ch√≠nh s√°ch VIP: ${selectedPolicy.tongNgay} ng√†y - ${selectedPolicy.loaiChinhSach}`
                              : `Ch√≠nh s√°ch th∆∞·ªùng: ${selectedPolicy.thoiGian} ph√∫t`
                          }
                          return ''
                        })()}
                      </div>
                    )}
                  </div>

                  {formData.maChinhSach && (
                    <div className="form-group">
                      <label>Ng√†y B·∫Øt ƒê·∫ßu Ch√≠nh S√°ch</label>
                      <input
                        type="date"
                        className="dialog-input"
                        value={formData.ngayBatDauCS}
                        onChange={(e) => {
                          const startDate = e.target.value
                          const selectedPolicy = policies.find(p => p.maChinhSach === formData.maChinhSach)
                          
                          console.log(`üìÖ User changed start date: ${startDate}`)
                          console.log(`üìÖ Selected policy for calculation:`, selectedPolicy)
                          
                          const endDate = selectedPolicy ? calculatePolicyEndDate(startDate, selectedPolicy.tongNgay) : ""
                          
                          console.log(`üìÖ Calculated end date: ${endDate}`)
                          
                          setFormData({
                            ...formData, 
                            ngayBatDauCS: startDate,
                            ngayKetThucCS: endDate,
                            tongNgay: selectedPolicy?.tongNgay || 0
                          })
                        }}
                      />
                    </div>
                  )}

                  {formData.ngayKetThucCS && (
                    <div className="form-group">
                      <label>Ng√†y K·∫øt Th√∫c Ch√≠nh S√°ch</label>
                      <input
                        type="date"
                        className="dialog-input"
                        value={formData.ngayKetThucCS}
                        readOnly
                        style={{ backgroundColor: '#f3f4f6' }}
                      />
                    </div>
                  )}
                </>
              )}

              <div className="form-group">
                <label>Ghi Ch√∫</label>
                <textarea
                  className="dialog-input"
                  value={formData.ghiChu}
                  onChange={(e) => setFormData({...formData, ghiChu: e.target.value})}
                  placeholder="Ghi ch√∫ th√™m (t√πy ch·ªçn)"
                  rows="3"
                />
              </div>

              {/* Debug test button */}
              <div className="form-group">
                <button
                  type="button"
                  className="btn-secondary"
                  onClick={() => {
                    console.log('üß™ Test Button Clicked')
                    console.log('üß™ Current formData:', formData)
                    console.log('üß™ Available policies:', policies)
                    
                    if (formData.maChinhSach && formData.ngayBatDauCS) {
                      const selectedPolicy = policies.find(p => p.maChinhSach === formData.maChinhSach)
                      console.log('üß™ Selected policy:', selectedPolicy)
                      
                      if (selectedPolicy?.tongNgay) {
                        const testEndDate = tinhNgayKetThucChinhSach(formData.ngayBatDauCS, selectedPolicy.tongNgay)
                        console.log('üß™ Test calculated end date:', testEndDate)
                        
                        // Force update formData
                        setFormData(prev => ({
                          ...prev,
                          ngayKetThucCS: testEndDate
                        }))
                      }
                    }
                  }}
                  style={{ marginBottom: '10px' }}
                >
                  Test Calculate End Date
                </button>
              </div>
            </div>

            <div className="dialog-footer">
              <button 
                className="dialog-btn dialog-btn-primary" 
                onClick={handleFormSubmit} 
                disabled={loading || !formData.uidThe.trim()}
                style={{
                  opacity: loading || !formData.uidThe.trim() ? 0.6 : 1,
                  cursor: loading || !formData.uidThe.trim() ? 'not-allowed' : 'pointer'
                }}
              >
                {loading ? "ƒêang l∆∞u..." : (editingCard ? "C·∫≠p Nh·∫≠t" : "Th√™m M·ªõi")}
              </button>
              <button 
                className="dialog-btn dialog-btn-secondary" 
                onClick={() => {
                  setShowAddDialog(false)
                  setValidationErrors({})
                }}
                disabled={loading}
              >
                H·ªßy
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Card History Dialog */}
      {showCardHistory && (
        <CardHistoryDialog
          cardId={selectedCardForHistory}
          onClose={() => {
            setShowCardHistory(false)
            setSelectedCardForHistory(null)
          }}
        />
      )}
    </div>
  )
}

export default RfidManagerDialog
