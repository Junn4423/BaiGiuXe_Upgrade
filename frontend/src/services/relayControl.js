// relayControl.js - Node.js USB Relay Control Service
// Converted from Python relaycontrol.py

const HID = require("node-hid");

class USBRelayController {
  constructor() {
    this.device = null;
    this.vendorId = 0x16c0;
    this.productId = 0x05df;
    this.isConnected = false;
  }

  /**
   * K·∫øt n·ªëi v·ªõi USB Relay device
   */
  async connect() {
    try {
      console.log("üîå ƒêang k·∫øt n·ªëi USB Relay...");

      // T√¨m thi·∫øt b·ªã
      const devices = HID.devices();
      const targetDevice = devices.find(
        (d) => d.vendorId === this.vendorId && d.productId === this.productId
      );

      if (!targetDevice) {
        throw new Error("USB Relay device kh√¥ng t√¨m th·∫•y");
      }

      // M·ªü k·∫øt n·ªëi
      this.device = new HID.HID(this.vendorId, this.productId);
      this.isConnected = true;

      console.log("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi USBRelay4");
      console.log(
        `   - Vendor ID: 0x${this.vendorId.toString(16).toUpperCase()}`
      );
      console.log(
        `   - Product ID: 0x${this.productId.toString(16).toUpperCase()}`
      );

      return true;
    } catch (error) {
      console.error("‚ùå L·ªói k·∫øt n·ªëi USB Relay:", error.message);
      this.isConnected = false;
      throw error;
    }
  }

  /**
   * Ng·∫Øt k·∫øt n·ªëi
   */
  disconnect() {
    try {
      if (this.device) {
        // T·∫Øt t·∫•t c·∫£ relay tr∆∞·ªõc khi ng·∫Øt k·∫øt n·ªëi
        this.turnOffAllRelays();
        this.device.close();
        this.device = null;
      }
      this.isConnected = false;
      console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi USB Relay");
    } catch (error) {
      console.error("‚ùå L·ªói ng·∫Øt k·∫øt n·ªëi:", error.message);
    }
  }

  /**
   * Ki·ªÉm tra k·∫øt n·ªëi
   */
  checkConnection() {
    if (!this.isConnected || !this.device) {
      throw new Error("USB Relay ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi");
    }
  }

  /**
   * ƒêi·ªÅu khi·ªÉn relay ƒë∆°n l·∫ª
   * @param {number} relayNum - S·ªë relay (1-4)
   * @param {boolean} state - true=ON, false=OFF
   */
  async controlRelay(relayNum, state) {
    try {
      this.checkConnection();

      if (relayNum < 1 || relayNum > 4) {
        throw new Error("Relay number ph·∫£i t·ª´ 1-4");
      }

      let featureData;
      let action, color;

      if (state) {
        featureData = [
          0x00,
          0xff,
          relayNum,
          0x01,
          0x00,
          0x00,
          0x00,
          0x00,
          0x00,
        ];
        action = "B·∫¨T";
        color = "üî¥";
      } else {
        featureData = [
          0x00,
          0xfd,
          relayNum,
          0x00,
          0x00,
          0x00,
          0x00,
          0x00,
          0x00,
        ];
        action = "T·∫ÆT";
        color = "‚ö´";
      }

      // G·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn
      const result = this.device.sendFeatureReport(featureData);
      console.log(
        `${color} ${action} Relay ${relayNum} - Result: ${result} bytes`
      );

      return {
        success: result > 0,
        relayNum,
        state,
        action,
        result,
      };
    } catch (error) {
      console.error(`‚ùå L·ªói ƒëi·ªÅu khi·ªÉn relay ${relayNum}:`, error.message);
      throw error;
    }
  }

  /**
   * T·∫Øt t·∫•t c·∫£ relay
   */
  async turnOffAllRelays() {
    try {
      this.checkConnection();

      const featureData = [
        0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ];
      const result = this.device.sendFeatureReport(featureData);

      console.log(`‚ö´ T·∫ÆT T·∫§T C·∫¢ relay - Result: ${result} bytes`);

      return {
        success: result > 0,
        action: "TURN_OFF_ALL",
        result,
      };
    } catch (error) {
      console.error("‚ùå L·ªói t·∫Øt t·∫•t c·∫£ relay:", error.message);
      throw error;
    }
  }

  /**
   * ƒêi·ªÅu khi·ªÉn relay b·∫±ng bitmask
   * @param {number} bitmask - Bitmask (bit 0=relay1, bit 1=relay2, bit 2=relay3, bit 3=relay4)
   */
  async controlRelayBitmask(bitmask) {
    try {
      this.checkConnection();

      if (bitmask < 0 || bitmask > 15) {
        throw new Error("Bitmask ph·∫£i t·ª´ 0-15 (0x00-0x0F)");
      }

      const featureData = [
        0x00,
        0xff,
        bitmask,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
        0x00,
      ];
      const result = this.device.sendFeatureReport(featureData);

      console.log(
        `üéØ Set bitmask 0x${bitmask
          .toString(16)
          .toUpperCase()
          .padStart(2, "0")} - Result: ${result} bytes`
      );

      return {
        success: result > 0,
        bitmask,
        action: "BITMASK_CONTROL",
        result,
      };
    } catch (error) {
      console.error(`‚ùå L·ªói bitmask control:`, error.message);
      throw error;
    }
  }

  /**
   * B·∫≠t relay (wrapper function)
   */
  async turnOn(relayNum) {
    return await this.controlRelay(relayNum, true);
  }

  /**
   * T·∫Øt relay (wrapper function)
   */
  async turnOff(relayNum) {
    return await this.controlRelay(relayNum, false);
  }

  /**
   * Test sequence - b·∫≠t/t·∫Øt tu·∫ßn t·ª± t·∫•t c·∫£ relay
   */
  async testSequence(cycles = 1, delayMs = 1000) {
    try {
      console.log(`üß™ B·∫Øt ƒë·∫ßu test sequence (${cycles} cycles)...`);

      for (let cycle = 1; cycle <= cycles; cycle++) {
        console.log(`\n--- Cycle ${cycle}/${cycles} ---`);

        for (let relayNum = 1; relayNum <= 4; relayNum++) {
          console.log(`Testing Relay ${relayNum}:`);

          // B·∫≠t
          await this.controlRelay(relayNum, true);
          await this.delay(delayMs);

          // T·∫Øt
          await this.controlRelay(relayNum, false);
          await this.delay(delayMs);
        }

        if (cycle < cycles) {
          console.log(`Ngh·ªâ ${delayMs * 2}ms...`);
          await this.delay(delayMs * 2);
        }
      }

      // T·∫Øt t·∫•t c·∫£ cu·ªëi test
      await this.turnOffAllRelays();
      console.log("‚úÖ Test sequence ho√†n th√†nh");
    } catch (error) {
      console.error("‚ùå L·ªói test sequence:", error.message);
      throw error;
    }
  }

  /**
   * Test bitmask patterns
   */
  async testBitmaskPatterns(cycles = 1, delayMs = 1500) {
    try {
      const patterns = [
        { bitmask: 0x01, description: "Ch·ªâ Relay 1" }, // 0001
        { bitmask: 0x02, description: "Ch·ªâ Relay 2" }, // 0010
        { bitmask: 0x04, description: "Ch·ªâ Relay 3" }, // 0100
        { bitmask: 0x08, description: "Ch·ªâ Relay 4" }, // 1000
        { bitmask: 0x03, description: "Relay 1+2" }, // 0011
        { bitmask: 0x0c, description: "Relay 3+4" }, // 1100
        { bitmask: 0x05, description: "Relay 1+3" }, // 0101
        { bitmask: 0x0a, description: "Relay 2+4" }, // 1010
        { bitmask: 0x0f, description: "T·∫•t c·∫£ relay" }, // 1111
        { bitmask: 0x00, description: "T·∫Øt t·∫•t c·∫£" }, // 0000
      ];

      console.log(`üéØ B·∫Øt ƒë·∫ßu test bitmask patterns (${cycles} cycles)...`);

      for (let cycle = 1; cycle <= cycles; cycle++) {
        console.log(`\n--- Pattern Cycle ${cycle}/${cycles} ---`);

        for (const pattern of patterns) {
          console.log(
            `\n${pattern.description} (0x${pattern.bitmask
              .toString(16)
              .toUpperCase()
              .padStart(2, "0")}):`
          );
          await this.controlRelayBitmask(pattern.bitmask);
          await this.delay(delayMs);
        }

        if (cycle < cycles) {
          console.log(`Ngh·ªâ ${delayMs * 2}ms...`);
          await this.delay(delayMs * 2);
        }
      }

      // T·∫Øt t·∫•t c·∫£ cu·ªëi test
      await this.turnOffAllRelays();
      console.log("‚úÖ Test bitmask patterns ho√†n th√†nh");
    } catch (error) {
      console.error("‚ùå L·ªói test bitmask patterns:", error.message);
      throw error;
    }
  }

  /**
   * L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i (simulation - hardware kh√¥ng h·ªó tr·ª£ read back)
   */
  getStatus() {
    return {
      connected: this.isConnected,
      device: this.device ? "USBRelay4" : null,
      vendorId: this.vendorId,
      productId: this.productId,
    };
  }

  /**
   * Delay helper function
   */
  async delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}

// Singleton instance
let relayController = null;

/**
 * L·∫•y instance c·ªßa relay controller
 */
function getRelayController() {
  if (!relayController) {
    relayController = new USBRelayController();
  }
  return relayController;
}

/**
 * API functions for frontend
 */
const RelayControlAPI = {
  /**
   * K·∫øt n·ªëi v·ªõi USB Relay
   */
  async connect() {
    const controller = getRelayController();
    return await controller.connect();
  },

  /**
   * Ng·∫Øt k·∫øt n·ªëi
   */
  disconnect() {
    const controller = getRelayController();
    controller.disconnect();
  },

  /**
   * ƒêi·ªÅu khi·ªÉn relay ƒë∆°n l·∫ª
   */
  async controlRelay(relayNum, state) {
    const controller = getRelayController();
    return await controller.controlRelay(relayNum, state);
  },

  /**
   * B·∫≠t relay
   */
  async turnOn(relayNum) {
    const controller = getRelayController();
    return await controller.turnOn(relayNum);
  },

  /**
   * T·∫Øt relay
   */
  async turnOff(relayNum) {
    const controller = getRelayController();
    return await controller.turnOff(relayNum);
  },

  /**
   * T·∫Øt t·∫•t c·∫£ relay
   */
  async turnOffAll() {
    const controller = getRelayController();
    return await controller.turnOffAllRelays();
  },

  /**
   * ƒêi·ªÅu khi·ªÉn b·∫±ng bitmask
   */
  async controlBitmask(bitmask) {
    const controller = getRelayController();
    return await controller.controlRelayBitmask(bitmask);
  },

  /**
   * Test sequence
   */
  async testSequence(cycles = 1, delayMs = 1000) {
    const controller = getRelayController();
    return await controller.testSequence(cycles, delayMs);
  },

  /**
   * Test bitmask patterns
   */
  async testBitmaskPatterns(cycles = 1, delayMs = 1500) {
    const controller = getRelayController();
    return await controller.testBitmaskPatterns(cycles, delayMs);
  },

  /**
   * L·∫•y tr·∫°ng th√°i
   */
  getStatus() {
    const controller = getRelayController();
    return controller.getStatus();
  },
};

module.exports = RelayControlAPI;
