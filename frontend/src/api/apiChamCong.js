import { url_api_chamcong, url_api } from './url.js';

// API endpoint cho ch·∫•m c√¥ng
const ATTENDANCE_API_BASE = url_api_chamcong;

// Local storage ƒë·ªÉ l∆∞u d·ªØ li·ªáu ch·∫•m c√¥ng h√¥m nay
const ATTENDANCE_STORAGE_KEY = 'attendance_today';

/**
 * L·∫•y m√£ phi√™n hi·ªán t·∫°i t·ª´ b·∫£ng pm_nc0009 (phi√™n g·ª≠i xe ƒëang ho·∫°t ƒë·ªông)
 * @returns {Promise<string|null>} - M√£ phi√™n hi·ªán t·∫°i ho·∫∑c null n·∫øu kh√¥ng c√≥
 */
async function getCurrentActiveSessionId() {
  try {
    const response = await fetch(url_api, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        table: "pm_nc0009",
        func: "getCurrentActiveSession"
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    
    if (result && result.success && result.data && result.data.length > 0) {
      // L·∫•y phi√™n g·ª≠i xe m·ªõi nh·∫•t (theo th·ªùi gian v√†o)
      const activeSession = result.data[0];
      const sessionId = activeSession.lv001 || activeSession.maPhien;
      console.log('‚úÖ L·∫•y ƒë∆∞·ª£c m√£ phi√™n hi·ªán t·∫°i:', sessionId);
      return sessionId;
    }
    
    console.log('‚ÑπÔ∏è Kh√¥ng c√≥ phi√™n g·ª≠i xe n√†o ƒëang ho·∫°t ƒë·ªông');
    return null;
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y m√£ phi√™n hi·ªán t·∫°i:', error);
    return null;
  }
}

/**
 * G·ª≠i ·∫£nh ch·∫•m c√¥ng ƒë·∫øn h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t
 * @param {Blob|File} imageBlob - ·∫¢nh khu√¥n m·∫∑t ƒë·ªÉ ch·∫•m c√¥ng
 * @param {string} licensePlate - Bi·ªÉn s·ªë xe (t√πy ch·ªçn)
 * @returns {Promise<Object>} - K·∫øt qu·∫£ ch·∫•m c√¥ng
 */
export async function attendanceByImage(imageBlob, licensePlate = '') {
  try {
    console.log('üì∏ G·ª≠i ·∫£nh ch·∫•m c√¥ng:', {
      imageSize: imageBlob.size,
      imageType: imageBlob.type,
      licensePlate
    });

    // L·∫•y m√£ phi√™n hi·ªán t·∫°i
    const attendanceCode = await getCurrentActiveSessionId();
    console.log('üéØ M√£ phi√™n hi·ªán t·∫°i cho ch·∫•m c√¥ng:', attendanceCode);

    const formData = new FormData();
    
    // T·∫°o file t·ª´ blob
    const file = new File([imageBlob], `attendance_${Date.now()}.jpg`, {
      type: imageBlob.type || 'image/jpeg',
      lastModified: Date.now()
    });
    
    formData.append('image', file);
    
    // Th√™m attendance_code n·∫øu c√≥ m√£ phi√™n
    if (attendanceCode) {
      formData.append('attendance_code', attendanceCode);
      console.log('‚úÖ ƒê√£ th√™m attendance_code v√†o request:', attendanceCode);
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ m√£ phi√™n hi·ªán t·∫°i, g·ª≠i ch·∫•m c√¥ng kh√¥ng c√≥ attendance_code');
    }

    const response = await fetch(`${ATTENDANCE_API_BASE}/api/attendance_image`, {
      method: 'POST',
      body: formData
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log('‚úÖ K·∫øt qu·∫£ ch·∫•m c√¥ng:', result);

    // N·∫øu ch·∫•m c√¥ng th√†nh c√¥ng, l∆∞u v√†o localStorage
    if (result.success && result.user) {
      const attendanceRecord = {
        user: result.user,
        status: result.status,
        message: result.message,
        attendance_code: result.attendance_code || attendanceCode, // L∆∞u attendance_code t·ª´ response ho·∫∑c t·ª´ request
        licensePlate: licensePlate || 'Kh√¥ng x√°c ƒë·ªãnh',
        timestamp: new Date().toISOString()
      };
      
      // L∆∞u record
      saveAttendanceRecord(attendanceRecord);
    }
    // N·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c, b·ªè qua (kh√¥ng hi·ªÉn th·ªã l·ªói)

    return result;
  } catch (error) {
    console.error('‚ùå L·ªói ch·∫•m c√¥ng:', error);
    // B·ªè qua l·ªói, kh√¥ng hi·ªÉn th·ªã cho user
    return { success: false, message: error.message };
  }
}/**
 * G·ª≠i ·∫£nh ch·∫•m c√¥ng b·∫±ng base64
 * @param {string} imageBase64 - ·∫¢nh base64
 * @param {string} licensePlate - Bi·ªÉn s·ªë xe (t√πy ch·ªçn)
 * @returns {Promise<Object>} - K·∫øt qu·∫£ ch·∫•m c√¥ng
 */
export async function attendanceByBase64(imageBase64, licensePlate = '') {
  try {
    console.log('üì∏ G·ª≠i ·∫£nh ch·∫•m c√¥ng (base64):', {
      imageLength: imageBase64.length,
      licensePlate
    });

    // L·∫•y m√£ phi√™n hi·ªán t·∫°i
    const attendanceCode = await getCurrentActiveSessionId();
    console.log('üéØ M√£ phi√™n hi·ªán t·∫°i cho ch·∫•m c√¥ng (base64):', attendanceCode);

    const requestBody = {
      image_base64: imageBase64
    };

    // Th√™m attendance_code n·∫øu c√≥ m√£ phi√™n
    if (attendanceCode) {
      requestBody.attendance_code = attendanceCode;
      console.log('‚úÖ ƒê√£ th√™m attendance_code v√†o request (base64):', attendanceCode);
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ m√£ phi√™n hi·ªán t·∫°i, g·ª≠i ch·∫•m c√¥ng kh√¥ng c√≥ attendance_code (base64)');
    }

    const response = await fetch(`${ATTENDANCE_API_BASE}/api/attendance_image`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log('‚úÖ K·∫øt qu·∫£ ch·∫•m c√¥ng (base64):', result);

    // N·∫øu ch·∫•m c√¥ng th√†nh c√¥ng, l∆∞u v√†o localStorage
    if (result.success && result.user) {
      const attendanceRecord = {
        user: result.user,
        status: result.status,
        message: result.message,
        attendance_code: result.attendance_code || attendanceCode, // L∆∞u attendance_code t·ª´ response ho·∫∑c t·ª´ request
        licensePlate: licensePlate || 'Kh√¥ng x√°c ƒë·ªãnh',
        timestamp: new Date().toISOString()
      };
      
      // L∆∞u record
      saveAttendanceRecord(attendanceRecord);
    }
    // N·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c, b·ªè qua (kh√¥ng hi·ªÉn th·ªã l·ªói)

    return result;
  } catch (error) {
    console.error('‚ùå L·ªói ch·∫•m c√¥ng (base64):', error);
    // B·ªè qua l·ªói, kh√¥ng hi·ªÉn th·ªã cho user
    return { success: false, message: error.message };
  }
}


/**
 * X√≥a d·ªØ li·ªáu ch·∫•m c√¥ng c≈© (ch·ªâ gi·ªØ 7 ng√†y g·∫ßn nh·∫•t) - non-blocking
 */
export function cleanupOldAttendanceData() {
  // Ch·∫°y cleanup trong background ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng UI
  setTimeout(() => {
    try {
      const existingData = JSON.parse(localStorage.getItem(ATTENDANCE_STORAGE_KEY) || '{}');
      const dataKeys = Object.keys(existingData);
      
      // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, b·ªè qua
      if (dataKeys.length === 0) return;
      
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
      
      const cleanedData = {};
      let hasChanges = false;
      
      dataKeys.forEach(dateStr => {
        const recordDate = new Date(dateStr);
        if (recordDate >= sevenDaysAgo) {
          cleanedData[dateStr] = existingData[dateStr];
        } else {
          hasChanges = true; // C√≥ d·ªØ li·ªáu c≈© b·ªã x√≥a
        }
      });
      
      // Ch·ªâ c·∫≠p nh·∫≠t localStorage n·∫øu c√≥ thay ƒë·ªïi
      if (hasChanges) {
        localStorage.setItem(ATTENDANCE_STORAGE_KEY, JSON.stringify(cleanedData));
        console.log('üßπ ƒê√£ d·ªçn d·∫πp d·ªØ li·ªáu ch·∫•m c√¥ng c≈©');
      }
    } catch (error) {
      console.error('‚ùå L·ªói cleanup d·ªØ li·ªáu ch·∫•m c√¥ng:', error);
    }
  }, 100); // Delay ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng performance ch√≠nh
}

/**
 * Convert blob to base64
 * @param {Blob} blob - File blob
 * @returns {Promise<string>} - base64 string
 */
export function blobToBase64(blob) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result);
    reader.onerror = reject;
    reader.readAsDataURL(blob);
  });
}

/**
 * X·ª≠ l√Ω ch·∫•m c√¥ng khi ch·ª•p ·∫£nh khu√¥n m·∫∑t - CH·ªà th·ª±c hi·ªán ·ªü ch·∫ø ƒë·ªô xe v√†o
 * @param {Blob|File} faceImageBlob - ·∫¢nh khu√¥n m·∫∑t
 * @param {string} licensePlate - Bi·ªÉn s·ªë xe ƒë√£ nh·∫≠n di·ªán ƒë∆∞·ª£c
 * @param {Function} showToast - H√†m hi·ªÉn th·ªã th√¥ng b√°o toast
 * @param {string} currentMode - Ch·∫ø ƒë·ªô hi·ªán t·∫°i ("vao" ho·∫∑c "ra")
 * @returns {Promise<boolean>} - True n·∫øu ch·∫•m c√¥ng th√†nh c√¥ng
 */
export async function processAttendanceImage(faceImageBlob, licensePlate = '', showToast = null, currentMode = 'vao') {
  try {
    // Early validation - return immediately for invalid cases
    if (currentMode !== 'vao') {
      console.log('‚ÑπÔ∏è Kh√¥ng x·ª≠ l√Ω ch·∫•m c√¥ng ·ªü ch·∫ø ƒë·ªô xe ra');
      return false;
    }

    if (!faceImageBlob) {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh khu√¥n m·∫∑t ƒë·ªÉ ch·∫•m c√¥ng');
      return false;
    }

    console.log('üéØ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ch·∫•m c√¥ng v·ªõi ·∫£nh khu√¥n m·∫∑t (mode: v√†o)');

    // G·ª≠i ·∫£nh ch·∫•m c√¥ng v·ªõi bi·ªÉn s·ªë ƒë√£ nh·∫≠n di·ªán ƒë∆∞·ª£c
    const result = await attendanceByImage(faceImageBlob, licensePlate);

    if (result.success && result.user) {
      // Ch·∫•m c√¥ng th√†nh c√¥ng - x·ª≠ l√Ω UI ngay l·∫≠p t·ª©c
      const message = result.message || `ƒêi·ªÉm danh th√†nh c√¥ng cho ${result.user.name}`;
      
      console.log('‚úÖ Ch·∫•m c√¥ng th√†nh c√¥ng:', {
        employee: result.user,
        status: result.status,
        licensePlate: licensePlate,
        message: result.message
      });

      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng ngay (non-blocking)
      if (showToast) {
        // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ kh√¥ng ch·∫∑n UI
        setTimeout(() => {
          showToast(message, 'success', 3000);
        }, 0);
      }

      // Return ngay ƒë·ªÉ kh√¥ng ch·∫∑n UI, localStorage s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong attendanceByImage
      return true;
    } else {
      // Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c nh√¢n vi√™n (kh√°ch h√†ng) - b·ªè qua ho√†n to√†n
      console.log('Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c nh√¢n vi√™n ph√π h·ª£p (c√≥ th·ªÉ l√† kh√°ch h√†ng), ti·∫øp t·ª•c ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
      return false;
    }
  } catch (error) {
    console.error('L·ªói x·ª≠ l√Ω ch·∫•m c√¥ng:', error);
    // Kh√¥ng hi·ªÉn th·ªã l·ªói cho user, ch·ªâ log ƒë·ªÉ debug
    return false;
  }
}

/**
 * L∆∞u record ch·∫•m c√¥ng v√†o localStorage (non-blocking)
 * @param {Object} record - D·ªØ li·ªáu ch·∫•m c√¥ng
 */
function saveAttendanceRecord(record) {
  // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ kh√¥ng ch·∫∑n UI thread
  setTimeout(() => {
    try {
      const today = new Date().toDateString();
      const storageKey = `attendance_records_${today}`;
      
      const existingRecords = JSON.parse(localStorage.getItem(storageKey) || '[]');
      existingRecords.push(record);
      
      localStorage.setItem(storageKey, JSON.stringify(existingRecords));
      
      console.log('ƒê√£ l∆∞u record ch·∫•m c√¥ng:', {
        user: record.user?.name,
        status: record.status,
        attendance_code: record.attendance_code,
        licensePlate: record.licensePlate,
        timestamp: record.timestamp
      });
    } catch (error) {
      console.error('L·ªói l∆∞u record ch·∫•m c√¥ng:', error);
    }
  }, 0);
}

/**
 * L·∫•y danh s√°ch ch·∫•m c√¥ng h√¥m nay
 * @returns {Array} - Danh s√°ch ch·∫•m c√¥ng
 */
export function getTodayAttendanceRecords() {
  try {
    const today = new Date().toDateString();
    const storageKey = `attendance_records_${today}`;
    
    const records = JSON.parse(localStorage.getItem(storageKey) || '[]');
    
    // Sort by timestamp desc (m·ªõi nh·∫•t tr∆∞·ªõc)
    return records.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
  } catch (error) {
    console.error('L·ªói l·∫•y records ch·∫•m c√¥ng:', error);
    return [];
  }
}

/**
 * X√≥a d·ªØ li·ªáu ch·∫•m c√¥ng h√¥m nay
 */
export function clearTodayAttendanceRecords() {
  try {
    const today = new Date().toDateString();
    const storageKey = `attendance_records_${today}`;
    
    localStorage.removeItem(storageKey);
    console.log('ƒê√£ x√≥a d·ªØ li·ªáu ch·∫•m c√¥ng h√¥m nay');
  } catch (error) {
    console.error('L·ªói x√≥a records ch·∫•m c√¥ng:', error);
  }
}

export default {
  attendanceByImage,
  attendanceByBase64,
  processAttendanceImage,
  getTodayAttendanceRecords,
  clearTodayAttendanceRecords,
  blobToBase64
};
