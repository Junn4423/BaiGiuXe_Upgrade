// api.js - Chuy·ªÉn ƒë·ªïi c√°c h√†m Python sang React (JS)
// L∆∞u √Ω: C·∫ßn ch·ªânh s·ª≠a urlApi cho ƒë√∫ng endpoint backend c·ªßa b·∫°n

import { api_BienSo, url_api, url_login_api } from "./url";

const urlApi = url_api; // Thay ƒë·ªïi cho ƒë√∫ng backend
const urlLoginApi = url_login_api;

// -------------------- Authentication helpers --------------------
let authCache = null; // L∆∞u token sau l·∫ßn ƒëƒÉng nh·∫≠p ƒë·∫ßu ti√™n

async function getAuthToken(username = "admin", password = "1") {
  // Lu√¥n l·∫•y token m·ªõi ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã expired
  console.log("Getting fresh auth token...");

  const payload = {
    txtUserName: username,
    txtPassword: password,
  };

  const res = await fetch(urlLoginApi, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  });

  if (!res.ok) {
    throw new Error("Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token");
  }

  authCache = await res.json();
  console.log("Got auth token:", authCache);
  return authCache;
}

async function getAuthHeaders() {
  const authData = await getAuthToken();
  return {
    "Content-Type": "application/json",
    "X-USER-CODE": authData.code,
    "X-USER-TOKEN": authData.token,
  };
}

async function callApiWithAuth(payload) {
  console.log("Calling API with auth:", payload);
  const headers = await getAuthHeaders();
  console.log("Using headers:", headers);

  const res = await fetch(urlApi, {
    method: "POST",
    headers,
    body: JSON.stringify(payload),
  });

  const result = await handleApiResponse(res);
  console.log("API response:", result);
  return result;
}

function handleApiResponse(response) {
  if (!response.ok) {
    console.error("API response not ok:", response.status, response.statusText);
    throw new Error(`Network response was not ok: ${response.status}`);
  }

  return response.json().then((data) => {
    console.log("Raw API response:", data);

    if (typeof data === "object" && data.success === false) {
      throw new Error(data.message || "API error");
    }
    return data;
  });
}

// -------------------- API Functions --------------------

export async function layALLLoaiPhuongTien() {
  const payload = { table: "pm_nc0001", func: "data" };
  return callApiWithAuth(payload);
}

export async function themLoaiPhuongTien(loaiPhuongTien) {
  const payload = {
    table: "pm_nc0001",
    func: "add",
    maLoaiPT: loaiPhuongTien.maLoaiPT,
    tenLoaiPT: loaiPhuongTien.tenLoaiPT,
    moTa: loaiPhuongTien.moTa,
    loaiXe: loaiPhuongTien.loaiXe, 
  };
  return callApiWithAuth(payload);
}
// C·∫≠p nh·∫≠t lo·∫°i ph∆∞∆°ng ti·ªán
export async function capNhatLoaiPhuongTien(loaiPhuongTien) {
  const payload = {
    table: "pm_nc0001",
    func: "edit",
    maLoaiPT: loaiPhuongTien.maLoaiPT,
    tenLoaiPT: loaiPhuongTien.tenLoaiPT,
    moTa: loaiPhuongTien.moTa,
    loaiXe: loaiPhuongTien.loaiXe, 
  };
  return callApiWithAuth(payload);
}

// X√≥a lo·∫°i ph∆∞∆°ng ti·ªán
export async function xoaLoaiPhuongTien(maLoaiPT) {
  const payload = { table: "pm_nc0001", func: "delete", maLoaiPT };
  return callApiWithAuth(payload);
}

export async function layDanhSachCamera() {
  const payload = { table: "pm_nc0006_1", func: "data" };
  return callApiWithAuth(payload);
}

export async function themCamera(camera) {
  const payload = {
    table: "pm_nc0006_1",
    func: "add",
    maCamera: camera.maCamera,
    tenCamera: camera.tenCamera,
    loaiCamera: camera.loaiCamera,
    chucNangCamera: camera.chucNangCamera,
    maKhuVuc: camera.maKhuVuc,
    linkRTSP: camera.linkRTSP,
  };
  return callApiWithAuth(payload);
}

export async function capNhatCamera(camera) {
  const payload = {
    table: "pm_nc0006_1",
    func: "edit",
    maCamera: camera.maCamera,
    tenCamera: camera.tenCamera,
    loaiCamera: camera.loaiCamera,
    chucNangCamera: camera.chucNangCamera,
    maKhuVuc: camera.maKhuVuc,
    linkRTSP: camera.linkRTSP,
  };
  return callApiWithAuth(payload);
}

export async function xoaCamera(maCamera) {
  const payload = { table: "pm_nc0006_1", func: "delete", maCamera };
  return callApiWithAuth(payload);
}

// --- Th√™m c√°c h√†m API c√≤n l·∫°i chuy·ªÉn t·ª´ Python sang JS ---

export async function layALLPhienGuiXe() {
  const payload = { table: "pm_nc0009", func: "data" };
  return callApiWithAuth(payload);
}

export async function themPhienGuiXe(session) {
  const payload = {
    table: "pm_nc0009",
    func: "add",
    uidThe: session.uidThe,
    bienSo: session.bienSo || "",
    chinhSach: session.chinhSach,
    congVao: session.congVao,
    gioVao: session.gioVao,
    anhVao: session.anhVao || "",
    anhMatVao: session.anhMatVao || "",
    trangThai: session.trangThai || "TRONG_BAI",
    camera_id: session.camera_id,
    plate_match: session.plate_match || 0,
    plate: session.plate || "",
    loaiXe: session.loaiXe || "0", // Th√™m loaiXe v√†o payload
  };

  // Ki·ªÉm tra lo·∫°i xe ƒë·ªÉ x·ª≠ l√Ω v·ªã tr√≠ g·ª≠i
  // loaiXe = "0": kh√¥ng c·∫ßn v·ªã tr√≠ g·ª≠i (xe m√°y, xe ƒë·∫°p, ...)
  // loaiXe = "1": y√™u c·∫ßu v·ªã tr√≠ g·ª≠i (√¥ t√¥, xe t·∫£i, ...)
  if (session.loaiXe === "1" || session.loaiXe === 1) {
    // Ch·ªâ th√™m viTriGui khi loaiXe = 1 V√Ä c√≥ d·ªØ li·ªáu viTriGui
    if (session.viTriGui !== undefined && session.viTriGui !== null) {
      payload.viTriGui = session.viTriGui;
      console.log("Lo·∫°i xe = 1: Y√™u c·∫ßu v·ªã tr√≠ g·ª≠i:", session.viTriGui);
    } else {
      console.log("Lo·∫°i xe = 1: Kh√¥ng c√≥ v·ªã tr√≠ g·ª≠i ƒë∆∞·ª£c cung c·∫•p");
    }
  } else if (session.loaiXe === "0" || session.loaiXe === 0) {
    // Lo·∫°i xe = 0: kh√¥ng c·∫ßn v·ªã tr√≠ g·ª≠i, kh√¥ng th√™m field viTriGui v√†o payload
    console.log("Lo·∫°i xe = 0: Kh√¥ng c·∫ßn v·ªã tr√≠ g·ª≠i");
  } else {
    // Tr∆∞·ªùng h·ª£p kh√¥ng x√°c ƒë·ªãnh loaiXe, kh√¥ng th√™m viTriGui
    console.log("Lo·∫°i xe kh√¥ng x√°c ƒë·ªãnh, kh√¥ng th√™m v·ªã tr√≠ g·ª≠i");
  }

  // Remove undefined/null values to avoid API issues
  Object.keys(payload).forEach((key) => {
    if (payload[key] === undefined || payload[key] === null) {
      delete payload[key];
    }
  });

  console.log("üì§ Sending themPhienGuiXe payload:", payload);
  console.log(
    "üîç Lo·∫°i xe:",
    session.loaiXe,
    "| V·ªã tr√≠ g·ª≠i:",
    payload.viTriGui || "Kh√¥ng c√≥"
  );
  return callApiWithAuth(payload);
}

export async function capNhatPhienGuiXe(session) {
  const payload = {
    table: "pm_nc0009",
    func: "edit",
    maPhien: session.maPhien,
    congRa: session.congRa,
    gioRa: session.gioRa,
    anhRa: session.anhRa,
    anhMatRa: session.anhMatRa,
    camera_id: session.camera_id,
    plate_match: session.plate_match,
    plate: session.plate,
  };
  return callApiWithAuth(payload);
}

export async function loadPhienGuiXeTheoMaThe(maThe) {
  const payload = {
    table: "pm_nc0009",
    func: "layPhienGuiXeTuUID",
    uidThe: maThe,
  };
  return callApiWithAuth(payload);
}

export async function loadPhienGuiXeTheoMaThe_XeRa(maThe) {
  const payload = {
    table: "pm_nc0009",
    func: "layPhienGuiXeTuUID_Da_Ra",
    uidThe: maThe,
  };
  return callApiWithAuth(payload);
}

export async function taoBangChoPhienLamViec() {
  const payload = { table: "pm_nc0009", func: "taoBangChoPhienLamViec" };
  return callApiWithAuth(payload);
}

export async function layChinhSachGiaTheoLoaiPT(maLoaiPT) {
  const payload = { table: "pm_nc0008", func: "layChinhSachTuPT", maLoaiPT };
  return callApiWithAuth(payload);
}

export async function themThe(uidThe, loaiThe, trangThai = "1") {
  // Wrapper function for backward compatibility
  return themTheRFID({ uidThe, loaiThe, trangThai });
}

// -------------------- Pricing Policy Functions --------------------
export async function layALLChinhSachGia() {
  const payload = { table: "pm_nc0008", func: "getAllPolicies" };
  const res = await callApiWithAuth(payload);
  return res.data || [];
}
// Alias for backward compatibility: original import in RfidManagerDialogClean.jsx expects layChinhSachGia
export { layALLChinhSachGia as layChinhSachGia };

// Additional aliases for RFID card functions used in RfidManagerDialogClean.jsx
export { capNhatTheRFID as capNhatThe };
export { xoaTheRFID as xoaThe };

export async function themChinhSachGia(chinhSach) {
  console.log("themChinhSachGia called with:", chinhSach);
  const payload = {
    table: "pm_nc0008",
    func: "createPolicy",
    policyData: chinhSach,
  };
  return callApiWithAuth(payload);
}

export async function capNhatChinhSachGia(maChinhSach, chinhSach) {
  console.log("capNhatChinhSachGia called with:", maChinhSach, chinhSach);
  const payload = {
    table: "pm_nc0008",
    func: "updatePolicy",
    policyId: maChinhSach,
    policyData: chinhSach,
  };
  return callApiWithAuth(payload);
}

export async function xoaChinhSachGia(maChinhSach) {
  console.log("xoaChinhSachGia called with:", maChinhSach);
  const payload = {
    table: "pm_nc0008",
    func: "deletePolicy",
    policyId: maChinhSach,
  };
  return callApiWithAuth(payload);
}

//lay danh sach cong
export async function layDanhSachCong() {
  const payload = { table: "pm_nc0007", func: "data" };
  return callApiWithAuth(payload);
}

// -------------------- Zone Management Functions --------------------
export async function layDanhSachKhuVuc() {
  const payload = { table: "pm_nc0004_1", func: "data" };
  return callApiWithAuth(payload);
}

export async function themKhuVuc(khuVuc) {
  const payload = {
    table: "pm_nc0004_1",
    func: "add",
    maKhuVuc: khuVuc.maKhuVuc,
    tenKhuVuc: khuVuc.tenKhuVuc,
    moTa: khuVuc.moTa || "",
  };
  return callApiWithAuth(payload);
}

export async function capNhatKhuVuc(khuVuc) {
  const payload = {
    table: "pm_nc0004_1",
    func: "edit",
    maKhuVuc: khuVuc.maKhuVuc,
    tenKhuVuc: khuVuc.tenKhuVuc,
    moTa: khuVuc.moTa,
  };
  return callApiWithAuth(payload);
}

export async function xoaKhuVuc(maKhuVuc) {
  const payload = { table: "pm_nc0004_1", func: "delete", maKhuVuc };
  return callApiWithAuth(payload);
}

export async function layDanhSachKhu() {
  const payload = { table: "pm_nc0004_1", func: "khu_vuc_camera_cong" };
  return callApiWithAuth(payload);
}

// --- B·ªï sung c√°c h√†m API c√≤n thi·∫øu t·ª´ Python sang JS ---

export async function xoaPhienGuiXe(maPhien) {
  const payload = { table: "pm_nc0009", func: "delete", maPhien };
  return callApiWithAuth(payload);
}

// Force refresh auth token - ƒë·ªÉ g·ªçi khi c·∫ßn l√†m m·ªõi token
export async function refreshAuthToken() {
  console.log("Forcing auth token refresh...");
  authCache = null; // Clear cache
  return await getAuthToken();
}

// -------------------- RFID Card Management Functions --------------------

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ th·∫ª RFID
 * @returns {Promise<Array>} Danh s√°ch th·∫ª RFID
 */
export async function layDanhSachThe() {
  const payload = { table: "pm_nc0003", func: "data" };
  return callApiWithAuth(payload);
}

/**
 * Th√™m th·∫ª RFID m·ªõi
 * @param {Object} theRFID - Th√¥ng tin th·∫ª RFID
 * @param {string} theRFID.uidThe - UID c·ªßa th·∫ª
 * @param {string} theRFID.loaiThe - Lo·∫°i th·∫ª
 * @param {string} theRFID.trangThai - Tr·∫°ng th√°i th·∫ª (m·∫∑c ƒë·ªãnh: "1")
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m th·∫ª
 */
export async function themTheRFID(theRFID) {
  const payload = {
    table: "pm_nc0003",
    func: "add",
    uidThe: theRFID.uidThe,
    loaiThe: theRFID.loaiThe,
    trangThai: theRFID.trangThai || "1",
    // ngayPhatHanh s·∫Ω ƒë∆∞·ª£c set t·ª± ƒë·ªông ·ªü backend
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t th·∫ª RFID
 * @param {Object} theRFID - Th√¥ng tin th·∫ª RFID c·∫ßn c·∫≠p nh·∫≠t
 * @param {string} theRFID.uidThe - UID c·ªßa th·∫ª
 * @param {string} theRFID.loaiThe - Lo·∫°i th·∫ª
 * @param {string} theRFID.trangThai - Tr·∫°ng th√°i th·∫ª
 * @param {string} [theRFID.ngayPhatHanh] - Ng√†y ph√°t h√†nh (optional)
 * @param {string} [theRFID.bienSoXe] - Bi·ªÉn s·ªë xe (optional)
 * @param {string} [theRFID.maChinhSach] - M√£ ch√≠nh s√°ch (optional)
 * @param {string} [theRFID.ngayKetThucCS] - Ng√†y k·∫øt th√∫c ch√≠nh s√°ch (optional)
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatTheRFID(theRFID) {
  const payload = {
    table: "pm_nc0003",
    func: "edit",
    uidThe: theRFID.uidThe,
    loaiThe: theRFID.loaiThe,
    trangThai: theRFID.trangThai,
    ngayPhatHanh: theRFID.ngayPhatHanh,
    bienSoXe: theRFID.bienSoXe,
    maChinhSach: theRFID.maChinhSach,
    ngayKetThucCS: theRFID.ngayKetThucCS,
  };
  return callApiWithAuth(payload);
}

/**
 * T√¨m th·∫ª ƒëang c√≥ phi√™n g·ª≠i xe
 * @param {string} uidThe - UID c·ªßa th·∫ª
 * @returns {Promise<Array>} Th√¥ng tin th·∫ª v√† phi√™n g·ª≠i xe
 */
export async function timTheDangCoPhien(uidThe) {
  const payload = {
    table: "pm_nc0003",
    func: "timTheDangCoPhien",
    uidThe: uidThe,
  };
  return callApiWithAuth(payload);
}

/**
 * X√≥a th·∫ª RFID
 * @param {string} uidThe - UID c·ªßa th·∫ª RFID c·∫ßn x√≥a
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a th·∫ª
 */
export async function xoaTheRFID(uidThe) {
  const payload = {
    table: "pm_nc0003",
    func: "delete",
    uidThe: uidThe,
  };
  return callApiWithAuth(payload);
}

// -------------------- License Plate Recognition API --------------------

/**
 * G·ª≠i ·∫£nh bi·ªÉn s·ªë l√™n API nh·∫≠n d·∫°ng
 * @param {Blob|File} imageBlob - ·∫¢nh bi·ªÉn s·ªë d·∫°ng Blob ho·∫∑c File
 * @returns {Promise<Object>} - K·∫øt qu·∫£ nh·∫≠n d·∫°ng bi·ªÉn s·ªë
 */
export async function nhanDangBienSo(imageBlob) {
  try {
    console.log("üöó B·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng bi·ªÉn s·ªë...", {
      blob: imageBlob,
      type: imageBlob.type,
      size: imageBlob.size,
      name: imageBlob.name || "license_plate.jpg",
    });

    // Ch·ªâ s·ª≠ d·ª•ng FormData method v√¨ server kh√¥ng h·ªó tr·ª£ Base64
    return await nhanDangBienSoFormData(imageBlob);
  } catch (error) {
    console.error("‚ùå L·ªói nh·∫≠n d·∫°ng bi·ªÉn s·ªë:", error);
    throw new Error(`Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng bi·ªÉn s·ªë: ${error.message}`);
  }
}

/**
 * G·ª≠i ·∫£nh bi·ªÉn s·ªë l√™n API nh·∫≠n d·∫°ng (ph∆∞∆°ng ph√°p FormData)
 * @param {Blob|File} imageBlob - ·∫¢nh bi·ªÉn s·ªë d·∫°ng Blob ho·∫∑c File
 * @returns {Promise<Object>} - K·∫øt qu·∫£ nh·∫≠n d·∫°ng bi·ªÉn s·ªë
 */
async function nhanDangBienSoFormData(imageBlob) {
  console.log("üì§ Trying FormData method...");

  // T·∫°o FormData ƒë·ªÉ g·ª≠i file - kh·ªõp v·ªõi Postman
  const formData = new FormData();

  // ƒê·∫£m b·∫£o file c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng nh∆∞ Postman
  const file = new File([imageBlob], "license_plate.jpg", {
    type: "image/jpeg",
    lastModified: Date.now(),
  });

  // API server mong ƒë·ª£i field t√™n l√† 'file' ch·ª© kh√¥ng ph·∫£i 'image'
  formData.append("file", file);

  // Log FormData ƒë·ªÉ debug
  console.log("üì§ FormData entries:");
  for (const [key, value] of formData.entries()) {
    console.log(
      `  ${key}:`,
      value instanceof File
        ? {
            name: value.name,
            type: value.type,
            size: value.size,
          }
        : value
    );
  }

  const response = await Promise.race([
    fetch(api_BienSo, {
      method: "POST",
      body: formData,
      // Kh√¥ng set Content-Type ƒë·ªÉ browser t·ª± ƒë·ªông th√™m boundary cho multipart/form-data
    }),
    new Promise((_, reject) => 
      setTimeout(() => reject(new Error("License plate API timeout (1 second)")), 1000)
    )
  ]);

  console.log("üì° Response status (FormData):", response.status);
  console.log(
    "üì° Response headers:",
    Object.fromEntries(response.headers.entries())
  );

  if (!response.ok) {
    // Log response text ƒë·ªÉ debug l·ªói 422
    const errorText = await response.text();
    console.error("‚ùå API Error Response (FormData):", errorText);
    throw new Error(
      `HTTP error! status: ${response.status}, message: ${errorText}`
    );
  }

  const result = await response.json();
  console.log("‚úÖ K·∫øt qu·∫£ nh·∫≠n d·∫°ng bi·ªÉn s·ªë (FormData):", result);
  return result;
}

/**
 * Convert blob/file to base64 string (utility function)
 * @param {Blob|File} blob - File blob
 * @returns {Promise<string>} - base64 string
 */
export function blobToBase64(blob) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result);
    reader.onerror = reject;
    reader.readAsDataURL(blob);
  });
}

// -------------------- DIRECT FOLDER Image Upload API (MinIO Disabled) --------------------

/**
 * Upload image to direct folder storage with automatic date-based directory structure
 * @param {Blob|File} imageBlob - Image file to upload
 * @param {string} prefix - Filename prefix (license_plate, license_plate_out, khuon_mat, etc.)
 * @param {Object} options - Additional options (for future compatibility)
 * @param {string} options.sessionId - Session ID for database update
 * @param {string} options.updateType - Type of update (plate_in, plate_out, face_in, face_out)
 * @returns {Promise<Object>} - Upload results from direct folder storage
 */
export async function uploadImageToLocal(imageBlob, prefix = 'image', options = {}) {
  try {
    console.log('üîÑ Starting image upload...', {
      blob: imageBlob,
      type: imageBlob.type,
      size: imageBlob.size,
      prefix: prefix,
      options: options
    });

    // Use provided filename if available, otherwise generate new one
    let filename;
    if (options.filename) {
      filename = options.filename;
      console.log('üè∑Ô∏è Using provided filename:', filename);
    } else {
      // Generate timestamp-based filename
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').replace('T', 'T').slice(0, -1) + 'Z';
      const extension = getFileExtension(imageBlob);
      filename = `${prefix}_${timestamp}.${extension}`;
      console.log('üè∑Ô∏è Generated new filename:', filename);
    }

    // Try local storage first if enabled
    if (await isLocalStorageEnabled()) {
      try {
        const localResult = await saveToUserDefinedFolder(imageBlob, filename, prefix);
        if (localResult.success) {
          console.log('‚úÖ Local Storage Success:', localResult);
          return {
            success: true,
            filename: filename,
            filePath: localResult.filePath,
            fullPath: localResult.fullPath,
            primaryUrl: localResult.url || filename, // Return filename for database
            urls: [localResult.url || filename],
            isLocal: true,
            message: 'L∆∞u ·∫£nh local th√†nh c√¥ng'
          };
        }
      } catch (localError) {
        console.warn('Local storage failed, falling back to server:', localError);
      }
    }

    // Fallback to server storage
    const serverResult = await uploadToLocalServer(imageBlob, filename);
    
    if (serverResult.success) {
      console.log('‚úÖ Server Storage Success:', serverResult);
      return {
        success: true,
        filename: filename,
        filePath: serverResult.filePath,
        fullPath: serverResult.fullPath,
        primaryUrl: filename, // Return filename for database
        urls: [filename],
        isLocal: false,
        message: serverResult.message
      };
    } else {
      throw new Error(serverResult.message || 'Upload failed');
    }

  } catch (error) {
    console.error('Image upload failed:', error);
    throw new Error(`Image upload failed: ${error.message}`);
  }
}

// Alias for backward compatibility - now uses direct folder storage instead of MinIO
export const uploadImageToMinIO = uploadImageToLocal;

// Helper functions for local storage
async function isLocalStorageEnabled() {
  try {
    const enabled = localStorage.getItem('local_storage_enabled') === 'true';
    const path = localStorage.getItem('image_storage_path');
    return enabled && path && path.trim() !== '';
  } catch (error) {
    return false;
  }
}

async function saveToUserDefinedFolder(imageBlob, filename, prefix) {
  try {
    let basePath = localStorage.getItem('image_storage_path');
    
    // Check if saved path is old Documents path and use default instead
    if (!basePath || basePath.includes('Documents') || basePath.includes('ParkingLotApp')) {
      console.warn('‚ö†Ô∏è Old or missing storage path detected, using default: C:/ParkingLot_Images/');
      basePath = 'C:/ParkingLot_Images';
      // Don't update localStorage here to avoid infinite loops
    }

    // Create date-based subdirectory structure (same as backend)
    const year = new Date().getFullYear();
    const month = String(new Date().getMonth() + 1).padStart(2, '0');
    const day = String(new Date().getDate()).padStart(2, '0');
    
    const subFolder = `Nam_${year}/Thang_${month}/Ngay_${day}`;
    const fullFolderPath = `${basePath}/${subFolder}`;
    
    console.log(`üíæ Saving to storage folder: ${fullFolderPath}/${filename}`);

    // Check if running in Electron
    if (window.electronAPI && window.electronAPI.saveImage) {
      // Create directory if not exists
      if (window.electronAPI.createDirectory) {
        console.log(`Creating directory: ${fullFolderPath}`);
        await window.electronAPI.createDirectory(fullFolderPath);
        console.log(`Directory ensured: ${fullFolderPath}`);
      }

      const arrayBuffer = await imageBlob.arrayBuffer();
      const uint8Array = new Uint8Array(arrayBuffer);
      
      // Save using absolute path - ƒê·ªíNG B·ªò v·ªõi backend path structure
      const electronSaveData = {
        data: Array.from(uint8Array),
        fileName: filename,
        folder: fullFolderPath // Use absolute path matching backend
      };
      
      const filePath = await window.electronAPI.saveImage(electronSaveData);
      console.log(`‚úÖ Local storage save successful: ${filePath}`);
      
      return {
        success: true,
        filePath: filePath,
        fullPath: `${fullFolderPath}/${filename}`,
        url: `${subFolder}/${filename}` // Return relative path for database storage (matches backend expectation)
      };
    } else {
      throw new Error('Electron API kh√¥ng kh·∫£ d·ª•ng');
    }
  } catch (error) {
    console.error('Save to user-defined folder failed:', error);
    throw error;
  }
}

// Helper function for direct folder storage upload
export async function uploadToLocalServer(imageBlob, filename) {
  try {
    console.log('üìÅ Uploading to direct folder storage...', { filename, size: imageBlob.size });

    // Create FormData
    const formData = new FormData();
    
    // Ensure file has proper format
    const file = new File([imageBlob], filename, {
      type: imageBlob.type || 'image/jpeg',
      lastModified: Date.now()
    });

    formData.append('image', file);
    formData.append('filename', filename);
    
    // Add storage path if available from localStorage
    const storagePath = localStorage.getItem('image_storage_path');
    if (storagePath && storagePath.trim() !== '') {
      // Check if the custom path contains the old Documents path - if so, don't use it
      if (storagePath.includes('Documents\\ParkingLotApp') || storagePath.includes('Documents/ParkingLotApp')) {
        console.warn('‚ö†Ô∏è Old storage path detected, using default instead:', storagePath);
        console.log('Using default storage path: C:/ParkingLot_Images/');
        // Don't add storage_path to formData - let backend use default
      } else {
        formData.append('storage_path', storagePath);
        console.log('Using custom storage path:', storagePath);
      }
    } else {
      console.log('No custom storage path set, using default: C:/ParkingLot_Images/');
    }

    // Log FormData for debugging
    console.log('Direct Folder Upload FormData:', {
      filename: filename,
      fileSize: file.size,
      fileType: file.type
    });

    // Upload to local backend using upload1.php (direct folder storage)
    const uploadUrl = url_api.replace('/index.php', '/upload1.php');
    
    const response = await fetch(uploadUrl, {
      method: 'POST',
      body: formData
      // Don't set Content-Type to let browser set multipart/form-data boundary
    });

    console.log('Direct Folder Upload Response Status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Direct Folder Upload Error:', errorText);
      throw new Error(`Upload failed: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    
    if (!result.success) {
      throw new Error(result.message || 'Upload failed');
    }

    return result;

  } catch (error) {
    console.error('Direct folder storage upload failed:', error);
    throw error;
  }
}

// COMMENTED OUT: MinIO upload functions
/*
// Helper function for MinIO upload with timeout
export async function uploadToMinIOWithTimeout(imageBlob, filename, timeoutMs) {
  return new Promise(async (resolve, reject) => {
    // Set timeout
    const timeoutId = setTimeout(() => {
      reject(new Error(`MinIO upload timeout after ${timeoutMs}ms`));
    }, timeoutMs);

    try {
      // Create FormData
      const formData = new FormData();
      
      // Ensure file has proper format
      const file = new File([imageBlob], filename, {
        type: imageBlob.type || 'image/jpeg',
        lastModified: Date.now()
      });

      formData.append('image', file);
      formData.append('filename', filename);

      // Log FormData for debugging
      console.log('MinIO Upload FormData:', {
        filename: filename,
        fileSize: file.size,
        fileType: file.type
      });

      // Upload to MinIO backend
      const uploadUrl = url_api.replace('/index.php', '/upload.php');
      
      const response = await fetch(uploadUrl, {
        method: 'POST',
        body: formData
        // Don't set Content-Type to let browser set multipart/form-data boundary
      });

      console.log('MinIO Upload Response Status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('MinIO Upload Error:', errorText);
        clearTimeout(timeoutId);
        reject(new Error(`Upload failed: ${response.status} - ${errorText}`));
        return;
      }

      const result = await response.json();
      clearTimeout(timeoutId);
      
      // Check if at least one server succeeded
      const successfulUploads = result.filter(r => r.status === 'success');
      if (successfulUploads.length === 0) {
        reject(new Error('All MinIO servers failed'));
        return;
      }

      resolve({
        success: true,
        filename: filename,
        results: result,
        urls: result.map(r => r.url).filter(url => url),
        primaryUrl: successfulUploads[0]?.url
      });

    } catch (error) {
      clearTimeout(timeoutId);
      reject(error);
    }
  });
}
*/

// COMMENTED OUT: Local storage fallback (no longer needed)
/*
// Helper function for local storage fallback
async function saveToLocalStorage(imageBlob, filename, prefix) {
  try {
    const folderName = prefix === 'license_plate' || prefix === 'license_plate_out' ? 'anhchup_bienso' : 'anhchup_khuonmat';
    const basePath = 'C:\\Users\\Chung\\Documents\\ParkingLotApp\\assets\\imgAnhChup';
    const fullFolderPath = `${basePath}\\${folderName}`;
    
    console.log(`üíæ Saving to local storage: ${fullFolderPath}\\${filename}`);

    // Check if running in Electron
    if (window.electronAPI && window.electronAPI.saveImage) {
      try {
        // Create directory if not exists
        if (window.electronAPI.createDirectory) {
          console.log(`Creating directory: ${fullFolderPath}`);
          await window.electronAPI.createDirectory(fullFolderPath);
          console.log(`Directory ensured: ${fullFolderPath}`);
        }

        const arrayBuffer = await imageBlob.arrayBuffer();
        const uint8Array = new Uint8Array(arrayBuffer);
        
        const saveData = {
          data: Array.from(uint8Array),
          fileName: filename,
          folder: `assets\\imgAnhChup\\${folderName}` // Relative path for Electron
        };
        
        const filePath = await window.electronAPI.saveImage(saveData);
        console.log(`Local storage save successful: ${filePath}`);
        
        return {
          success: true,
          filePath: filePath
        };
      } catch (electronError) {
        console.error('Electron save failed:', electronError);
        throw electronError;
      }
    } else {
      // Fallback for web version - auto download
      console.log('Web version - using auto download');
      
      // Try to create directory structure in browser (limited support)
      try {
        if ('showDirectoryPicker' in window) {
          // Modern browser with File System Access API
          console.log('Browser supports File System Access API');
        }
      } catch (fsError) {
        console.log('Using download fallback');
      }
      
      const url = URL.createObjectURL(imageBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.style.display = 'none';
      
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      return {
        success: true,
        filePath: `Downloads\\${filename}`
      };
    }
  } catch (error) {
    console.error('Local storage save failed:', error);
    throw error;
  }
}
*/

/**
 * Upload license plate image (entry)
 * @param {Blob|File} imageBlob - License plate image
 * @param {Object} options - Additional options
 * @param {string} options.sessionId - Session ID for database update
 * @param {string} options.filename - Custom filename to use
 * @returns {Promise<Object>} - Upload results
 */
export async function uploadLicensePlateImage(imageBlob, options = {}) {
  return uploadImageToLocal(imageBlob, 'license_plate_in', {
    ...options,
    updateType: 'plate_in'
  });
}

/**
 * Upload license plate image (exit)
 * @param {Blob|File} imageBlob - License plate image
 * @param {Object} options - Additional options
 * @param {string} options.sessionId - Session ID for database update
 * @param {string} options.filename - Custom filename to use
 * @returns {Promise<Object>} - Upload results
 */
export async function uploadLicensePlateOutImage(imageBlob, options = {}) {
  return uploadImageToLocal(imageBlob, 'license_plate_out', {
    ...options,
    updateType: 'plate_out'
  });
}

/**
 * Upload face/driver image
 * @param {Blob|File} imageBlob - Face/driver image
 * @param {Object} options - Additional options
 * @param {string} options.sessionId - Session ID for database update
 * @param {string} options.updateType - face_in or face_out
 * @param {string} options.filename - Custom filename to use
 * @returns {Promise<Object>} - Upload results
 */
export async function uploadFaceImage(imageBlob, options = {}) {
  // X√°c ƒë·ªãnh prefix d·ª±a tr√™n updateType
  const prefix = options.updateType === 'face_out' ? 'face_out' : 'face_in';
  
  return uploadImageToLocal(imageBlob, prefix, {
    ...options,
    updateType: options.updateType || 'face_in'
  });
}

/**
 * Get local image URL from filename using POST method
 * @param {string} filename - Image filename stored in database
 * @returns {Promise<string>} - Base64 data URL of the image
 */
export async function getImageUrl(filename) {
  if (!filename) {
    console.warn('üö´ getImageUrl: Empty filename provided');
    return '';
  }
  
  // If it's already a full URL, return as is
  if (filename.startsWith('http://') || filename.startsWith('https://') || filename.startsWith('data:')) {
    console.log(`üîó getImageUrl: Returning existing URL for ${filename}`);
    return filename;
  }
  
  try {
    // Extract date from filename timestamp like "2025-08-05T11-40-10-594Z"
    let year, month, day;
    const timestampMatch = filename.match(/(\d{4})-(\d{2})-(\d{2})T/);
    
    if (timestampMatch) {
      year = timestampMatch[1];
      month = timestampMatch[2];
      day = timestampMatch[3];
      console.log(`üìÖ getImageUrl: Extracted date from ${filename} -> ${year}-${month}-${day}`);
    } else {
      // Fallback to current date if can't extract from filename
      year = new Date().getFullYear();
      month = String(new Date().getMonth() + 1).padStart(2, '0');
      day = String(new Date().getDate()).padStart(2, '0');
      console.warn(`‚ö†Ô∏è getImageUrl: Could not extract date from ${filename}, using current date: ${year}-${month}-${day}`);
    }
    
    console.log(`üîç getImageUrl: Looking for image: ${filename} on date ${year}-${month}-${day}`);
    
    const baseUrl = url_api.replace('/index.php', '');
    const apiUrl = `${baseUrl}/getImage.php`;
    
    console.log(`üåê getImageUrl: Making request to ${apiUrl}`);
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        year: year,
        month: month,
        day: day,
        file: filename
      })
    });
    
    console.log(`üì° getImageUrl: Response status ${response.status} for ${filename}`);
    
    if (response.ok) {
      const result = await response.json();
      if (result.base64) {
        console.log(`‚úÖ getImageUrl: Successfully loaded image: ${filename} (${result.base64.length} chars)`);
        return result.base64; // Return base64 data URL
      } else {
        console.warn(`‚ùå getImageUrl: No base64 data in response for ${filename}:`, result);
      }
    } else {
      const errorText = await response.text();
      console.warn(`‚ùå getImageUrl: Failed to load image: ${filename}, status: ${response.status}, error: ${errorText}`);
    }
    
    return ''; // Return empty string on failure
  } catch (error) {
    console.error(`üí• getImageUrl: Error loading image ${filename}:`, error);
    return '';
  }
}

/**
 * Get backup URLs - for local storage, return empty array since we only have one endpoint
 * FallbackImage will rely on getImageUrl as primary source
 * @param {string} filename - Image filename stored in database
 * @returns {Array<string>} - Array of direct URLs (empty for local storage)
 */
export function getBackupImageUrls(filename) {
  if (!filename) return [];
  
  // For local storage with single endpoint, return empty array
  // FallbackImage will use getImageUrl() as primary source
  console.log(`getBackupImageUrls called for ${filename} - using primary getImageUrl only`);
  return [];
}

// COMMENTED OUT: MinIO URL functions
/*
/**
 * Get full MinIO image URL from filename
 * @param {string} filename - Image filename stored in database
 * @returns {string} - Full MinIO URL (primary server)
 */
/*
export function getImageUrl(filename) {
  if (!filename) return '';
  
  // If it's already a full URL, return as is
  if (filename.startsWith('http://') || filename.startsWith('https://')) {
    return filename;
  }
  
  // Construct MinIO URL from filename - s·ª≠ d·ª•ng server ƒë·∫ßu ti√™n l√†m primary
  return `http://192.168.1.19:9000/parking-lot-images/${filename}`;
}
*/

/*
/**
 * Get backup MinIO URLs from filename for redundancy
 * Th·ª© t·ª± ∆∞u ti√™n: 192.168.1.19, 192.168.1.90, 192.168.1.94
 * @param {string} filename - Image filename stored in database
 * @returns {Array<string>} - Array of all MinIO URLs in priority order
 */
/*
export function getBackupImageUrls(filename) {
  if (!filename) return [];
  
  // If it's already a full URL, extract filename and generate all URLs
  if (filename.startsWith('http://') || filename.startsWith('https://')) {
    const urlParts = filename.split('/');
    const extractedFilename = urlParts[urlParts.length - 1];
    
    // T·∫°o URLs cho t·∫•t c·∫£ servers, ∆∞u ti√™n server hi·ªán t·∫°i
    const currentServer = filename.match(/\/\/([\d\.:]+)/)?.[1];
    const allServers = ['192.168.1.19:9000', '192.168.1.90:9000', '192.168.1.94:9000'];
    
    // ƒê∆∞a server hi·ªán t·∫°i l√™n ƒë·∫ßu
    const orderedServers = currentServer 
      ? [currentServer, ...allServers.filter(s => s !== currentServer)]
      : allServers;
      
    return orderedServers.map(server => `http://${server}/parking-lot-images/${extractedFilename}`);
  }
  
  // Construct URLs for all MinIO servers in priority order
  const servers = ['192.168.1.19:9000', '192.168.1.90:9000', '192.168.1.94:9000'];
  return servers.map(server => `http://${server}/parking-lot-images/${filename}`);
}
*/

/**
 * Check if image URL is accessible (simplified for local storage)
 * @param {string} url - Image URL to check
 * @returns {Promise<boolean>} - True if accessible
 */
export async function checkImageUrl(url) {
  if (!url) return false;
  
  try {
    // For local server, try a simple fetch to check if file exists
    const response = await fetch(url, { method: 'HEAD' });
    return response.ok;
  } catch (error) {
    console.warn('Error checking image URL:', error);
    return false;
  }
}

/**
 * Get working image URL from filename (simplified for local storage)
 * @param {string} filename - Image filename stored in database
 * @returns {Promise<string>} - Working URL or empty string
 */
export async function getWorkingImageUrl(filename) {
  const url = getImageUrl(filename);
  
  console.log(`Checking local image URL: ${url}`);
  const isWorking = await checkImageUrl(url);
  
  if (isWorking) {
    console.log(`Local image URL working: ${url}`);
    return url;
  } else {
    console.warn(`Local image URL not working: ${url}`);
    return '';
  }
}

/**
 * Get file extension from blob/file
 * @param {Blob|File} file - File object
 * @returns {string} - File extension
 */
function getFileExtension(file) {
  if (file.name) {
    const extension = file.name.split('.').pop();
    if (extension && extension !== file.name) {
      return extension.toLowerCase();
    }
  }
  
  // Fallback based on MIME type
  if (file.type) {
    if (file.type.includes('jpeg') || file.type.includes('jpg')) {
      return 'jpg';
    } else if (file.type.includes('png')) {
      return 'png';
    }
  }
  
  // Default fallback
  return 'jpg';
}

/**
 * Utility function to generate parking lot image filename
 * @param {string} prefix - Image type prefix
 * @param {string} extension - File extension
 * @returns {string} - Generated filename
 */
export function generateParkingImageFilename(prefix = 'image', extension = 'jpg') {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').replace('T', 'T').slice(0, -1) + 'Z';
  return `${prefix}_${timestamp}.${extension}`;
}

// -------------------- Card History Management Functions --------------------
/**
 * L·∫•y nh·∫≠t k√Ω theo th·∫ª t·ª´ b·∫£ng pm_nc0010
 * @param {string} maThe - M√£ th·∫ª RFID
 * @param {string} ngay - Ng√†y theo ƒë·ªãnh d·∫°ng dd-mm-yyyy, ho·∫∑c "all" cho t·∫•t c·∫£
 * @returns {Promise<Object>} Nh·∫≠t k√Ω phi√™n g·ª≠i xe
 */
export async function layNhatKyTheoThe(maThe, ngay = "all") {
  const payload = {
    table: "pm_nc0010",
    func: "layNhatKyTheoThe",
    maThe: maThe,
    ngay: ngay,
  };
  return callApiWithAuth(payload);
}

// -------------------- Vehicle Search Functions --------------------
/**
 * T√¨m phi√™n g·ª≠i xe theo bi·ªÉn s·ªë
 * @param {string} bienSo - Bi·ªÉn s·ªë xe
 * @returns {Promise<Array>} Danh s√°ch phi√™n g·ª≠i xe
 */
export async function timPhienTheoBienSo(bienSo) {
  const payload = {
    table: "pm_nc0009",
    func: "timPhienTheoBienSo",
    bienSo: bienSo,
  };
  return callApiWithAuth(payload);
}

// -------------------- Extended Parking Session Functions --------------------
/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i phi√™n g·ª≠i xe th√†nh "ƒêANG G·ª¨I"
 * @param {string} maPhien - M√£ phi√™n g·ª≠i xe
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatTrangThaiDangGui(maPhien) {
  const payload = {
    table: "pm_nc0009",
    func: "edit_TrangThai",
    maPhien: maPhien,
  };
  return callApiWithAuth(payload);
}

// -------------------- Gate Management Functions --------------------
/**
 * Th√™m c·ªïng m·ªõi
 * @param {Object} cong - Th√¥ng tin c·ªïng
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m c·ªïng
 */
export async function themCong(cong) {
  const payload = {
    table: "pm_nc0007",
    func: "add",
    maCong: cong.maCong,
    tenCong: cong.tenCong,
    loaiCong: cong.loaiCong,
    viTriLapDat: cong.viTriLapDat,
    maKhuVuc: cong.maKhuVuc,
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t th√¥ng tin c·ªïng
 * @param {Object} cong - Th√¥ng tin c·ªïng
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatCong(cong) {
  const payload = {
    table: "pm_nc0007",
    func: "edit",
    maCong: cong.maCong,
    tenCong: cong.tenCong,
    loaiCong: cong.loaiCong,
    viTriLapDat: cong.viTriLapDat,
    maKhuVuc: cong.maKhuVuc,
  };
  return callApiWithAuth(payload);
}

/**
 * X√≥a c·ªïng
 * @param {string} maCong - M√£ c·ªïng
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
 */
export async function xoaCong(maCong) {
  const payload = {
    table: "pm_nc0007",
    func: "delete",
    maCong: maCong,
  };
  return callApiWithAuth(payload);
}

// -------------------- Extended Camera Functions --------------------
/**
 * C·∫≠p nh·∫≠t URL RTSP c·ªßa camera
 * @param {string} maCamera - M√£ camera
 * @param {string} rtspUrl - URL RTSP m·ªõi
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatRTSPCamera(maCamera, rtspUrl) {
  const payload = {
    table: "pm_nc0006_2",
    func: "updateUrl",
    id: maCamera,
    data: { rtsp_url: rtspUrl },
  };
  return callApiWithAuth(payload);
}

// -------------------- Extended Zone Functions --------------------
/**
 * L·∫•y th√¥ng tin khu v·ª±c theo m√£
 * @param {string} maKhuVuc - M√£ khu v·ª±c
 * @returns {Promise<Object>} Th√¥ng tin khu v·ª±c
 */
export async function layKhuVucTheoMa(maKhuVuc) {
  const payload = {
    table: "pm_nc0004_2",
    func: "getById",
    maKhuVuc: maKhuVuc,
  };
  return callApiWithAuth(payload);
}

// -------------------- Parking Spot Management Functions --------------------
/**
 * L·∫•y danh s√°ch ch·ªó ƒë·ªó xe
 * @returns {Promise<Array>} Danh s√°ch ch·ªó ƒë·ªó xe
 */
export async function layDanhSachChoDo() {
  const payload = { table: "pm_nc0005", func: "data" };
  return callApiWithAuth(payload);
}

/**
 * Th√™m ch·ªó ƒë·ªó xe m·ªõi
 * @param {Object} choDo - Th√¥ng tin ch·ªó ƒë·ªó xe
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m ch·ªó ƒë·ªó xe
 */
export async function themChoDo(choDo) {
  const payload = {
    table: "pm_nc0005",
    func: "add",
    maChoDo: choDo.maChoDo,
    maKhuVuc: choDo.maKhuVuc,
    trangThai: choDo.trangThai || "TRONG",
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t th√¥ng tin ch·ªó ƒë·ªó xe
 * @param {Object} choDo - Th√¥ng tin ch·ªó ƒë·ªó xe
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatChoDo(choDo) {
  const payload = {
    table: "pm_nc0005",
    func: "edit",
    maChoDo: choDo.maChoDo,
    maKhuVuc: choDo.maKhuVuc,
    trangThai: choDo.trangThai,
  };
  return callApiWithAuth(payload);
}

/**
 * X√≥a ch·ªó ƒë·ªó xe
 * @param {string} maChoDo - M√£ ch·ªó ƒë·ªó xe
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
 */
export async function xoaChoDo(maChoDo) {
  const payload = {
    table: "pm_nc0005",
    func: "delete",
    maChoDo: maChoDo,
  };
  return callApiWithAuth(payload);
}

/**
 * L·∫•y danh s√°ch ch·ªó ƒë·ªó xe theo khu v·ª±c
 * @param {string} maKhuVuc - M√£ khu v·ª±c
 * @returns {Promise<Array>} Danh s√°ch ch·ªó ƒë·ªó xe trong khu v·ª±c
 */
export async function layChoDauXeTheoKhu(maKhuVuc) {
  const payload = {
    table: "pm_nc0005",
    func: "loadChoDauXeTheoKhu",
    maKhuVuc: maKhuVuc,
  };
  return callApiWithAuth(payload);
}

/**
 * ƒê·ªìng b·ªô h√≥a tr·∫°ng th√°i ch·ªó ƒë·ªó xe
 * @returns {Promise<Object>} K·∫øt qu·∫£ ƒë·ªìng b·ªô
 */
export async function dongBoTrangThaiChoDo() {
  const payload = {
    table: "pm_nc0005",
    func: "sync_data",
  };
  return callApiWithAuth(payload);
}

/**
 * Thay ƒë·ªïi tr·∫°ng th√°i ch·ªó ƒë·ªó
 * @param {string} maChoDo - M√£ ch·ªó ƒë·ªó
 * @param {string} trangThai - Tr·∫°ng th√°i m·ªõi (0/1)
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
// export async function capNhatTrangThaiChoDo(maChoDo, trangThai) {
//   const payload = {
//     table: "pm_nc0005",
//     func: "chinhSuaTrangThai",
//     maChoDo: maChoDo,
//     trangThai: trangThai,
//   };
//   return callApiWithAuth(payload);
// }

// -------------------- Vehicle Management Functions --------------------
/**
 * L·∫•y danh s√°ch ph∆∞∆°ng ti·ªán
 * @returns {Promise<Array>} Danh s√°ch ph∆∞∆°ng ti·ªán
 */
export async function layDanhSachPhuongTien() {
  const payload = { table: "pm_nc0002", func: "data" };
  return callApiWithAuth(payload);
}

/**
 * Th√™m ph∆∞∆°ng ti·ªán m·ªõi
 * @param {Object} phuongTien - Th√¥ng tin ph∆∞∆°ng ti·ªán
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m ph∆∞∆°ng ti·ªán
 */
export async function themPhuongTien(phuongTien) {
  const payload = {
    table: "pm_nc0002",
    func: "add",
    bienSo: phuongTien.bienSo,
    maLoaiPT: phuongTien.maLoaiPT,
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t th√¥ng tin ph∆∞∆°ng ti·ªán
 * @param {Object} phuongTien - Th√¥ng tin ph∆∞∆°ng ti·ªán
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatPhuongTien(phuongTien) {
  const payload = {
    table: "pm_nc0002",
    func: "edit",
    bienSo: phuongTien.bienSo,
    maLoaiPT: phuongTien.maLoaiPT,
  };
  return callApiWithAuth(payload);
}

/**
 * X√≥a ph∆∞∆°ng ti·ªán
 * @param {string} bienSo - Bi·ªÉn s·ªë xe
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
 */
export async function xoaPhuongTien(bienSo) {
  const payload = {
    table: "pm_nc0002",
    func: "delete",
    bienSo: bienSo,
  };
  return callApiWithAuth(payload);
}

// -------------------- Enhanced Pricing Policy Functions --------------------
/**
 * L·∫•y danh s√°ch ch√≠nh s√°ch gi√° theo table pm_nc0008 t·ª´ ngocchung.php
 * @returns {Promise<Array>} Danh s√°ch ch√≠nh s√°ch gi√°
 */
export async function layDanhSachChinhSachGia() {
  const payload = { table: "pm_nc0008", func: "data" };
  return callApiWithAuth(payload);
}

/**
 * Th√™m ch√≠nh s√°ch gi√° m·ªõi (t·ª´ kebao.php)
 * @param {Object} chinhSach - Th√¥ng tin ch√≠nh s√°ch gi√°
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m ch√≠nh s√°ch
 */
export async function themChinhSachGiaKebao(chinhSach) {
  const payload = {
    table: "pm_nc0008",
    func: "add",
    maChinhSach: chinhSach.maChinhSach,
    maLoaiPT: chinhSach.maLoaiPT,
    thoiGian: chinhSach.thoiGian,
    donGia: chinhSach.donGia,
    quaGio: chinhSach.quaGio,
    donGiaQuaGio: chinhSach.donGiaQuaGio,
    loaiChinhSach: chinhSach.loaiChinhSach,
    tongNgay: chinhSach.tongNgay,
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t ch√≠nh s√°ch gi√° (t·ª´ kebao.php)
 * @param {Object} chinhSach - Th√¥ng tin ch√≠nh s√°ch gi√°
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatChinhSachGiaKebao(chinhSach) {
  const payload = {
    table: "pm_nc0008",
    func: "edit",
    maChinhSach: chinhSach.maChinhSach,
    maLoaiPT: chinhSach.maLoaiPT,
    thoiGian: chinhSach.thoiGian,
    donGia: chinhSach.donGia,
    quaGio: chinhSach.quaGio,
    donGiaQuaGio: chinhSach.donGiaQuaGio,
    loaiChinhSach: chinhSach.loaiChinhSach,
    tongNgay: chinhSach.tongNgay,
  };
  return callApiWithAuth(payload);
}

/**
 * X√≥a ch√≠nh s√°ch gi√° (t·ª´ kebao.php)
 * @param {string} maChinhSach - M√£ ch√≠nh s√°ch gi√°
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
 */
export async function xoaChinhSachGiaKebao(maChinhSach) {
  const payload = {
    table: "pm_nc0008",
    func: "delete",
    maChinhSach: maChinhSach,
  };
  return callApiWithAuth(payload);
}

// -------------------- Camera Management Functions (kebao.php) --------------------
/**
 * L·∫•y danh s√°ch camera t·ª´ kebao.php
 * @returns {Promise<Array>} Danh s√°ch camera
 */
export async function layDanhSachCameraKebao() {
  const payload = { table: "pm_nc0006_1", func: "data" };
  return callApiWithAuth(payload);
}

/**
 * Th√™m camera m·ªõi (t·ª´ kebao.php)
 * @param {Object} camera - Th√¥ng tin camera
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m camera
 */
export async function themCameraKebao(camera) {
  const payload = {
    table: "pm_nc0006_1",
    func: "add",
    maCamera: camera.maCamera,
    tenCamera: camera.tenCamera,
    loaiCamera: camera.loaiCamera,
    chucNangCamera: camera.chucNangCamera,
    maKhuVuc: camera.maKhuVuc,
    linkRTSP: camera.linkRTSP,
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t camera (t·ª´ kebao.php)
 * @param {Object} camera - Th√¥ng tin camera
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatCameraKebao(camera) {
  const payload = {
    table: "pm_nc0006_1",
    func: "edit",
    maCamera: camera.maCamera,
    tenCamera: camera.tenCamera,
    loaiCamera: camera.loaiCamera,
    chucNangCamera: camera.chucNangCamera,
    maKhuVuc: camera.maKhuVuc,
    linkRTSP: camera.linkRTSP,
  };
  return callApiWithAuth(payload);
}

/**
 * X√≥a camera (t·ª´ kebao.php)
 * @param {string} maCamera - M√£ camera
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
 */
export async function xoaCameraKebao(maCamera) {
  const payload = {
    table: "pm_nc0006_1",
    func: "delete",
    maCamera: maCamera,
  };
  return callApiWithAuth(payload);
}

// -------------------- Gate Management Functions (kebao.php) --------------------
/**
 * L·∫•y danh s√°ch c·ªïng t·ª´ kebao.php (pm_nc0007)
 * @returns {Promise<Array>} Danh s√°ch c·ªïng
 */
export async function layDanhSachCongKebao() {
  const payload = { table: "pm_nc0007", func: "data" };
  return callApiWithAuth(payload);
}

/**
 * Th√™m c·ªïng m·ªõi (t·ª´ kebao.php)
 * @param {Object} cong - Th√¥ng tin c·ªïng
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m c·ªïng
 */
export async function themCongKebao(cong) {
  const payload = {
    table: "pm_nc0007",
    func: "add",
    maCong: cong.maCong,
    tenCong: cong.tenCong,
    loaiCong: cong.loaiCong,
    viTriLapDat: cong.viTriLapDat,
    maKhuVuc: cong.maKhuVuc,
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t c·ªïng (t·ª´ kebao.php)
 * @param {Object} cong - Th√¥ng tin c·ªïng
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatCongKebao(cong) {
  const payload = {
    table: "pm_nc0007",
    func: "edit",
    maCong: cong.maCong,
    tenCong: cong.tenCong,
    loaiCong: cong.loaiCong,
    viTriLapDat: cong.viTriLapDat,
    maKhuVuc: cong.maKhuVuc,
  };
  return callApiWithAuth(payload);
}

/**
 * X√≥a c·ªïng (t·ª´ kebao.php)
 * @param {string} maCong - M√£ c·ªïng
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
 */
export async function xoaCongKebao(maCong) {
  const payload = {
    table: "pm_nc0007",
    func: "delete",
    maCong: maCong,
  };
  return callApiWithAuth(payload);
}

// -------------------- Parking Session Functions (kebao.php) --------------------
/**
 * L·∫•y phi√™n g·ª≠i xe theo UID th·∫ª (t·ª´ kebao.php)
 * @param {string} uidThe - UID th·∫ª RFID
 * @returns {Promise<Array>} Danh s√°ch phi√™n g·ª≠i xe
 */
export async function layPhienGuiXeTheoUIDKebao(uidThe) {
  const payload = {
    table: "pm_nc0009",
    func: "layPhienGuiXeTuUID",
    uidThe: uidThe,
  };
  return callApiWithAuth(payload);
}

/**
 * L·∫•y phi√™n g·ª≠i xe ƒë√£ ra theo UID th·∫ª (t·ª´ kebao.php)
 * @param {string} uidThe - UID th·∫ª RFID
 * @returns {Promise<Array>} Danh s√°ch phi√™n g·ª≠i xe ƒë√£ ho√†n th√†nh
 */
export async function layPhienGuiXeDaRaTheoUIDKebao(uidThe) {
  const payload = {
    table: "pm_nc0009",
    func: "layPhienGuiXeTuUID_Da_Ra",
    uidThe: uidThe,
  };
  return callApiWithAuth(payload);
}

/**
 * T√¨m phi√™n g·ª≠i xe theo bi·ªÉn s·ªë (t·ª´ kebao.php)
 * @param {string} bienSo - Bi·ªÉn s·ªë xe
 * @returns {Promise<Array>} Danh s√°ch phi√™n g·ª≠i xe
 */
export async function timPhienTheoBS(bienSo) {
  const payload = {
    table: "pm_nc0009",
    func: "timPhienTheoBienSo",
    bienSo: bienSo,
  };
  return callApiWithAuth(payload);
}

/**
 * T·∫°o b·∫£ng cho phi√™n l√†m vi·ªác (t·ª´ kebao.php)
 * @returns {Promise<Object>} K·∫øt qu·∫£ t·∫°o b·∫£ng
 */
export async function taoBangChoPhienLamViecKebao() {
  const payload = {
    table: "pm_nc0009",
    func: "taoBangChoPhienLamViec",
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i phi√™n g·ª≠i xe (t·ª´ kebao.php)
 * @param {string} maPhien - M√£ phi√™n g·ª≠i xe
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatTrangThaiPhienKebao(maPhien) {
  const payload = {
    table: "pm_nc0009",
    func: "edit_TrangThai",
    maPhien: maPhien,
  };
  return callApiWithAuth(payload);
}

// -------------------- Zone Management Functions (ngocchung.php) --------------------
/**
 * L·∫•y khu v·ª±c theo ID (t·ª´ ngocchung.php)
 * @param {string} maKhuVuc - M√£ khu v·ª±c
 * @returns {Promise<Object>} Th√¥ng tin khu v·ª±c
 */
export async function layKhuVucTheoID(maKhuVuc) {
  const payload = {
    table: "pm_nc0004_2",
    func: "getById",
    maKhuVuc: maKhuVuc,
  };
  return callApiWithAuth(payload);
}

/**
 * Th√™m khu v·ª±c m·ªõi (t·ª´ ngocchung.php)
 * @param {Object} khuVuc - Th√¥ng tin khu v·ª±c
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m khu v·ª±c
 */
export async function themKhuVucNgocChung(khuVuc) {
  const payload = {
    table: "pm_nc0004_2",
    func: "add",
    maKhuVuc: khuVuc.maKhuVuc,
    tenKhuVuc: khuVuc.tenKhuVuc,
    moTa: khuVuc.moTa,
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t khu v·ª±c (t·ª´ ngocchung.php)
 * @param {Object} khuVuc - Th√¥ng tin khu v·ª±c
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatKhuVucNgocChung(khuVuc) {
  const payload = {
    table: "pm_nc0004_2",
    func: "edit",
    maKhuVuc: khuVuc.maKhuVuc,
    tenKhuVuc: khuVuc.tenKhuVuc,
    moTa: khuVuc.moTa,
  };
  return callApiWithAuth(payload);
}

/**
 * X√≥a khu v·ª±c (t·ª´ ngocchung.php)
 * @param {string} maKhuVuc - M√£ khu v·ª±c
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
 */
export async function xoaKhuVucNgocChung(maKhuVuc) {
  const payload = {
    table: "pm_nc0004_2",
    func: "delete",
    maKhuVuc: maKhuVuc,
  };
  return callApiWithAuth(payload);
}

// -------------------- Camera URL Update Functions (ngocchung.php) --------------------
/**
 * C·∫≠p nh·∫≠t URL RTSP c·ªßa camera (t·ª´ ngocchung.php)
 * @param {string} id - ID camera
 * @param {string} rtspUrl - URL RTSP m·ªõi
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatURLCamera(id, rtspUrl) {
  const payload = {
    table: "pm_nc0006_2",
    func: "updateUrl",
    id: id,
    data: { rtsp_url: rtspUrl },
  };
  return callApiWithAuth(payload);
}

// -------------------- Pricing Policy Functions (ngocchung.php) --------------------
/**
 * L·∫•y t·∫•t c·∫£ ch√≠nh s√°ch gi√° (t·ª´ ngocchung.php)
 * @returns {Promise<Array>} Danh s√°ch ch√≠nh s√°ch gi√°
 */
export async function layTatCaChinhSachGiaNgocChung() {
  const payload = {
    table: "pm_nc0008",
    func: "getAllPolicies",
  };
  return callApiWithAuth(payload);
}

/**
 * T·∫°o ch√≠nh s√°ch gi√° m·ªõi (t·ª´ ngocchung.php)
 * @param {Object} policy - Th√¥ng tin ch√≠nh s√°ch gi√°
 * @returns {Promise<Object>} K·∫øt qu·∫£ t·∫°o ch√≠nh s√°ch
 */
export async function taoChinhSachGiaNgocChung(policy) {
  const payload = {
    table: "pm_nc0008",
    func: "createPolicy",
    ...policy,
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t ch√≠nh s√°ch gi√° (t·ª´ ngocchung.php)
 * @param {Object} policy - Th√¥ng tin ch√≠nh s√°ch gi√°
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatChinhSachGiaNgocChung(policy) {
  const payload = {
    table: "pm_nc0008",
    func: "updatePolicy",
    ...policy,
  };
  return callApiWithAuth(payload);
}

/**
 * X√≥a ch√≠nh s√°ch gi√° (t·ª´ ngocchung.php)
 * @param {string} policyId - ID ch√≠nh s√°ch gi√°
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
 */
export async function xoaChinhSachGiaNgocChung(policyId) {
  const payload = {
    table: "pm_nc0008",
    func: "deletePolicy",
    policyId: policyId,
  };
  return callApiWithAuth(payload);
}

/**
 * T√≠nh ph√≠ g·ª≠i xe (t·ª´ ngocchung.php)
 * @param {Object} data - D·ªØ li·ªáu t√≠nh ph√≠
 * @returns {Promise<Object>} K·∫øt qu·∫£ t√≠nh ph√≠
 */
export async function tinhPhiGuiXeNgocChung(data) {
  const payload = {
    table: "pm_nc0008",
    func: "tinhPhiGuiXe",
    ...data,
  };
  return callApiWithAuth(payload);
}

/**
 * L·∫•y ch√≠nh s√°ch t·ª´ ph∆∞∆°ng ti·ªán (t·ª´ ngocchung.php)
 * @param {string} maLoaiPT - M√£ lo·∫°i ph∆∞∆°ng ti·ªán
 * @returns {Promise<Object>} Ch√≠nh s√°ch gi√°
 */
export async function layChinhSachTuPTNgocChung(maLoaiPT) {
  const payload = {
    table: "pm_nc0008",
    func: "layChinhSachTuPT",
    maLoaiPT: maLoaiPT,
  };
  return callApiWithAuth(payload);
}

// -------------------- History Functions (ngocchung.php) --------------------
/**
 * L·∫•y nh·∫≠t k√Ω theo th·∫ª (t·ª´ ngocchung.php)
 * @param {string} uidThe - UID th·∫ª RFID
 * @returns {Promise<Array>} Nh·∫≠t k√Ω th·∫ª
 */
export async function layNhatKyTheoTheNgocChung(uidThe) {
  const payload = {
    table: "pm_nc0010",
    func: "layNhatKyTheoThe",
    uidThe: uidThe,
  };
  return callApiWithAuth(payload);
}

// -------------------- Enhanced RFID Card Functions (t·ª´ mobile app) --------------------

/**
 * Th√™m th·∫ª RFID v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin (theo mobile app)
 * @param {string} uidThe - UID th·∫ª RFID
 * @param {string} loaiThe - Lo·∫°i th·∫ª (KHACH, VIP, NHANVIEN)
 * @param {string} trangThai - Tr·∫°ng th√°i th·∫ª (m·∫∑c ƒë·ªãnh: "1")
 * @param {string} bienSoXe - Bi·ªÉn s·ªë xe (optional)
 * @param {string} maChinhSach - M√£ ch√≠nh s√°ch (optional)
 * @param {string} ngayKetThucCS - Ng√†y k·∫øt th√∫c ch√≠nh s√°ch (optional)
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m th·∫ª
 */
export async function themTheMobile(
  uidThe,
  loaiThe,
  trangThai = "1",
  bienSoXe = "",
  maChinhSach = "",
  ngayKetThucCS = ""
) {
  const payload = {
    table: "pm_nc0003",
    func: "add",
    uidThe: uidThe,
    loaiThe: loaiThe,
    trangThai: trangThai,
    bienSoXe: bienSoXe,
    maChinhSach: maChinhSach,
    ngayKetThucCS: ngayKetThucCS,
  };
  return callApiWithAuth(payload);
}

/**
 * L·∫•y th√¥ng tin th·∫ª RFID theo UID (theo mobile app)
 * @param {string} uidThe - UID th·∫ª RFID
 * @returns {Promise<Array>} Th√¥ng tin th·∫ª
 */
export async function layTheRFIDTheoUID(uidThe) {
  const payload = {
    table: "pm_nc0003",
    func: "timTheTuUID",
    uidThe: uidThe,
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t th·∫ª RFID theo mobile app
 * @param {Object} theRFID - Th√¥ng tin th·∫ª RFID
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatTheRFIDMobile(theRFID) {
  const payload = {
    table: "pm_nc0003",
    func: "edit",
    uidThe: theRFID.uidThe,
    loaiThe: theRFID.loaiThe,
    trangThai: theRFID.trangThai,
    bienSoXe: theRFID.bienSoXe || "",
    maChinhSach: theRFID.maChinhSach || "",
    ngayKetThucCS: theRFID.ngayKetThucCS || "",
    // ngayPhatHanh s·∫Ω ƒë∆∞·ª£c gi·ªØ nguy√™n ·ªü backend
  };
  return callApiWithAuth(payload);
}

/**
 * L·∫•y t·∫•t c·∫£ th·∫ª RFID (theo mobile app)
 * @returns {Promise<Array>} Danh s√°ch th·∫ª RFID
 */
export async function layTatCaTheRFID() {
  return layDanhSachThe(); // S·ª≠ d·ª•ng function c√≥ s·∫µn
}

/**
 * L·∫•y th√¥ng tin th·∫ª ƒëang c√≥ xe g·ª≠i (theo mobile app)
 * @param {string} uidThe - UID th·∫ª RFID
 * @returns {Promise<Array>} Th√¥ng tin th·∫ª v√† phi√™n g·ª≠i xe
 */
export async function thongTinTheDangCoXeGui(uidThe) {
  return timTheDangCoPhien(uidThe); // S·ª≠ d·ª•ng function c√≥ s·∫µn
}

// -------------------- Enhanced Pricing Policy Functions (Mobile App Standard) --------------------
/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ ch√≠nh s√°ch gi√° (theo chu·∫©n mobile app)
 * @returns {Promise<Array>} Danh s√°ch ch√≠nh s√°ch gi√°
 */
export async function layAllChinhSach() {
  const payload = { table: "pm_nc0008", func: "data" };
  return callApiWithAuth(payload);
}

/**
 * Th√™m ch√≠nh s√°ch gi√° m·ªõi (theo chu·∫©n mobile app)
 * @param {Object} chinhSach - Th√¥ng tin ch√≠nh s√°ch gi√°
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m ch√≠nh s√°ch
 */
export async function themChinhSach(chinhSach) {
  const payload = {
    table: "pm_nc0008",
    func: "add",
    maChinhSach: chinhSach.maChinhSach,
    maLoaiPT: chinhSach.maLoaiPT,
    thoiGian: chinhSach.thoiGian,
    donGia: chinhSach.donGia,
    quaGio: chinhSach.quaGio || 0,
    donGiaQuaGio: chinhSach.donGiaQuaGio || 0,
    loaiChinhSach: chinhSach.loaiChinhSach || "",
    tongNgay: chinhSach.tongNgay || 0,
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t ch√≠nh s√°ch gi√° (theo chu·∫©n mobile app)
 * @param {Object} chinhSach - Th√¥ng tin ch√≠nh s√°ch gi√°
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function suaChinhSach(chinhSach) {
  const payload = {
    table: "pm_nc0008",
    func: "edit",
    maChinhSach: chinhSach.maChinhSach,
    maLoaiPT: chinhSach.maLoaiPT,
    thoiGian: chinhSach.thoiGian,
    donGia: chinhSach.donGia,
    quaGio: chinhSach.quaGio || 0,
    donGiaQuaGio: chinhSach.donGiaQuaGio || 0,
    loaiChinhSach: chinhSach.loaiChinhSach || "",
    tongNgay: chinhSach.tongNgay || 0,
  };
  return callApiWithAuth(payload);
}

/**
 * X√≥a ch√≠nh s√°ch gi√° (theo chu·∫©n mobile app)
 * @param {string} maChinhSach - M√£ ch√≠nh s√°ch gi√°
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
 */
export async function xoaChinhSach(maChinhSach) {
  const payload = {
    table: "pm_nc0008",
    func: "delete",
    maChinhSach: maChinhSach,
  };
  return callApiWithAuth(payload);
}

// /**
//  * T√≠nh to√°n ng√†y k·∫øt th√∫c ch√≠nh s√°ch VIP
//  * @param {string} startDate - Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)
//  * @param {number} tongNgay - T·ªïng s·ªë ng√†y
//  * @returns {string} Ng√†y k·∫øt th√∫c (YYYY-MM-DD)
//  */
// export function tinhNgayKetThucChinhSach(startDate, tongNgay) {
//   if (!startDate || !tongNgay || tongNgay <= 0) {
//     return "";
//   }

//   const start = new Date(startDate);
//   if (isNaN(start.getTime())) {
//     return "";
//   }

//   const endDate = new Date(start);
//   endDate.setDate(start.getDate() + tongNgay - 1); // -1 v√¨ bao g·ªìm ng√†y b·∫Øt ƒë·∫ßu

//   return endDate.toISOString().split("T")[0]; // Format YYYY-MM-DD
// }

/**
 * T·∫°o m√£ ch√≠nh s√°ch t·ª± ƒë·ªông theo c·∫•u h√¨nh
 * @param {string} maLoaiPT - M√£ lo·∫°i ph∆∞∆°ng ti·ªán
 * @param {string} loaiChinhSach - Lo·∫°i ch√≠nh s√°ch (NGAY, THANG, NAM)
 * @param {number} soLuong - S·ªë l∆∞·ª£ng (1 ng√†y, 3 th√°ng, 1 nƒÉm)
 * @returns {string} M√£ ch√≠nh s√°ch t·ª± ƒë·ªông
 */
export function taoMaChinhSachTuDong(maLoaiPT, loaiChinhSach, soLuong) {
  if (!maLoaiPT || !loaiChinhSach || !soLuong) {
    return "";
  }

  // ƒê·ªìng b·ªô v·ªõi mobile app - s·ª≠ d·ª•ng policyType value tr·ª±c ti·∫øp
  const typeCode =
    {
      N: "N", // Ng√†y
      T: "T", // Tu·∫ßn
      Th: "Th", // Th√°ng
      NAM: "NAM", // NƒÉm
    }[loaiChinhSach] || "N";

  const vehicleCode = maLoaiPT.toUpperCase().replace(/\s/g, "_");
  return `CS_${vehicleCode}_${soLuong}${typeCode}`;
}

/**
 * T√≠nh t·ªïng s·ªë ng√†y t·ª´ lo·∫°i ch√≠nh s√°ch v√† s·ªë l∆∞·ª£ng
 * @param {string} loaiChinhSach - Lo·∫°i ch√≠nh s√°ch (NGAY, THANG, NAM)
 * @param {number} soLuong - S·ªë l∆∞·ª£ng
 * @returns {number} T·ªïng s·ªë ng√†y
 */
export function tinhTongNgay(loaiChinhSach, soLuong) {
  // ƒê·ªìng b·ªô v·ªõi mobile app
  const multiplier =
    {
      N: 1, // Ng√†y
      T: 7, // Tu·∫ßn
      Th: 30, // Th√°ng
      NAM: 365, // NƒÉm
    }[loaiChinhSach] || 1;

  return soLuong * multiplier;
}

/**
 * L·∫•y danh s√°ch ch√≠nh s√°ch theo chu·∫©n backend pm_nc0008
 * @returns {Promise<Array>} Danh s√°ch ch√≠nh s√°ch v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
 */
export async function layDanhSachChinhSachGiaV2() {
  const payload = { table: "pm_nc0008", func: "getAllPolicies" };
  try {
    const response = await callApiWithAuth(payload);
    if (response && response.success && response.data) {
      // Map data ƒë·ªÉ ƒë·∫£m b·∫£o format ƒë√∫ng
      return response.data.map((policy) => ({
        maChinhSach: policy.lv001,
        maLoaiPT: policy.lv002,
        thoiGian: parseInt(policy.lv003) || 0,
        donGia: parseFloat(policy.lv004) || 0,
        quaGio: parseInt(policy.lv005) || 0,
        donGiaQuaGio: parseFloat(policy.lv006) || 0,
        loaiChinhSach: policy.lv007 || "",
        tongNgay: parseInt(policy.lv008) || 0,
      }));
    }
    return [];
  } catch (error) {
    console.error("L·ªói layDanhSachChinhSachGiaV2:", error);
    throw error;
  }
}

/**
 * Th√™m ch√≠nh s√°ch gi√° m·ªõi (backend pm_nc0008)
 * @param {Object} chinhSach - Th√¥ng tin ch√≠nh s√°ch
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m
 */
export async function themChinhSachV2(chinhSach) {
  const payload = {
    table: "pm_nc0008",
    func: "createPolicy",
    policyData: {
      lv001: chinhSach.maChinhSach,
      lv002: chinhSach.maLoaiPT,
      lv003: chinhSach.thoiGian,
      lv004: chinhSach.donGia,
      lv005: chinhSach.quaGio,
      lv006: chinhSach.donGiaQuaGio,
      lv007: chinhSach.loaiChinhSach,
      lv008: chinhSach.tongNgay,
    },
  };
  console.log("themChinhSachV2 - Payload g·ª≠i ƒëi:", payload);
  console.log(
    "themChinhSachV2 - tongNgay value:",
    chinhSach.tongNgay,
    "type:",
    typeof chinhSach.tongNgay
  );
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t ch√≠nh s√°ch gi√° (backend pm_nc0008)
 * @param {Object} chinhSach - Th√¥ng tin ch√≠nh s√°ch
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function suaChinhSachV2(chinhSach) {
  const payload = {
    table: "pm_nc0008",
    func: "updatePolicy",
    policyId: chinhSach.maChinhSach,
    policyData: {
      lv001: chinhSach.maChinhSach,
      lv002: chinhSach.maLoaiPT,
      lv003: chinhSach.thoiGian,
      lv004: chinhSach.donGia,
      lv005: chinhSach.quaGio,
      lv006: chinhSach.donGiaQuaGio,
      lv007: chinhSach.loaiChinhSach,
      lv008: chinhSach.tongNgay,
    },
  };
  console.log("suaChinhSachV2 - Payload g·ª≠i ƒëi:", payload);
  console.log(
    "suaChinhSachV2 - tongNgay value:",
    chinhSach.tongNgay,
    "type:",
    typeof chinhSach.tongNgay
  );
  return callApiWithAuth(payload);
}

/**
 * X√≥a ch√≠nh s√°ch gi√° (backend pm_nc0008)
 * @param {string} maChinhSach - M√£ ch√≠nh s√°ch
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
 */
export async function xoaChinhSachV2(maChinhSach) {
  const payload = {
    table: "pm_nc0008",
    func: "deletePolicy",
    policyId: maChinhSach,
  };
  return callApiWithAuth(payload);
}

// ==================== Camera Management Advanced Functions ====================

/**
 * Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa camera (online/offline)
 * @param {string} maCamera - M√£ camera c·∫ßn ki·ªÉm tra
 * @returns {Promise<Object>} Tr·∫°ng th√°i camera
 */
export async function kiemTraTrangThaiCamera(maCamera) {
  const payload = {
    table: "pm_nc0006_1",
    func: "checkStatus",
    maCamera: maCamera,
  };
  return callApiWithAuth(payload);
}

/**
 * L·∫•y danh s√°ch camera theo khu v·ª±c
 * @param {string} maKhuVuc - M√£ khu v·ª±c
 * @returns {Promise<Array>} Danh s√°ch camera trong khu v·ª±c
 */
export async function layDanhSachCameraTheoKhuVuc(maKhuVuc) {
  const payload = {
    table: "pm_nc0006_1",
    func: "getByArea",
    maKhuVuc: maKhuVuc,
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t link RTSP c·ªßa camera
 * @param {string} maCamera - M√£ camera
 * @param {string} linkRTSP - Link RTSP m·ªõi
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatLinkCamera(maCamera, linkRTSP) {
  const payload = {
    table: "pm_nc0006_1",
    func: "updateRTSP",
    maCamera: maCamera,
    linkRTSP: linkRTSP,
  };
  return callApiWithAuth(payload);
}

/**
 * L·∫•y danh s√°ch camera theo lo·∫°i (v√†o/ra)
 * @param {string} chucNangCamera - Ch·ª©c nƒÉng camera (v√†o/ra)
 * @returns {Promise<Array>} Danh s√°ch camera theo ch·ª©c nƒÉng
 */
export async function layDanhSachCameraTheoLoai(chucNangCamera) {
  const payload = {
    table: "pm_nc0006_1",
    func: "getByFunction",
    chucNangCamera: chucNangCamera,
  };
  return callApiWithAuth(payload);
}

/**
 * Ki·ªÉm tra tr·∫°ng th√°i t·∫•t c·∫£ camera
 * @returns {Promise<Array>} Tr·∫°ng th√°i t·∫•t c·∫£ camera
 */
export async function kiemTraTrangThaiTatCaCamera() {
  const payload = {
    table: "pm_nc0006_1",
    func: "checkAllStatus",
  };
  return callApiWithAuth(payload);
}

/**
 * T·∫°o URL RTSP ƒë·∫ßy ƒë·ªß t·ª´ th√¥ng tin camera
 * @param {Object} camera - Th√¥ng tin camera
 * @returns {string} URL RTSP ƒë·∫ßy ƒë·ªß
 */
export function taoURLRTSP(camera) {
  if (!camera.linkRTSP) return "";

  // N·∫øu ƒë√£ c√≥ protocol th√¨ tr·∫£ v·ªÅ nh∆∞ c≈©
  if (camera.linkRTSP.startsWith("rtsp://")) {
    return camera.linkRTSP;
  }

  // T·∫°o URL RTSP ƒë·∫ßy ƒë·ªß
  return `rtsp://${camera.linkRTSP}`;
}

/**
 * Test k·∫øt n·ªëi RTSP c·ªßa camera
 * @param {string} rtspUrl - URL RTSP c·∫ßn test
 * @returns {Promise<Object>} K·∫øt qu·∫£ test k·∫øt n·ªëi
 */
export async function testKetNoiRTSP(rtspUrl) {
  try {
    // T·∫°o m·ªôt video element ƒë·ªÉ test stream
    const video = document.createElement("video");
    video.src = rtspUrl;
    video.muted = true;

    return new Promise((resolve) => {
      const timeout = setTimeout(() => {
        resolve({
          success: false,
          message: "Timeout - kh√¥ng th·ªÉ k·∫øt n·ªëi trong 5 gi√¢y",
          url: rtspUrl,
        });
      }, 5000);

      video.onloadstart = () => {
        clearTimeout(timeout);
        resolve({
          success: true,
          message: "K·∫øt n·ªëi RTSP th√†nh c√¥ng",
          url: rtspUrl,
        });
      };

      video.onerror = (error) => {
        clearTimeout(timeout);
        resolve({
          success: false,
          message: `L·ªói k·∫øt n·ªëi RTSP: ${error.message || "Unknown error"}`,
          url: rtspUrl,
        });
      };
    });
  } catch (error) {
    return {
      success: false,
      message: `L·ªói test RTSP: ${error.message}`,
      url: rtspUrl,
    };
  }
}

/**
 * L·∫•y th·ªëng k√™ camera (t·ªïng s·ªë, online, offline)
 * @returns {Promise<Object>} Th·ªëng k√™ camera
 */
export async function layThongKeCamera() {
  const payload = {
    table: "pm_nc0006_1",
    func: "getStatistics",
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t c·∫•u h√¨nh camera (ƒë·ªô ph√¢n gi·∫£i, FPS, etc.)
 * @param {string} maCamera - M√£ camera
 * @param {Object} cauHinh - C·∫•u h√¨nh camera
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatCauHinhCamera(maCamera, cauHinh) {
  const payload = {
    table: "pm_nc0006_1",
    func: "updateConfig",
    maCamera: maCamera,
    ...cauHinh,
  };
  return callApiWithAuth(payload);
}

/**
 * L·∫•y l·ªãch s·ª≠ ho·∫°t ƒë·ªông c·ªßa camera
 * @param {string} maCamera - M√£ camera
 * @param {string} tuNgay - T·ª´ ng√†y (YYYY-MM-DD)
 * @param {string} denNgay - ƒê·∫øn ng√†y (YYYY-MM-DD)
 * @returns {Promise<Array>} L·ªãch s·ª≠ ho·∫°t ƒë·ªông
 */
export async function layLichSuCamera(maCamera, tuNgay, denNgay) {
  const payload = {
    table: "pm_nc0006_1",
    func: "getHistory",
    maCamera: maCamera,
    tuNgay: tuNgay,
    denNgay: denNgay,
  };
  return callApiWithAuth(payload);
}

/**
 * Ph√¢n lo·∫°i camera theo c·ªïng v√†o/ra v√† tr·∫°ng th√°i
 * @returns {Promise<Object>} Camera ƒë∆∞·ª£c ph√¢n lo·∫°i theo c·ªïng v√† tr·∫°ng th√°i
 */
export async function phanLoaiCameraTheoTrangThai() {
  try {
    const danhSachCamera = await layDanhSachCamera();
    const trangThaiTatCa = await kiemTraTrangThaiTatCaCamera();

    const ketQua = {
      cameraVao: [],
      cameraRa: [],
      cameraOnline: [],
      cameraOffline: [],
      tongSo: danhSachCamera.length || 0,
    };

    if (Array.isArray(danhSachCamera)) {
      danhSachCamera.forEach((camera) => {
        // Ph√¢n lo·∫°i theo ch·ª©c nƒÉng
        if (
          camera.chucNangCamera === "v√†o" ||
          camera.chucNangCamera === "V√†o"
        ) {
          ketQua.cameraVao.push(camera);
        } else if (
          camera.chucNangCamera === "ra" ||
          camera.chucNangCamera === "Ra"
        ) {
          ketQua.cameraRa.push(camera);
        }

        // Ph√¢n lo·∫°i theo tr·∫°ng th√°i (gi·∫£ ƒë·ªãnh c√≥ th√¥ng tin tr·∫°ng th√°i)
        const trangThai = trangThaiTatCa?.find(
          (t) => t.maCamera === camera.maCamera
        );
        if (trangThai?.online) {
          ketQua.cameraOnline.push(camera);
        } else {
          ketQua.cameraOffline.push(camera);
        }
      });
    }

    return ketQua;
  } catch (error) {
    console.error("L·ªói ph√¢n lo·∫°i camera:", error);
    return {
      cameraVao: [],
      cameraRa: [],
      cameraOnline: [],
      cameraOffline: [],
      tongSo: 0,
      error: error.message,
    };
  }
}

/**
 * L·∫•y danh s√°ch phi√™n g·ª≠i xe v·ªõi th√¥ng tin v·ªã tr√≠ ƒë·ªó xe (lv004)
 * @returns {Promise<Array>} Danh s√°ch phi√™n g·ª≠i xe v·ªõi v·ªã tr√≠ ƒë·ªó
 */
export async function layPhienGuiXeCoViTri() {
  const payload = {
    table: "pm_nc0009",
    func: "data",
    includeViTri: true, // Flag ƒë·ªÉ ƒë·∫£m b·∫£o lv004 ƒë∆∞·ª£c bao g·ªìm
  };
  const result = await callApiWithAuth(payload);

  // ƒê·∫£m b·∫£o mapping ƒë√∫ng t·ª´ database response
  if (Array.isArray(result)) {
    return result.map((phien) => ({
      ...phien,
      viTriGui: phien.lv004 || phien.viTriGui, // Map lv004 to viTriGui
      // C√°c field kh√°c gi·ªØ nguy√™n
      maPhien: phien.maPhien || phien.lv001,
      uidThe: phien.uidThe || phien.lv002,
      bienSo: phien.bienSo || phien.lv003,
      chinhSach: phien.chinhSach || phien.lv005,
      congVao: phien.congVao || phien.lv006,
      gioVao: phien.gioVao || phien.lv007,
      anhVao: phien.anhVao || phien.lv008,
      anhMatVao: phien.anhMatVao || phien.lv009,
      congRa: phien.congRa || phien.lv010,
      gioRa: phien.gioRa || phien.lv011,
      anhRa: phien.anhRa || phien.lv012,
      anhMatRa: phien.anhMatRa || phien.lv013,
      trangThai: phien.trangThai || phien.lv014,
    }));
  }

  return result;
}

/**
 * T·∫°o nh·∫≠t k√Ω qu√©t th·∫ª v·ªõi th·ªùi gian t·ª´ frontend
 * @param {Object} scanLogData - D·ªØ li·ªáu nh·∫≠t k√Ω qu√©t th·∫ª
 * @param {string} scanLogData.sessionId - M√£ phi√™n g·ª≠i xe
 * @param {string} scanLogData.cameraId - M√£ camera
 * @param {string} scanLogData.scanTime - Th·ªùi gian qu√©t (t·ª´ client)
 * @param {string} scanLogData.imagePath - ƒê∆∞·ªùng d·∫´n ·∫£nh
 * @param {number} scanLogData.plateMatch - Kh·ªõp bi·ªÉn s·ªë (0/1)
 * @param {string} scanLogData.direction - H∆∞·ªõng qu√©t ('entry'/'exit')
 * @returns {Promise<Object>} K·∫øt qu·∫£ t·∫°o nh·∫≠t k√Ω
 */
export async function themNhatKyQuetTheVoiThoiGian(scanLogData) {
  const payload = {
    table: "pm_nc0010",
    func: "addWithClientTime",
    sessionId: scanLogData.sessionId,
    cameraId: scanLogData.cameraId,
    clientTime: scanLogData.scanTime,
    imagePath: scanLogData.imagePath,
    plateMatch: scanLogData.plateMatch || 0,
    direction: scanLogData.direction || 'entry'
  };
  return callApiWithAuth(payload);
}

/**
 * T√≠nh ph√≠ g·ª≠i xe cho m·ªôt m√£ phi√™n
 * @param {string} maPhien - M√£ phi√™n g·ª≠i xe
 * @param {string} uidThe - UID th·∫ª (optional, ƒë·ªÉ ki·ªÉm tra mi·ªÖn ph√≠)
 * @returns {Promise<Object>} K·∫øt qu·∫£ t√≠nh ph√≠
 */
export const tinhPhiGuiXe = async (maPhien, uidThe = null) => {
    try {
        console.log(`üí∞ B·∫Øt ƒë·∫ßu t√≠nh ph√≠ cho phi√™n: ${maPhien}, th·∫ª: ${uidThe || 'N/A'}`);

        if (!maPhien) {
            return {
                success: false,
                phi: 0,
                tongPhut: 0,
                message: "Thi·∫øu m√£ phi√™n"
            };
        }

        // B1: N·∫øu c√≥ uidThe, ki·ªÉm tra xem th·∫ª c√≥ ƒë∆∞·ª£c mi·ªÖn ph√≠ kh√¥ng
        if (uidThe) {
            try {
                const isFree = await kiemTraTheMienPhi(uidThe);
                
                // B2: N·∫øu ƒë∆∞·ª£c mi·ªÖn ph√≠, tr·∫£ v·ªÅ ph√≠ l√† 0
                if (isFree) {
                    console.log(`‚úÖ Th·∫ª ${uidThe} ƒë∆∞·ª£c mi·ªÖn ph√≠ (kh√¥ng ph·∫£i th·∫ª KHACH).`);
                    return {
                        success: true,
                        phi: 0,
                        tongPhut: 0,
                        message: "Th·∫ª thu·ªôc ƒë·ªëi t∆∞·ª£ng mi·ªÖn ph√≠"
                    };
                }
                console.log(`üí∞ Th·∫ª ${uidThe} l√† th·∫ª KHACH, ti·∫øn h√†nh t√≠nh ph√≠.`);
            } catch (freeCheckError) {
                console.warn(`‚ö†Ô∏è L·ªói ki·ªÉm tra mi·ªÖn ph√≠, ti·∫øp t·ª•c t√≠nh ph√≠:`, freeCheckError);
            }
        }

        // B3: G·ªçi API backend ƒë·ªÉ t√≠nh ph√≠
        const payload = { 
            table: "pm_nc0008", 
            func: "tinhPhiGuiXe", 
            maPhien: maPhien 
        };
        
        console.log(`üí∞ G·ªçi API t√≠nh ph√≠ v·ªõi payload:`, payload);
        const response = await callApiWithAuth(payload);
        console.log(`üí∞ Response t·ª´ API:`, response);
        
        // X·ª≠ l√Ω response t·ª´ backend
        if (response) {
            // Check if response has success property directly
            if (response.success !== undefined) {
                return {
                    success: response.success,
                    phi: response.phi || response.fee || 0,
                    tongPhut: response.tongPhut || response.totalMinutes || 0,
                    message: response.message || (response.success ? "T√≠nh ph√≠ th√†nh c√¥ng" : "L·ªói t√≠nh ph√≠")
                };
            }
            // Check if response has data property
            else if (response.data) {
                return {
                    success: true,
                    phi: response.data.phi || response.data.fee || 0,
                    tongPhut: response.data.tongPhut || response.data.totalMinutes || 0,
                    message: response.data.message || "T√≠nh ph√≠ th√†nh c√¥ng"
                };
            }
            // Legacy format - assume success if response exists
            else {
                return {
                    success: true,
                    phi: response.phi || response.fee || 0,
                    tongPhut: response.tongPhut || response.totalMinutes || 0,
                    message: response.message || "T√≠nh ph√≠ th√†nh c√¥ng"
                };
            }
        } else {
            return {
                success: false,
                phi: 0,
                tongPhut: 0,
                message: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response t·ª´ server"
            };
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi t√≠nh ph√≠ g·ª≠i xe:', error);
        return {
            success: false,
            phi: 0,
            tongPhut: 0,
            message: error.message || "L·ªói t√≠nh ph√≠"
        };
    }
};

/**
 * Ki·ªÉm tra lo·∫°i th·∫ª ƒë·ªÉ x√°c ƒë·ªãnh mi·ªÖn ph√≠
 * @param {string} uidThe - UID th·∫ª
 * @returns {Promise<boolean>} true n·∫øu ƒë∆∞·ª£c mi·ªÖn ph√≠
 */
export async function kiemTraTheMienPhi(uidThe) {
  try {
    const danhSachThe = await layDanhSachThe()
    const the = danhSachThe.find(t => t.uidThe === uidThe)
    
    if (the) {
      // Ch·ªâ th·∫ª KHACH m·ªõi ph·∫£i tr·∫£ ph√≠
      return the.loaiThe !== "KHACH"
    }
    
    return false
  } catch (error) {
    console.error("L·ªói ki·ªÉm tra th·∫ª mi·ªÖn ph√≠:", error)
    return false
  }
}

/**
 * L·∫•y th√¥ng tin th·∫ª theo UID v·ªõi th√¥ng tin chi ti·∫øt
 * @param {string} uidThe - UID th·∫ª
 * @returns {Promise<Object>} Th√¥ng tin th·∫ª
 */
export async function layThongTinTheChiTiet(uidThe) {
  const payload = {
    table: "pm_nc0003",
    func: "timTheTuUID",
    uidThe: uidThe
  }
  const result = await callApiWithAuth(payload)
  
  if (result && result.length > 0) {
    const the = result[0]
    return {
      success: true,
      data: {
        uidThe: the.uidThe,
        loaiThe: the.loaiThe,
        trangThai: the.trangThai,
        ngayPhatHanh: the.ngayPhatHanh,
        bienSoXe: the.bienSoXe,
        maChinhSach: the.maChinhSach,
        ngayKetThucCS: the.ngayKetThucCS,
        laMienPhi: the.loaiThe !== "KHACH" // Ch·ªâ th·∫ª KHACH ph·∫£i tr·∫£ ph√≠
      }
    }
  }
  
  return {
    success: false,
    message: "Kh√¥ng t√¨m th·∫•y th·∫ª"
  }
}

/**
 * Th√™m phi√™n g·ª≠i xe v·ªõi logic x·ª≠ l√Ω v·ªã tr√≠ theo lo·∫°i xe
 * @param {Object} session - Th√¥ng tin phi√™n g·ª≠i xe
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m phi√™n
 */
export async function themPhienGuiXeVoiViTri(session) {
  try {
    // L·∫•y th√¥ng tin lo·∫°i xe t·ª´ bi·ªÉn s·ªë
    let loaiXe = "0" // M·∫∑c ƒë·ªãnh xe nh·ªè
    let viTriGui = null
    
    if (session.bienSo) {
      const thongTinLoaiXe = await layThongTinLoaiXeTuBienSo(session.bienSo)
      loaiXe = thongTinLoaiXe.loaiXe || "0"
      
      // N·∫øu l√† xe l·ªõn (loaiXe = "1"), t√¨m slot tr·ªëng
      if (loaiXe === "1") {
        const slotResult = await laySlotTrongChoXeLon(session.maKhuVuc)
        if (slotResult.success) {
          viTriGui = slotResult.maChoDo
          
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i slot th√†nh ƒë√£ d√πng
          await capNhatTrangThaiChoDo(viTriGui, "1")
        } else {
          return {
            success: false,
            message: "Kh√¥ng c√≤n ch·ªó ƒë·ªó cho xe l·ªõn"
          }
        }
      }
      // Xe nh·ªè kh√¥ng c·∫ßn v·ªã tr√≠ ƒë·ªó c·ª• th·ªÉ
    }
    
    // T·∫°o phi√™n g·ª≠i xe
    const sessionData = {
      ...session,
      viTriGui: viTriGui, // null cho xe nh·ªè, c√≥ gi√° tr·ªã cho xe l·ªõn
      loaiXe: loaiXe
    }
    
    return await themPhienGuiXe(sessionData)
  } catch (error) {
    console.error("L·ªói th√™m phi√™n g·ª≠i xe:", error)
    return {
      success: false,
      message: error.message
    }
  }
}

// L·∫•y th√¥ng tin quy·ªÅn h·∫°n ng∆∞·ªùi d√πng t·ª´ lv_lv0007
export async function layThongTinQuyenHanNguoiDung(userCode) {
  try {
    console.log(`ƒêang l·∫•y th√¥ng tin quy·ªÅn h·∫°n cho ng∆∞·ªùi d√πng: ${userCode}`);
    
    const payload = {
      table: "pm_nc0011",
      func: "select",
      code: userCode
    };

    const result = await callApiWithAuth(payload);
    
    if (result && result.success && result.data) {
      console.log(`L·∫•y th√¥ng tin quy·ªÅn h·∫°n th√†nh c√¥ng:`, result.data);
      return {
        success: true,
        ...result.data
      };
    } else {
      console.error(`L·ªói l·∫•y th√¥ng tin quy·ªÅn h·∫°n:`, result?.message || "Unknown error");
      return {
        success: false,
        message: result?.message || "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin quy·ªÅn h·∫°n",
        isAdmin: false,
        permissions: {
          canAccessConfig: false,
          canAccessCamera: false,
          canAccessPricing: false,
          canAccessZone: false,
          canAccessVehicle: false,
          canAccessVehicleType: false,
          canAccessRfid: false
        }
      };
    }
  } catch (error) {
    console.error(`Exception khi l·∫•y th√¥ng tin quy·ªÅn h·∫°n:`, error);
    return {
      success: false,
      message: `L·ªói h·ªá th·ªëng: ${error.message}`,
      isAdmin: false,
      permissions: {
        canAccessConfig: false,
        canAccessCamera: false,
        canAccessPricing: false,
        canAccessZone: false,
        canAccessVehicle: false,
        canAccessVehicleType: false,
        canAccessRfid: false
      }
    };
  }
}

// Ki·ªÉm tra quy·ªÅn h·∫°n ng∆∞·ªùi d√πng (helper function)
export async function kiemTraQuyenHanNguoiDung(userCode) {
  const userPermissions = await layThongTinQuyenHanNguoiDung(userCode);
  return userPermissions;
}

// L·∫•y danh s√°ch th·∫ª RFID t·ª´ b·∫£ng pm_nc0003

// -------------------- Image URL Helpers --------------------

// T√°ch filename t·ª´ URL ·∫£nh ƒë·ªÉ l∆∞u v√†o database
export function extractFilenameFromImageUrl(imageUrl) {
  try {
    if (!imageUrl || typeof imageUrl !== 'string') {
      return '';
    }
    
    // Extract filename from URL pattern: http://192.168.1.19:9000/parking-lot-images/license_plate_2025-07-10T03-04-54-531Z.jpg
    const urlParts = imageUrl.split('/');
    const filename = urlParts[urlParts.length - 1];
    
    console.log(`üñºÔ∏è T√°ch filename t·ª´ URL: ${imageUrl} -> ${filename}`);
    return filename;
  } catch (error) {
    console.error(`‚ùå L·ªói t√°ch filename t·ª´ URL: ${error.message}`);
    return '';
  }
}

// T·∫°o URL ƒë·∫ßy ƒë·ªß t·ª´ filename ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh
export function constructImageUrlFromFilename(filename, serverIndex = 0) {
  try {
    if (!filename || typeof filename !== 'string') {
      return '';
    }
    
    // N·∫øu ƒë√£ l√† URL ƒë·∫ßy ƒë·ªß th√¨ return lu√¥n
    if (filename.startsWith('http://') || filename.startsWith('https://')) {
      return filename;
    }
    
    // T·∫°o URL t·ª´ filename v·ªõi c√°c MinIO servers
    const minioServers = [
      'http://192.168.1.19:9000',
      'http://192.168.1.90:9000', 
      'http://192.168.1.94:9000'
    ];
    
    const baseUrl = minioServers[serverIndex] || minioServers[0];
    const fullUrl = `${baseUrl}/parking-lot-images/${filename}`;
    
    console.log(`üñºÔ∏è T·∫°o URL t·ª´ filename: ${filename} -> ${fullUrl}`);
    return fullUrl;
  } catch (error) {
    console.error(`‚ùå L·ªói t·∫°o URL t·ª´ filename: ${error.message}`);
    return '';
  }
}

// =============================================================================
// PH√ÇN QUY·ªÄN & X√ÅC TH·ª∞C
// =============================================================================

// L·∫•y th√¥ng tin quy·ªÅn h·∫°n ng∆∞·ªùi d√πng theo token
// export async function layThongTinQuyenHanNhanVien(token) {
//   try {
//     const payload = {
//       table: 'lv_lv0007',
//       func: 'layThongTinTaiKhoanTheoToken',
//       token: token // ƒë·ªïi t·ª´ lv097 ‚ûú token ƒë·ªÉ backend nh·∫≠n ƒë√∫ng
//     };
//     const data = await callApiWithAuth(payload);

//     if (Array.isArray(data) && data.length > 0) {
//       const userInfo = data[0];
//       const isAdmin = userInfo.quyenHan === '0';
//       return {
//         success: true,
//         data: {
//           taiKhoanDN: userInfo.taiKhoanDN,
//           ten: userInfo.ten,
//           roleQuyen: userInfo.roleQuyen,
//           quyenHan: userInfo.quyenHan,
//           isAdmin,
//           permissions: {
//             canAccessConfig: isAdmin,
//             canAccessCamera: isAdmin,
//             canAccessPricing: isAdmin,
//             canAccessZone: isAdmin,
//             canAccessVehicle: isAdmin,
//             canAccessVehicleType: isAdmin,
//             canAccessRfid: isAdmin
//           }
//         }
//       };
//     }
//     return { success: false, message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng' };
//   } catch (error) {
//     console.error('‚ùå [API Error] L·ªói l·∫•y th√¥ng tin quy·ªÅn h·∫°n:', error);
//     return { success: false, message: `L·ªói k·∫øt n·ªëi: ${error.message}` };
//   }
// }

// =============================================================================
// QU·∫¢N L√ù SLOT ƒê·ªñ XE
// =============================================================================

// L·∫•y slot tr·ªëng cho xe l·ªõn
export async function laySlotTrongChoXeLon(maKhuVuc = null) {
  try {
    // L·∫•y to√†n b·ªô danh s√°ch ch·ªó ƒë·ªó
    let spots = await layDanhSachChoDo();

    if (!Array.isArray(spots)) {
      return { success: false, message: 'Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch ch·ªó ƒë·ªó' };
    }

    // L·ªçc theo khu v·ª±c (n·∫øu c√≥)
    if (maKhuVuc) {
      spots = spots.filter((s) => s.maKhuVuc === maKhuVuc);
    }

    // L·ªçc slot tr·ªëng (trangThai = 0)
    const freeSpots = spots.filter((s) => s.trangThai === '0' || s.trangThai === 0);

    if (freeSpots.length === 0) {
      return { success: false, message: 'Kh√¥ng c√≤n ch·ªó ƒë·ªó tr·ªëng' };
    }

    // S·∫Øp x·∫øp theo m√£ ch·ªó ƒë·ªó (tƒÉng d·∫ßn) => P0001, P0002 ...
    freeSpots.sort((a, b) => a.maChoDo.localeCompare(b.maChoDo, undefined, { numeric: true }));

    const bestSpot = freeSpots[0];

    return {
      success: true,
      maChoDo: bestSpot.maChoDo,
      maKhuVuc: bestSpot.maKhuVuc,
      tenKhuVuc: bestSpot.tenKhuVuc || '',
    };
  } catch (error) {
    console.error('‚ùå [API Error] L·ªói l·∫•y slot tr·ªëng:', error);
    return { success: false, message: `L·ªói k·∫øt n·ªëi: ${error.message}` };
  }
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ch·ªó ƒë·ªó
export async function capNhatTrangThaiChoDo(maChoDo, trangThai) {
  try {
    const payload = {
      table: 'pm_nc0005',
      func: 'chinhSuaTrangThai',
      maChoDo,
      trangThai
    };
    return await callApiWithAuth(payload);
  } catch (error) {
    console.error('‚ùå [API Error] L·ªói c·∫≠p nh·∫≠t slot:', error);
    return { success: false, message: `L·ªói k·∫øt n·ªëi: ${error.message}` };
  }
}

// =============================================================================
// NH·∫¨N DI·ªÜN LO·∫†I XE
// =============================================================================

// L·∫•y th√¥ng tin lo·∫°i xe t·ª´ bi·ªÉn s·ªë
export async function layThongTinLoaiXeTuBienSo(bienSo) {
  try {
    console.log(`üöó [API] T√¨m lo·∫°i xe t·ª´ bi·ªÉn s·ªë: ${bienSo}`);
    
    // G·ªçi API l·∫•y th√¥ng tin ph∆∞∆°ng ti·ªán
    const response = await fetch(`${getBaseUrl()}/kebao.php`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        table: 'pm_nc0002',
        func: 'data'
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    const vehicles = await response.json();
    console.log(`üöó [API Response] Danh s√°ch ph∆∞∆°ng ti·ªán:`, vehicles);
    
    if (Array.isArray(vehicles)) {
      const foundVehicle = vehicles.find(v => 
        v.bienSo === bienSo || v.lv001 === bienSo
      );
      
      if (foundVehicle) {
        // L·∫•y th√¥ng tin lo·∫°i xe t·ª´ pm_nc0001
        const vehicleTypes = await layALLLoaiPhuongTien();
        if (Array.isArray(vehicleTypes)) {
          const vehicleType = vehicleTypes.find(vt => 
            vt.maLoaiPT === foundVehicle.maLoaiPT || vt.lv001 === foundVehicle.maLoaiPT
          );
          
          if (vehicleType) {
            console.log(`‚úÖ [API] T√¨m th·∫•y lo·∫°i xe t·ª´ bi·ªÉn s·ªë:`, vehicleType);
            return {
              success: true,
              data: {
                maLoaiPT: vehicleType.maLoaiPT,
                tenLoaiPT: vehicleType.tenLoaiPT,
                loaiXe: vehicleType.loaiXe // 0 = xe nh·ªè, 1 = xe l·ªõn
              }
            };
          }
        }
      }
      
      console.log(`‚ö†Ô∏è [API] Kh√¥ng t√¨m th·∫•y th√¥ng tin lo·∫°i xe t·ª´ bi·ªÉn s·ªë`);
      return {
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin lo·∫°i xe t·ª´ bi·ªÉn s·ªë'
      };
    } else {
      throw new Error('D·ªØ li·ªáu ph∆∞∆°ng ti·ªán kh√¥ng h·ª£p l·ªá');
    }
  } catch (error) {
    console.error(`‚ùå [API Error] L·ªói t√¨m lo·∫°i xe:`, error);
    return {
      success: false,
      message: `L·ªói k·∫øt n·ªëi: ${error.message}`
    };
  }
}

// =============================================================================
// T√çNH TO√ÅN CH√çNH S√ÅCH RFID
// =============================================================================

// T√≠nh ng√†y k·∫øt th√∫c ch√≠nh s√°ch t·ª´ t√™n ch√≠nh s√°ch v√† ng√†y b·∫Øt ƒë·∫ßu
export function tinhNgayKetThucChinhSach(tenChinhSach, ngayBatDau) {
  try {
    console.log(`üìÖ [API] T√≠nh ng√†y k·∫øt th√∫c cho ch√≠nh s√°ch: ${tenChinhSach}, t·ª´ ng√†y: ${ngayBatDau}`);
    
    if (!tenChinhSach || !ngayBatDau) {
      throw new Error('Thi·∫øu t√™n ch√≠nh s√°ch ho·∫∑c ng√†y b·∫Øt ƒë·∫ßu');
    }
    
    const startDate = new Date(ngayBatDau);
    if (isNaN(startDate.getTime())) {
      throw new Error('Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá');
    }
    
    // Parse pattern: CS_[VEHICLE_TYPE]_[DURATION][UNIT]
    // Improved regex to handle various formats
    const match = tenChinhSach.match(/(\d+)(T|TH|THANG|N|NAM|H)$/i);
    
    if (!match) {
      console.warn(`‚ö†Ô∏è [API] Kh√¥ng th·ªÉ parse ch√≠nh s√°ch: ${tenChinhSach}`);
      return null;
    }
    
    const duration = parseInt(match[1]);
    const unit = match[2].toUpperCase();
    
    console.log(`üìÖ [API] Parsed: ${duration} ${unit}`);
    
    const endDate = new Date(startDate);
    
    switch (unit) {
      case 'T':
        endDate.setDate(endDate.getWeek() + duration);
      case 'TH':
        endDate.setMonth(endDate.getMonth() + duration); 
      case 'THANG':
        endDate.setMonth(endDate.getMonth() + duration);
        break;
      case 'N':
        endDate.setDate(endDate.getDate() + duration);
        break;
      case 'NAM':
        endDate.setFullYear(endDate.getFullYear() + duration);
        break;
      case 'H':
        endDate.setHours(endDate.getHours() + duration);
        break;
      default:
        throw new Error(`ƒê∆°n v·ªã th·ªùi gian kh√¥ng h·ªó tr·ª£: ${unit}`);
    }
    
    console.log(`‚úÖ [API] Ng√†y k·∫øt th√∫c t√≠nh ƒë∆∞·ª£c: ${endDate.toISOString()}`);
    return endDate.toISOString().split('T')[0]; // Return YYYY-MM-DD format
    
  } catch (error) {
    console.error(`‚ùå [API Error] L·ªói t√≠nh ng√†y k·∫øt th√∫c:`, error);
    return null;
  }
}

// Helper: Tr·∫£ v·ªÅ base URL (th∆∞ m·ª•c ch·ª©a c√°c PHP endpoint)
export function getBaseUrl() {
  try {
    if (!url_api) return "";
    const lastSlashIdx = url_api.lastIndexOf("/");
    if (lastSlashIdx === -1) return url_api;
    return url_api.substring(0, lastSlashIdx);
  } catch (err) {
    console.error("getBaseUrl error", err);
    return "";
  }
}

// L·∫•y th√¥ng tin quy·ªÅn h·∫°n ng∆∞·ªùi d√πng theo token + code
export async function layThongTinQuyenHanNhanVien(token, userCode) {
  try {
    if (!token || !userCode) {
      throw new Error('Thi·∫øu token ho·∫∑c userCode');
    }

    const payload = {
      table: 'lv_lv0007',
      func: 'layThongTinTaiKhoanTheoToken',
      token: token
    };

    const res = await fetch(url_api, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-USER-CODE': userCode,
        'X-USER-TOKEN': token
      },
      body: JSON.stringify(payload)
    });

    if (!res.ok) {
      throw new Error(`HTTP ${res.status}`);
    }

    const data = await res.json();

    if (Array.isArray(data) && data.length > 0) {
      const userInfo = data[0];
      const isAdmin = userInfo.quyenHan === '0';
      return {
        success: true,
        data: {
          taiKhoanDN: userInfo.taiKhoanDN,
          ten: userInfo.ten,
          roleQuyen: userInfo.roleQuyen,
          quyenHan: userInfo.quyenHan,
          isAdmin,
          permissions: {
            canAccessConfig: isAdmin,
            canAccessCamera: isAdmin,
            canAccessPricing: isAdmin,
            canAccessZone: isAdmin,
            canAccessVehicle: isAdmin,
            canAccessVehicleType: isAdmin,
            canAccessRfid: isAdmin
          }
        }
      };
    }
    return { success: false, message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng' };
  } catch (error) {
    console.error('[API Error] L·ªói l·∫•y th√¥ng tin quy·ªÅn h·∫°n:', error);
    return { success: false, message: `L·ªói k·∫øt n·ªëi: ${error.message}` };
  }
}

// ==================== QU·∫¢N L√ù NH√ÇN VI√äN (lv_lv0007) ====================

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ nh√¢n vi√™n
 * @returns {Promise<Array>} Danh s√°ch nh√¢n vi√™n v·ªõi th√¥ng tin: taiKhoanDN, nguoiThem, roleQuyen, matKhau, ten, quyenHan
 */
export async function layDanhSachNhanVien() {
  const payload = {
    table: "lv_lv0007",
    func: "data"
  };
  return callApiWithAuth(payload);
}

/**
 * L·∫•y th√¥ng tin t√†i kho·∫£n theo token
 * @param {string} token - Token ƒë·ªÉ x√°c th·ª±c
 * @returns {Promise<Array>} Th√¥ng tin t√†i kho·∫£n
 */
export async function layThongTinTaiKhoanTheoToken(token) {
  const payload = {
    table: "lv_lv0007",
    func: "layThongTinTaiKhoanTheoToken",
    token: token
  };
  return callApiWithAuth(payload);
}

/**
 * Th√™m nh√¢n vi√™n m·ªõi
 * @param {Object} nhanVien - Th√¥ng tin nh√¢n vi√™n
 * @param {string} nhanVien.taiKhoanDN - T√†i kho·∫£n ƒëƒÉng nh·∫≠p (-> lv001)
 * @param {string} nhanVien.nguoiThem - Ng∆∞·ªùi th√™m (-> lv003)
 * @param {string} nhanVien.roleQuyen - Role quy·ªÅn (-> lv004)
 * @param {string} nhanVien.matKhau - M·∫≠t kh·∫©u (-> lv005)
 * @param {string} nhanVien.ten - T√™n nh√¢n vi√™n (-> lv006)
 * @param {string} nhanVien.quyenHan - Quy·ªÅn h·∫°n (-> lv900)
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m nh√¢n vi√™n
 */
export async function themNhanVien(nhanVien) {
  const payload = {
    table: "lv_lv0007",
    func: "add",
    taiKhoanDN: nhanVien.taiKhoanDN,  // -> lv001
    nguoiThem: nhanVien.nguoiThem,    // -> lv003
    roleQuyen: nhanVien.roleQuyen,    // -> lv004
    matKhau: nhanVien.matKhau,        // -> lv005
    ten: nhanVien.ten,                // -> lv006
    quyenHan: nhanVien.quyenHan       // -> lv900
  };
  return callApiWithAuth(payload);
}

/**
 * C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n
 * @param {Object} nhanVien - Th√¥ng tin nh√¢n vi√™n c·∫ßn c·∫≠p nh·∫≠t
 * @param {string} nhanVien.taiKhoanDN - T√†i kho·∫£n ƒëƒÉng nh·∫≠p (-> lv001)
 * @param {string} nhanVien.nguoiThem - Ng∆∞·ªùi th√™m (-> lv003)
 * @param {string} nhanVien.roleQuyen - Role quy·ªÅn (-> lv004)
 * @param {string} nhanVien.matKhau - M·∫≠t kh·∫©u (-> lv005)
 * @param {string} nhanVien.ten - T√™n nh√¢n vi√™n (-> lv006)
 * @param {string} nhanVien.quyenHan - Quy·ªÅn h·∫°n (-> lv900)
 * @returns {Promise<Object>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
 */
export async function capNhatNhanVien(nhanVien) {
  const payload = {
    table: "lv_lv0007",
    func: "edit",
    taiKhoanDN: nhanVien.taiKhoanDN,  // -> lv001
    nguoiThem: nhanVien.nguoiThem,    // -> lv003
    roleQuyen: nhanVien.roleQuyen,    // -> lv004
    matKhau: nhanVien.matKhau,        // -> lv005
    ten: nhanVien.ten,                // -> lv006
    quyenHan: nhanVien.quyenHan       // -> lv900
  };
  return callApiWithAuth(payload);
}


// ==================== QU·∫¢N L√ù KHU V·ª∞C L√ÄM VI·ªÜC NH√ÇN VI√äN (pm_nc0011) ====================

/**
 * L·∫•y danh s√°ch khu v·ª±c l√†m vi·ªác c·ªßa nh√¢n vi√™n
 * @returns {Promise<Array>} Danh s√°ch khu v·ª±c l√†m vi·ªác
 */
export async function layDanhSachKhuVucLamViec() {
  const payload = {
    table: "pm_nc0011",
    func: "data"
  };
  return callApiWithAuth(payload);
}

/**
 * Th√™m khu v·ª±c l√†m vi·ªác cho nh√¢n vi√™n
 * @param {Object} khuVucLamViec - Th√¥ng tin khu v·ª±c l√†m vi·ªác
 * @param {string} khuVucLamViec.maKhuVuc - M√£ khu v·ª±c
 * @param {string} khuVucLamViec.taiKhoanDN - T√†i kho·∫£n ƒëƒÉng nh·∫≠p nh√¢n vi√™n
 * @param {string} khuVucLamViec.moTa - M√¥ t·∫£
 * @returns {Promise<Object>} K·∫øt qu·∫£ th√™m
 */
export async function themKhuVucLamViec(khuVucLamViec) {
  const payload = {
    table: "pm_nc0011",
    func: "add",
    maKhuVuc: khuVucLamViec.maKhuVuc,
    taiKhoanDN: khuVucLamViec.taiKhoanDN,
    moTa: khuVucLamViec.moTa
  };
  return callApiWithAuth(payload);
}

/**
 * X√≥a khu v·ª±c l√†m vi·ªác c·ªßa nh√¢n vi√™n
 * @param {string} maKhuVuc - M√£ khu v·ª±c
 * @param {string} taiKhoanDN - T√†i kho·∫£n ƒëƒÉng nh·∫≠p nh√¢n vi√™n
 * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
 */
export async function xoaKhuVucLamViec(maKhuVuc, taiKhoanDN) {
  const payload = {
    table: "pm_nc0011",
    func: "delete",
    maKhuVuc: maKhuVuc,
    taiKhoanDN: taiKhoanDN
  };
  return callApiWithAuth(payload);
}

/**
 * L·∫•y khu v·ª±c l√†m vi·ªác c·ªßa m·ªôt nh√¢n vi√™n c·ª• th·ªÉ
 * @param {string} taiKhoanDN - T√†i kho·∫£n ƒëƒÉng nh·∫≠p nh√¢n vi√™n
 * @returns {Promise<Array>} Danh s√°ch khu v·ª±c l√†m vi·ªác c·ªßa nh√¢n vi√™n
 */
export async function layKhuVucLamViecCuaNhanVien(taiKhoanDN) {
  const payload = {
    table: "pm_nc0011",
    func: "layKhuVucLamViecCuaNhanVien",
    taiKhoanDN: taiKhoanDN
  };
  return callApiWithAuth(payload);
}

// ==================== HELPER FUNCTIONS CHO NH√ÇN VI√äN ====================

/**
 * @deprecated S·ª≠ d·ª•ng layThongTinTaiKhoanTheoToken thay th·∫ø
 */
export async function layNhanVienTheoMa(token) {
  return layThongTinTaiKhoanTheoToken(token);
}

/**
 * @deprecated Ch·ª©c nƒÉng n√†y ch∆∞a ƒë∆∞·ª£c implement trong backend
 */
export async function xoaNhanVien(taiKhoanDN) {
  const payload = {
    table: "lv_lv0007",
    func: "delete",
    taiKhoanDN: taiKhoanDN
  };
  return callApiWithAuth(payload);
}

/**
 * @deprecated Ch·ª©c nƒÉng n√†y ch∆∞a ƒë∆∞·ª£c implement trong backend
 */
export async function datLaiMatKhauNhanVien(maNhanVien, matKhauMoi) {
  console.warn("API datLaiMatKhauNhanVien ch∆∞a ƒë∆∞·ª£c implement trong backend");
  return { success: false, message: "Ch·ª©c nƒÉng ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£" };
}

// ==================== TH·ªêNG K√ä (STATISTICS) ====================
export async function layThongKeDoanhThu({ fromDate, toDate }) {
  const payload = {
    table: "statistics",
    func: "revenue",
    fromDate,
    toDate,
  };
  return callApiWithAuth(payload);
}

export async function layThongKeLoaiXe({ fromDate, toDate }) {
  const payload = {
    table: "statistics",
    func: "vehicleTypeCounts",
    fromDate,
    toDate,
  };
  return callApiWithAuth(payload);
}

export async function layTiLeLapDay() {
  const payload = {
    table: "statistics",
    func: "occupancy",
  };
  return callApiWithAuth(payload);
}

// ==================== TH·ªêNG K√ä N√ÇNG CAO ====================

/**
 * L·∫•y th·ªëng k√™ t·ªïng quan h·ªá th·ªëng
 * @returns {Promise<Object>} Th·ªëng k√™ t·ªïng quan
 */
export async function layThongKeTongQuan() {
  try {
    const payload = {
      table: "statistics",
      func: "systemOverview"
    };
    return callApiWithAuth(payload);
  } catch (error) {
    console.error('[API Error] L·ªói l·∫•y th·ªëng k√™ t·ªïng quan:', error);
    return {
      totalCards: 0,
      totalEmployees: 0,
      totalZones: 0,
      totalCameras: 0,
      totalGates: 0,
      totalSessions: 0,
      activeSessionsToday: 0
    };
  }
}

/**
 * L·∫•y th·ªëng k√™ xe trong b√£i theo th·ªùi gian
 * @param {Object} params - Tham s·ªë th·ªëng k√™
 * @returns {Promise<Object>} Th·ªëng k√™ xe trong b√£i
 */
export async function layThongKeXeTrongBai({ fromDate, toDate }) {
  try {
    const payload = {
      table: "statistics", 
      func: "vehiclesInParking",
      fromDate,
      toDate
    };
    return callApiWithAuth(payload);
  } catch (error) {
    console.error('[API Error] L·ªói l·∫•y th·ªëng k√™ xe trong b√£i:', error);
    return { hourlyData: [], totalIn: 0, totalOut: 0 };
  }
}

/**
 * L·∫•y th·ªëng k√™ doanh thu theo t·ª´ng lo·∫°i th·∫ª
 * @param {Object} params - Tham s·ªë th·ªëng k√™
 * @returns {Promise<Object>} Th·ªëng k√™ doanh thu theo lo·∫°i th·∫ª
 */
export async function layThongKeDoanhThuTheoLoaiThe({ fromDate, toDate }) {
  try {
    const payload = {
      table: "statistics",
      func: "revenueByCardType", 
      fromDate,
      toDate
    };
    return callApiWithAuth(payload);
  } catch (error) {
    console.error('[API Error] L·ªói l·∫•y th·ªëng k√™ doanh thu theo lo·∫°i th·∫ª:', error);
    return { cardTypes: [], totalRevenue: 0 };
  }
}

/**
 * L·∫•y th·ªëng k√™ hi·ªáu su·∫•t camera
 * @param {Object} params - Tham s·ªë th·ªëng k√™
 * @returns {Promise<Object>} Th·ªëng k√™ camera
 */
export async function layThongKeHieuSuatCamera({ fromDate, toDate }) {
  try {
    const payload = {
      table: "statistics",
      func: "cameraPerformance",
      fromDate, 
      toDate
    };
    return callApiWithAuth(payload);
  } catch (error) {
    console.error('[API Error] L·ªói l·∫•y th·ªëng k√™ camera:', error);
    return { cameras: [], totalScans: 0, successRate: 0 };
  }
}

/**
 * L·∫•y th·ªëng k√™ theo khu v·ª±c
 * @param {Object} params - Tham s·ªë th·ªëng k√™
 * @returns {Promise<Object>} Th·ªëng k√™ theo khu v·ª±c
 */
export async function layThongKeTheoKhuVuc({ fromDate, toDate }) {
  try {
    const payload = {
      table: "statistics",
      func: "zoneStatistics",
      fromDate,
      toDate
    };
    return callApiWithAuth(payload);
  } catch (error) {
    console.error('[API Error] L·ªói l·∫•y th·ªëng k√™ theo khu v·ª±c:', error);
    return { zones: [], busiest: null };
  }
}

/**
 * L·∫•y th·ªëng k√™ nh√¢n vi√™n ho·∫°t ƒë·ªông
 * @param {Object} params - Tham s·ªë th·ªëng k√™  
 * @returns {Promise<Object>} Th·ªëng k√™ nh√¢n vi√™n
 */
export async function layThongKeNhanVien({ fromDate, toDate }) {
  try {
    const payload = {
      table: "statistics", 
      func: "employeeActivity",
      fromDate,
      toDate
    };
    return callApiWithAuth(payload);
  } catch (error) {
    console.error('[API Error] L·ªói l·∫•y th·ªëng k√™ nh√¢n vi√™n:', error);
    return { 
      totalEmployees: 0,
      activeEmployees: 0,
      byRole: [],
      byStatus: []
    };
  }
}

/**
 * L·∫•y th·ªëng k√™ th·ªùi gian g·ª≠i xe trung b√¨nh
 * @param {Object} params - Tham s·ªë th·ªëng k√™
 * @returns {Promise<Object>} Th·ªëng k√™ th·ªùi gian
 */
export async function layThongKeThoiGianTrungBinh({ fromDate, toDate }) {
  try {
    const payload = {
      table: "statistics",
      func: "averageParkingTime", 
      fromDate,
      toDate
    };
    return callApiWithAuth(payload);
  } catch (error) {
    console.error('[API Error] L·ªói l·∫•y th·ªëng k√™ th·ªùi gian:', error);
    return { averageTime: 0, byVehicleType: [], distribution: [] };
  }
}

/**
 * L·∫•y top th·∫ª s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t
 * @param {Object} params - Tham s·ªë th·ªëng k√™
 * @returns {Promise<Object>} Top th·∫ª
 */
export async function layTopTheSuDung({ fromDate, toDate, limit = 10 }) {
  try {
    const payload = {
      table: "statistics",
      func: "topCards",
      fromDate,
      toDate,
      limit
    };
    return callApiWithAuth(payload);
  } catch (error) {
    console.error('[API Error] L·ªói l·∫•y top th·∫ª:', error);
    return { topCards: [] };
  }
}

/**
 * L·∫•y th·ªëng k√™ l·ªói v√† s·ª± c·ªë
 * @param {Object} params - Tham s·ªë th·ªëng k√™
 * @returns {Promise<Object>} Th·ªëng k√™ l·ªói
 */
export async function layThongKeLoiSuCo({ fromDate, toDate }) {
  try {
    const payload = {
      table: "statistics",
      func: "errorAnalysis",
      fromDate,
      toDate
    };
    return callApiWithAuth(payload);
  } catch (error) {
    console.error('[API Error] L·ªói l·∫•y th·ªëng k√™ l·ªói:', error);
    return { 
      plateErrors: 0,
      cameraErrors: 0, 
      cardErrors: 0,
      systemErrors: 0
    };
  }
}