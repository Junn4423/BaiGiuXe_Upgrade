// Debug script ƒë·ªÉ ki·ªÉm tra h√†m layChinhSachMacDinhChoLoaiPT
// Ch·∫°y trong browser console ƒë·ªÉ debug

console.log(" Testing layChinhSachMacDinhChoLoaiPT function...");

// Test cases
const testCases = [
  { loaiXe: "xe_may", maLoaiPT: "XE_MAY", expected: "CS_XEMAY_4H" },
  { loaiXe: "oto", maLoaiPT: "OT", expected: "CS_OTO_4H" },
  { loaiXe: null, maLoaiPT: "XE_MAY", expected: "CS_XEMAY_4H" },
  { loaiXe: "xe_may", maLoaiPT: null, expected: "CS_XEMAY_4H" },
  { loaiXe: null, maLoaiPT: null, expected: "CS_XEMAY_4H" },
  { loaiXe: "", maLoaiPT: "", expected: "CS_XEMAY_4H" },
  { loaiXe: undefined, maLoaiPT: undefined, expected: "CS_XEMAY_4H" }
];

// H√†m test (copy t·ª´ api.js v√† ch·ªânh s·ª≠a ƒë·ªÉ kh√¥ng g·ªçi API th·∫≠t)
async function testLayChinhSachMacDinhChoLoaiPT(loaiXe, maLoaiPT) {
  console.log(`üîç Testing v·ªõi loai xe: ${loaiXe}, m√£ lo·∫°i PT: ${maLoaiPT}`);
  
  try {
    // Skip API call for testing, go straight to fallback
    console.log(`‚ö†Ô∏è Skipping API call, using fallback logic...`);
    
    // Fallback logic
    let fallbackPolicy = "CS_XEMAY_4H"; // M·∫∑c ƒë·ªãnh cho xe m√°y
    
    if (loaiXe === "oto" || maLoaiPT === "OT") {
      fallbackPolicy = "CS_OTO_4H";
    } else if (loaiXe === "xe_may" || maLoaiPT === "XE_MAY") {
      fallbackPolicy = "CS_XEMAY_4H";
    }
    
    // ƒê·∫£m b·∫£o fallback policy kh√¥ng bao gi·ªù l√† null/empty
    if (!fallbackPolicy || fallbackPolicy.trim() === '') {
      fallbackPolicy = "CS_XEMAY_4H"; // M·∫∑c ƒë·ªãnh cu·ªëi c√πng
      console.log(`üîß S·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh cu·ªëi c√πng: ${fallbackPolicy}`);
    }
    
    return fallbackPolicy;
    
  } catch (error) {
    console.error("‚ùå L·ªói khi test:", error);
    
    // Fallback cu·ªëi c√πng
    let fallbackPolicy = "CS_XEMAY_4H"; // M·∫∑c ƒë·ªãnh
    
    if (loaiXe === "oto" || maLoaiPT === "OT") {
      fallbackPolicy = "CS_OTO_4H";
    } else if (loaiXe === "xe_may" || maLoaiPT === "XE_MAY") {
      fallbackPolicy = "CS_XEMAY_4H";
    }
    
    // ƒê·∫£m b·∫£o kh√¥ng bao gi·ªù tr·∫£ v·ªÅ null/empty
    if (!fallbackPolicy || fallbackPolicy.trim() === '') {
      fallbackPolicy = "CS_XEMAY_4H";
    }
    
    return fallbackPolicy;
  }
}

// Ch·∫°y t·∫•t c·∫£ test cases
async function runAllTests() {
  console.log("üöÄ Starting all tests...");
  
  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`\n--- Test ${i + 1}/${testCases.length} ---`);
    
    try {
      const result = await testLayChinhSachMacDinhChoLoaiPT(testCase.loaiXe, testCase.maLoaiPT);
      const success = result === testCase.expected;
      
      console.log(`Input: loaiXe="${testCase.loaiXe}", maLoaiPT="${testCase.maLoaiPT}"`);
      console.log(`Expected: "${testCase.expected}"`);
      console.log(`Got: "${result}"`);
      console.log(`Result: ${success ? '‚úÖ PASS' : '‚ùå FAIL'}`);
      
      if (!success) {
        console.error(`‚ùå Test failed for case ${i + 1}`);
      }
    } catch (error) {
      console.error(`‚ùå Test ${i + 1} threw error:`, error);
    }
  }
  
  console.log("\nüèÅ All tests completed!");
}

// Ch·∫°y tests
runAllTests();

// Export ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ ngo√†i
window.testPricingPolicy = {
  runAllTests,
  testLayChinhSachMacDinhChoLoaiPT,
  testCases
};

console.log("üí° You can also call window.testPricingPolicy.runAllTests() manually");
