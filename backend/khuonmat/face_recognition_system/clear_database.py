#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script x√≥a d·ªØ li·ªáu trong database face recognition
C·∫¢NH B√ÅO: Script n√†y s·∫Ω x√≥a t·∫•t c·∫£ d·ªØ li·ªáu nh√¢n vi√™n v√† ƒëi·ªÉm danh!
"""

import os
from datetime import datetime
from models.database import db, User, Attendance
from app import app

def backup_database():
    """T·∫°o backup database tr∆∞·ªõc khi x√≥a"""
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = f"backup_before_clear_{timestamp}.sql"
        
        # Backup SQLite database
        db_path = "attendance.db"
        if os.path.exists(db_path):
            backup_path = f"backups/{backup_file}"
            os.makedirs("backups", exist_ok=True)
            
            import shutil
            shutil.copy2(db_path, backup_path)
            print(f"‚úÖ Backup t·∫°o th√†nh c√¥ng: {backup_path}")
            return backup_path
        else:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file database ƒë·ªÉ backup")
            return None
            
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o backup: {str(e)}")
        return None

def clear_attendance_data():
    """X√≥a t·∫•t c·∫£ d·ªØ li·ªáu ƒëi·ªÉm danh"""
    try:
        count = Attendance.query.count()
        if count > 0:
            Attendance.query.delete()
            db.session.commit()
            print(f"‚úÖ ƒê√£ x√≥a {count} b·∫£n ghi ƒëi·ªÉm danh")
        else:
            print("‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh ƒë·ªÉ x√≥a")
    except Exception as e:
        print(f"‚ùå L·ªói x√≥a d·ªØ li·ªáu ƒëi·ªÉm danh: {str(e)}")
        db.session.rollback()

def clear_user_data():
    """X√≥a t·∫•t c·∫£ d·ªØ li·ªáu nh√¢n vi√™n"""
    try:
        count = User.query.count()
        if count > 0:
            User.query.delete()
            db.session.commit()
            print(f"‚úÖ ƒê√£ x√≥a {count} nh√¢n vi√™n")
        else:
            print("‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu nh√¢n vi√™n ƒë·ªÉ x√≥a")
    except Exception as e:
        print(f"‚ùå L·ªói x√≥a d·ªØ li·ªáu nh√¢n vi√™n: {str(e)}")
        db.session.rollback()

def get_database_stats():
    """Hi·ªÉn th·ªã th·ªëng k√™ database hi·ªán t·∫°i"""
    try:
        user_count = User.query.count()
        attendance_count = Attendance.query.count()
        
        print(f"üìä TH·ªêNG K√ä DATABASE HI·ªÜN T·∫†I:")
        print(f"   üë• Nh√¢n vi√™n: {user_count}")
        print(f"   üìù B·∫£n ghi ƒëi·ªÉm danh: {attendance_count}")
        
        if user_count > 0:
            print(f"\nüìã DANH S√ÅCH NH√ÇN VI√äN:")
            users = User.query.limit(10).all()
            for user in users:
                print(f"   - {user.employee_id}: {user.name} ({user.department or 'N/A'})")
            if user_count > 10:
                print(f"   ... v√† {user_count - 10} nh√¢n vi√™n kh√°c")
        
        return user_count, attendance_count
        
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y th·ªëng k√™: {str(e)}")
        return 0, 0

def clear_static_faces():
    """X√≥a ·∫£nh trong th∆∞ m·ª•c static/faces n·∫øu c√≥"""
    try:
        faces_dir = "static/faces"
        if os.path.exists(faces_dir):
            files = os.listdir(faces_dir)
            image_files = [f for f in files if f.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.gif'))]
            
            if image_files:
                for file in image_files:
                    file_path = os.path.join(faces_dir, file)
                    os.remove(file_path)
                print(f"‚úÖ ƒê√£ x√≥a {len(image_files)} file ·∫£nh trong static/faces")
            else:
                print("‚ÑπÔ∏è Kh√¥ng c√≥ file ·∫£nh trong static/faces")
        else:
            print("‚ÑπÔ∏è Th∆∞ m·ª•c static/faces kh√¥ng t·ªìn t·∫°i")
            
    except Exception as e:
        print(f"‚ùå L·ªói x√≥a ·∫£nh static: {str(e)}")

def reset_database_sequences():
    """Reset auto-increment sequences"""
    try:
        # ƒê·ªëi v·ªõi SQLite, ch√∫ng ta c·∫ßn reset sqlite_sequence
        from sqlalchemy import text
        db.session.execute(text("DELETE FROM sqlite_sequence WHERE name IN ('users', 'attendance')"))
        db.session.commit()
        print("‚úÖ ƒê√£ reset auto-increment sequences")
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ reset sequences: {str(e)}")

def main():
    """H√†m ch√≠nh"""
    print("üóëÔ∏è  FACE RECOGNITION DATABASE CLEANER")
    print("Script x√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong h·ªá th·ªëng face recognition")
    print("=" * 60)
    
    with app.app_context():
        # Hi·ªÉn th·ªã th·ªëng k√™ hi·ªán t·∫°i
        print("\n1Ô∏è‚É£ KI·ªÇM TRA D·ªÆ LI·ªÜU HI·ªÜN T·∫†I:")
        user_count, attendance_count = get_database_stats()
        
        if user_count == 0 and attendance_count == 0:
            print("\n‚úÖ Database ƒë√£ s·∫°ch, kh√¥ng c·∫ßn x√≥a g√¨!")
            return
        
        # X√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng
        print(f"\n‚ö†Ô∏è  C·∫¢NH B√ÅO: Script n√†y s·∫Ω x√≥a:")
        print(f"   - {user_count} nh√¢n vi√™n")
        print(f"   - {attendance_count} b·∫£n ghi ƒëi·ªÉm danh")
        print(f"   - T·∫•t c·∫£ ·∫£nh trong static/faces")
        print(f"   - Reset auto-increment sequences")
        
        print(f"\n‚ùó H√ÄNH ƒê·ªòNG N√ÄY KH√îNG TH·ªÇ HO√ÄN T√ÅC!")
        
        confirm1 = input(f"\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ d·ªØ li·ªáu? (yes/no): ").strip().lower()
        if confirm1 != 'yes':
            print("H·ªßy b·ªè thao t√°c x√≥a.")
            return
        
        confirm2 = input(f"Nh·∫≠p 'DELETE' ƒë·ªÉ x√°c nh·∫≠n: ").strip()
        if confirm2 != 'DELETE':
            print("H·ªßy b·ªè thao t√°c x√≥a.")
            return
        
        # T·∫°o backup
        print(f"\n2Ô∏è‚É£ T·∫†O BACKUP:")
        backup_path = backup_database()
        
        # B·∫Øt ƒë·∫ßu x√≥a d·ªØ li·ªáu
        print(f"\n3Ô∏è‚É£ B·∫ÆT ƒê·∫¶U X√ìA D·ªÆ LI·ªÜU:")
        
        # X√≥a d·ªØ li·ªáu ƒëi·ªÉm danh tr∆∞·ªõc (v√¨ c√≥ foreign key)
        clear_attendance_data()
        
        # X√≥a d·ªØ li·ªáu nh√¢n vi√™n
        clear_user_data()
        
        # X√≥a ·∫£nh static
        clear_static_faces()
        
        # Reset sequences
        reset_database_sequences()
        
        print(f"\n4Ô∏è‚É£ KI·ªÇM TRA K·∫æT QU·∫¢:")
        get_database_stats()
        
        print(f"\n" + "=" * 60)
        print(f"‚úÖ HO√ÄN T·∫§T X√ìA D·ªÆ LI·ªÜU!")
        if backup_path:
            print(f"üíæ Backup l∆∞u t·∫°i: {backup_path}")
        print(f"üöÄ Database ƒë√£ s·∫µn s√†ng cho import m·ªõi!")
        print(f"üí° Ch·∫°y: python import_employees.py ƒë·ªÉ import t·ª´ ERP")

if __name__ == "__main__":
    main() 