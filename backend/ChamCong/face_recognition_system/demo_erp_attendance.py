#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demo t√≠ch h·ª£p ERP - Ch·∫•m c√¥ng v√†o b·∫£ng tc_lv0012
"""

import sys
import os
from datetime import datetime
from flask import Flask

# Th√™m th∆∞ m·ª•c g·ªëc v√†o sys.path ƒë·ªÉ import modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app
from models.database import db, User
from models.erp_integration import erp_attendance

def demo_attendance_integration():
    """Demo t√≠ch h·ª£p ch·∫•m c√¥ng ERP"""
    print("üéØ DEMO T√çCH H·ª¢P CH·∫§M C√îNG ERP")
    print("=" * 60)
    
    with app.app_context():
        # L·∫•y danh s√°ch nh√¢n vi√™n
        users = User.query.limit(3).all()
        
        if not users:
            print("‚ùå Kh√¥ng c√≥ nh√¢n vi√™n n√†o trong h·ªá th·ªëng!")
            print("üí° H√£y ƒëƒÉng k√Ω nh√¢n vi√™n tr∆∞·ªõc khi ch·∫°y demo")
            return
        
        print(f"üìã T√¨m th·∫•y {len(users)} nh√¢n vi√™n ƒë·ªÉ demo:")
        for user in users:
            print(f"   - {user.employee_id}: {user.name} ({user.department or 'N/A'})")
        
        print(f"\nüïê TH·ª∞C HI·ªÜN CH·∫§M C√îNG DEMO...")
        print("-" * 40)
        
        success_count = 0
        total_count = len(users)
        
        for user in users:
            print(f"\nüë§ Ch·∫•m c√¥ng cho: {user.name} (ID: {user.employee_id})")
            
            # Ki·ªÉm tra ch·∫•m c√¥ng g·∫ßn ƒë√¢y
            has_recent = erp_attendance.check_recent_attendance(user.employee_id, minutes=5)
            if has_recent:
                print(f"   ‚è∞ ƒê√£ ch·∫•m c√¥ng trong 5 ph√∫t g·∫ßn ƒë√¢y - B·ªè qua")
                continue
            
            # Th·ª±c hi·ªán ch·∫•m c√¥ng
            current_time = datetime.now()
            success = erp_attendance.create_attendance_record(
                employee_id=user.employee_id,
                attendance_time=current_time
            )
            
            if success:
                print(f"   ‚úÖ Ch·∫•m c√¥ng th√†nh c√¥ng - {current_time.strftime('%H:%M:%S')}")
                success_count += 1
                
                # Hi·ªÉn th·ªã l·ªãch s·ª≠ ch·∫•m c√¥ng g·∫ßn ƒë√¢y
                history = erp_attendance.get_attendance_history(user.employee_id, days=1)
                if history:
                    latest = history[0]
                    print(f"   üìä L·ªãch s·ª≠: {latest['date']} {latest['time']} - {latest['source']}")
            else:
                print(f"   ‚ùå L·ªói ch·∫•m c√¥ng")
        
        print(f"\nüèÅ K·∫æT QU·∫¢ DEMO:")
        print(f"   ‚úÖ Ch·∫•m c√¥ng th√†nh c√¥ng: {success_count}/{total_count}")
        print(f"   üìä T·ª∑ l·ªá th√†nh c√¥ng: {(success_count/total_count*100):.1f}%")
        
        if success_count > 0:
            print(f"\nüíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ghi v√†o:")
            print(f"   - B·∫£ng n·ªôi b·ªô: attendance (SQLite)")
            print(f"   - B·∫£ng ERP: tc_lv0012 (MySQL)")
            print(f"   - C·∫•u tr√∫c: lv001={users[0].employee_id}, lv002=ng√†y, lv003=gi·ªù, lv004=IN, lv005=Camera, lv099=192.168.1.89")

def check_erp_data():
    """Ki·ªÉm tra d·ªØ li·ªáu trong ERP"""
    print(f"\nüîç KI·ªÇM TRA D·ªÆ LI·ªÜU ERP")
    print("=" * 60)
    
    with app.app_context():
        users = User.query.limit(5).all()
        
        total_records = 0
        for user in users:
            history = erp_attendance.get_attendance_history(user.employee_id, days=7)
            if history:
                print(f"\nüë§ {user.name} ({user.employee_id}):")
                for record in history[:3]:  # Hi·ªÉn th·ªã 3 b·∫£n ghi g·∫ßn nh·∫•t
                    print(f"   üìÖ {record['date']} {record['time']} - {record['source']} (IP: {record['camera_ip']})")
                if len(history) > 3:
                    print(f"   ... v√† {len(history) - 3} b·∫£n ghi kh√°c")
                total_records += len(history)
        
        print(f"\nüìä T·ªïng c·ªông: {total_records} b·∫£n ghi ch·∫•m c√¥ng trong ERP")

def main():
    """H√†m ch√≠nh"""
    print("üè¢ DEMO H·ªÜ TH·ªêNG CH·∫§M C√îNG T√çCH H·ª¢P ERP")
    print("=" * 70)
    print("Demo n√†y s·∫Ω:")
    print("- L·∫•y danh s√°ch nh√¢n vi√™n t·ª´ h·ªá th·ªëng")
    print("- Th·ª±c hi·ªán ch·∫•m c√¥ng v√†o b·∫£ng ERP tc_lv0012") 
    print("- Hi·ªÉn th·ªã k·∫øt qu·∫£ v√† l·ªãch s·ª≠")
    print()
    
    # Ki·ªÉm tra k·∫øt n·ªëi ERP tr∆∞·ªõc
    if not erp_attendance.test_connection():
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ERP! Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.")
        return
    
    # Ch·∫°y demo
    demo_attendance_integration()
    
    # Ki·ªÉm tra d·ªØ li·ªáu
    check_erp_data()
    
    print(f"\n‚ú® HO√ÄN TH√ÄNH DEMO!")
    print("üîó H·ªá th·ªëng ch·∫•m c√¥ng ƒë√£ t√≠ch h·ª£p th√†nh c√¥ng v·ªõi ERP")
    print("üìã D·ªØ li·ªáu ch·∫•m c√¥ng s·∫Ω ƒë∆∞·ª£c ghi v√†o c·∫£ SQLite (n·ªôi b·ªô) v√† MySQL (ERP)")

if __name__ == "__main__":
    main() 