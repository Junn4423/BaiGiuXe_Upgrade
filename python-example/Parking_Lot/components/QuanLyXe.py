from datetime import datetime
from server import api
import models
from typing import Optional
import time
from pydantic import BaseModel

# 1. Lo·∫°i Ph∆∞∆°ng Ti·ªán (pm_nc0001)
class LoaiPhuongTien(BaseModel):
    maLoaiPT: str
    tenLoaiPT: str
    moTa: Optional[str] = None

# 2. Ph∆∞∆°ng Ti·ªán (pm_nc0002)
class PhuongTien(BaseModel):
    bienSo: str
    maLoaiPT: str

# 3. Th·∫ª RFID (pm_nc0003)
class TheRFID(BaseModel):
    uidThe: str
    loaiThe: str
    trangThai: str
    ngayPhatHanh: str

# 4. Khu V·ª±c ƒê·ªó Xe (pm_nc0004)
class KhuVuc(BaseModel):
    maKhuVuc: str
    tenKhuVuc: str
    moTa: Optional[str] = None

# 5. Ch·ªó ƒê·ªó Xe (pm_nc0005)
class ChoDo(BaseModel):
    maChoDo: str
    maKhuVuc: str
    trangThai: str
    tenKhuVuc: Optional[str] = None 


#9. Phi√™n g·ª≠i xe (pm_nc0009)
class PhienGuiXe(BaseModel):
    maPhien: Optional[str] = None   # Cho ph√©p None
    uidThe: str
    bienSo: str
    viTriGui: Optional[str] = None
    chinhSach: str
    congVao: str
    gioVao: str
    anhVao: str
    trangThai: Optional[str] = None
    congRa: Optional[str] = None
    gioRa: Optional[str] = None
    phutGui: Optional[int] = None
    anhRa: Optional[str] = None
    phi: Optional[float] = None
    anhMatVao: str = ""
    anhMatRa: Optional[str] = None
    # C√°c tr∆∞·ªùng backend/log b·ªï sung:
    camera_id: Optional[str] = None
    plate_match: Optional[int] = None
    plate: Optional[str] = None

# 10. Nh·∫≠t k√Ω g·ª≠i xe (pm_nc0010)
class NhatKyGuiXe(BaseModel):
    id: Optional[int] = None
    session_id: str
    camera_id: Optional[str] = None
    time: str
    image_path: Optional[str] = None
    plate_match: Optional[int] = None
    direction: str # 'entry' or 'exit'

class QuanLyXe:
    def __init__(self):
        self._phien_gui_xe_dang_gui = {}  # theo m√£ th·∫ª
        self.ui = None

    def dat_ui(self, ui):
        self.ui = ui

    def xu_ly_xe_vao(self, ma_the, duong_dan_anh, bien_so, chinh_sach, cong_vao, camera_id, duong_dan_face_vao=None):
        # T·ª± ƒë·ªông x√°c ƒë·ªãnh m√£ ch√≠nh s√°ch n·∫øu ch∆∞a c√≥
        if not chinh_sach and self.ui:
            if self.ui.che_do_hien_tai == "vao":
                if self.ui.loai_xe_hien_tai == "xe_may":
                    chinh_sach = "CS_XEMAY_4H"
                elif self.ui.loai_xe_hien_tai == "oto":
                    chinh_sach = "CS_OTO_4H"
        gio_vao = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        session = models.PhienGuiXe(
            uidThe=ma_the,
            bienSo=bien_so or "",
            viTriGui=None,
            chinhSach=chinh_sach,
            congVao=cong_vao,
            gioVao=gio_vao,
            anhVao=duong_dan_anh or "", 
            anhMatVao=duong_dan_face_vao or "",            camera_id=camera_id
        )
        api_result = api.themPhienGuiXe(session)
        
        # Ki·ªÉm tra k·∫øt qu·∫£ API ƒë√∫ng c√°ch
        success = False
        error_message = ""
        if isinstance(api_result, dict):
            success = api_result.get("success", False)
            error_message = api_result.get("message", "")
        else:
            # Fallback cho tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ format c≈© (boolean)
            success = bool(api_result)
        
        if success:
            self._phien_gui_xe_dang_gui[ma_the] = session
            
            # C·∫≠p nh·∫≠t th√¥ng tin xe v√†o UI
            if self.ui:
                du_lieu_xe_vao = {
                    "bien_so": bien_so or "",
                    "gio_vao": gio_vao,
                    "gio_ra": "",  # Ch∆∞a c√≥
                    "ma_the": ma_the,
                    "thoi_gian_do": "",  # Ch∆∞a c√≥
                    "phi": "",  # Ch∆∞a c√≥
                    "chinh_sach": chinh_sach or "",
                    "cong_vao": cong_vao,
                    "cong_ra": "",  # Ch∆∞a c√≥                "trang_thai": "Trong b√£i",
                    "loai_xe": self.ui.loai_xe_hien_tai if self.ui else "xe_may"
                }
                # C·∫≠p nh·∫≠t th√¥ng tin xe l√™n UI
                self.ui.cap_nhat_thong_tin_xe(du_lieu_xe_vao)
        
        if self.ui:
            self.ui.cap_nhat_trang_thai_xe_vao(ma_the, bien_so, success, error_message)
        
        # Return response dict thay v√¨ ch·ªâ boolean ƒë·ªÉ DauDocThe c√≥ th·ªÉ ki·ªÉm tra l·ªói
        if success:
            return {"success": True, "message": "Xe v√†o th√†nh c√¥ng"}
        else:
            return {"success": False, "message": error_message or "L·ªói xe v√†o kh√¥ng x√°c ƒë·ªãnh"}

    def xu_ly_xe_ra(self, ma_the, duong_dan_anh_ra, cong_ra, camera_id, plate_match=None, bien_so_ra=None, duong_dan_face_ra=None):
        print("Xu ly xe ra", ma_the, cong_ra, camera_id, plate_match, bien_so_ra)
        
        try:
            # B∆∞·ªõc 1: Load phi√™n g·ª≠i xe theo m√£ th·∫ª
            print(f"üîç DEBUG: G·ªçi API loadPhienGuiXeTheoMaThe cho m√£ th·∫ª: {ma_the}")
            response = api.loadPhienGuiXeTheoMaThe(ma_the)
            
            print(f"üîç DEBUG: API Response type: {type(response)}")
            print(f"üîç DEBUG: API Response: {response}")
            
            # X·ª≠ l√Ω response t·ª´ API
            session = None
            if isinstance(response, list) and len(response) > 0:
                session = response[0]
                print(f"üîç DEBUG: L·∫•y session t·ª´ list: {session}")
            elif isinstance(response, dict):
                if response.get("success") and response.get("data"):
                    data = response["data"]
                    if isinstance(data, list) and len(data) > 0:
                        session = data[0]
                    else:
                        session = data
                else:
                    msg = response.get("message", "Kh√¥ng t√¨m th·∫•y phi√™n g·ª≠i xe")
                    print(f"‚ùå API tr·∫£ v·ªÅ l·ªói: {msg}")
                    if self.ui:
                        self.ui.cap_nhat_trang_thai_xe_ra(ma_the, "", False, msg)
                    return {"success": False, "message": msg}
            elif hasattr(response, '__dict__'):
                session = response
            else:
                msg = "Kh√¥ng t√¨m th·∫•y phi√™n g·ª≠i xe ho·∫∑c format response kh√¥ng ƒë√∫ng"
                print(f"‚ùå {msg}")
                if self.ui:
                    self.ui.cap_nhat_trang_thai_xe_ra(ma_the, "", False, msg)
                return {"success": False, "message": msg}
            
            if not session:
                msg = "D·ªØ li·ªáu phi√™n g·ª≠i xe tr·ªëng"
                print(f"‚ùå {msg}")
                if self.ui:
                    self.ui.cap_nhat_trang_thai_xe_ra(ma_the, "", False, msg)
                return {"success": False, "message": msg}
            
            print(f"üîç DEBUG: Session object: {session}")
            
            # L·∫•y th√¥ng tin t·ª´ session object
            bien_so_vao = getattr(session, 'bienSo', '') or ''
            anh_vao_url = getattr(session, 'anhVao', '') or ''
            ma_phien = getattr(session, 'maPhien', '') or ''
            
            print(f"üîç DEBUG: Bi·ªÉn s·ªë v√†o = '{bien_so_vao}', Bi·ªÉn s·ªë ra = '{bien_so_ra}'")
            print(f"üîç DEBUG: URL ·∫£nh v√†o = '{anh_vao_url}'")
            print(f"üîç DEBUG: M√£ phi√™n = '{ma_phien}'")
            
            # Hi·ªÉn th·ªã ·∫£nh xe v√†o ngay l·∫≠p t·ª©c
            if self.ui and anh_vao_url:
                self.ui.hien_thi_anh_xe_vao_trong_xac_nhan_ra(anh_vao_url, bien_so_vao, ma_the)
            
            # Ki·ªÉm tra bi·ªÉn s·ªë c√≥ kh·ªõp kh√¥ng
            bien_so_khop = self.kiem_tra_bien_so_khop(bien_so_vao, bien_so_ra)
            print(f"üîç DEBUG: K·∫øt qu·∫£ ki·ªÉm tra kh·ªõp = {bien_so_khop}")
            
            if not bien_so_khop and self.ui:
                print("üö® Hi·ªÉn th·ªã dialog l·ªói bi·ªÉn s·ªë")
                ket_qua = self.xu_ly_loi_bien_so(ma_the, bien_so_vao, bien_so_ra, duong_dan_anh_ra, duong_dan_face_ra)
                print(f"üîç DEBUG: K·∫øt qu·∫£ dialog = {ket_qua}")
                
                if isinstance(ket_qua, str) and ket_qua.startswith("xac_nhan:"):
                    bien_so_ra = ket_qua.split(":", 1)[1]
                    print(f"üîç DEBUG: Bi·ªÉn s·ªë m·ªõi t·ª´ dialog = {bien_so_ra}")
                    bien_so_khop = True  # Ng∆∞·ªùi d√πng ƒë√£ x√°c nh·∫≠n
                elif ket_qua == "huy":
                    return {"success": False, "message": "Ng∆∞·ªùi d√πng h·ªßy b·ªè"}
                else:
                    return {"success": False, "message": "X·ª≠ l√Ω l·ªói bi·ªÉn s·ªë th·∫•t b·∫°i"}
            
            # B∆∞·ªõc 2: C·∫≠p nh·∫≠t phi√™n g·ª≠i xe (xe ra)
            thoi_gian_hien_tai = datetime.now()
            session_update = models.PhienGuiXe(
                maPhien=ma_phien,
                uidThe=ma_the,
                bienSo=bien_so_vao,
                viTriGui=getattr(session, 'viTriGui', None),
                chinhSach=getattr(session, 'chinhSach', ''),
                congVao=getattr(session, 'congVao', ''),
                gioVao=getattr(session, 'gioVao', ''),
                anhVao=getattr(session, 'anhVao', ''),
                anhMatVao=getattr(session, 'anhMatVao', ''),
                trangThai='DA_RA',
                congRa=cong_ra,
                gioRa=thoi_gian_hien_tai.strftime("%Y-%m-%d %H:%M:%S"),
                anhRa=duong_dan_anh_ra,
                anhMatRa=duong_dan_face_ra or "",
                camera_id=camera_id,
                plate_match=1 if bien_so_khop else 0,
                plate=bien_so_ra
            )
            
            print(f"üîç DEBUG: C·∫≠p nh·∫≠t phi√™n g·ª≠i xe: {session_update}")
            api_result = api.capNhatPhienGuiXe(session_update)
            
            # Ki·ªÉm tra k·∫øt qu·∫£ API
            success = False
            error_message = ""
            if isinstance(api_result, dict):
                success = api_result.get("success", False)
                error_message = api_result.get("message", "")
            else:
                success = bool(api_result)
            
            if success:
                print("‚úÖ C·∫≠p nh·∫≠t xe ra th√†nh c√¥ng, b·∫Øt ƒë·∫ßu t√≠nh ph√≠...")
                
                # B∆∞·ªõc 3: T√≠nh ph√≠ g·ª≠i xe
                print(f"üîç DEBUG (QuanLyXe.xu_ly_xe_ra): G·ªçi tinhPhiGuiXe cho m√£ phi√™n: {ma_phien}")
                fee_result = api.tinhPhiGuiXe(ma_phien)
                print(f"üîç DEBUG (QuanLyXe.xu_ly_xe_ra): K·∫øt qu·∫£ tinhPhiGuiXe: {fee_result}")
                
                calculated_fee = None
                if fee_result.get("success"):
                    calculated_fee = fee_result.get("phi", 0)
                    print(f"‚úÖ T√≠nh ph√≠ th√†nh c√¥ng: {calculated_fee}")
                else:
                    print(f"‚ö†Ô∏è L·ªói t√≠nh ph√≠: {fee_result.get('message')}")
                
                # B∆∞·ªõc 4: Load l·∫°i d·ªØ li·ªáu ho√†n ch·ªânh t·ª´ server, truy·ªÅn k√®m ph√≠ v√† gi·ªù ra ƒë√£ t√≠nh
                # (L∆∞u √Ω: gioRa trong session_update l√† th·ªùi gian th·ª±c xe ra, kh√¥ng ph·∫£i t·ª´ DB)
                self.load_va_hien_thi_du_lieu_xe_ra(ma_the, calculated_fee=calculated_fee, actual_gio_ra=thoi_gian_hien_tai.strftime("%Y-%m-%d %H:%M:%S"))
                
                print(f"üîç DEBUG (QuanLyXe.xu_ly_xe_ra): Ho√†n t·∫•t x·ª≠ l√Ω xe ra cho m√£ th·∫ª {ma_the}.")
                
                return {"success": True, "message": "Xe ra th√†nh c√¥ng"}
            else:
                msg = error_message or "L·ªói c·∫≠p nh·∫≠t phi√™n g·ª≠i xe"
                if self.ui:
                    self.ui.cap_nhat_trang_thai_xe_ra(ma_the, bien_so_vao, False, msg)
                return {"success": False, "message": msg}
                
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω xe ra: {e}")
            import traceback
            traceback.print_exc()
            if self.ui:
                self.ui.cap_nhat_trang_thai_xe_ra(ma_the, "", False, str(e))
            return {"success": False, "message": str(e)}

    def load_va_hien_thi_du_lieu_xe_ra(self, ma_the, calculated_fee: Optional[float] = None, actual_gio_ra: Optional[str] = None):
        """Load v√† hi·ªÉn th·ªã d·ªØ li·ªáu xe ra"""
        try:
            print(f"üîç DEBUG: B·∫Øt ƒë·∫ßu load d·ªØ li·ªáu ho√†n ch·ªânh cho m√£ th·∫ª {ma_the}")
            print(f"üîç DEBUG: Ph√≠ ƒë∆∞·ª£c t√≠nh to√°n truy·ªÅn v√†o: {calculated_fee}, Gi·ªù ra th·ª±c t·∫ø truy·ªÅn v√†o: {actual_gio_ra}")
            
            # G·ªçi API l·∫•y d·ªØ li·ªáu phi√™n g·ª≠i xe
            response = api.loadPhienGuiXeTheoMaThe_XeRa(ma_the)
            
            # X·ª≠ l√Ω response
            session = None
            if isinstance(response, list) and len(response) > 0:
                session = response[0]
            elif isinstance(response, dict):
                if response.get("success") and response.get("data"):
                    data = response["data"]
                    if isinstance(data, list) and len(data) > 0:
                        session = data[0]
                    else:
                        session = data
                else:
                    msg = response.get("message", "L·ªói load d·ªØ li·ªáu t·ª´ server")
                    print(f"‚ùå Load d·ªØ li·ªáu th·∫•t b·∫°i: {msg}")
                    if self.ui:
                        self.ui.cap_nhat_trang_thai_xe_ra(ma_the, "", False, msg)
                    return
            elif hasattr(response, '__dict__'):
                session = response
            else:
                msg = "Kh√¥ng c√≥ response t·ª´ server ho·∫∑c format kh√¥ng ƒë√∫ng"
                print(f"‚ùå Load d·ªØ li·ªáu th·∫•t b·∫°i: {msg}")
                if self.ui:
                    self.ui.cap_nhat_trang_thai_xe_ra(ma_the, "", False, msg)
                return

            if not session:
                print("‚ùå Kh√¥ng t√¨m th·∫•y phi√™n g·ª≠i xe")
                if self.ui:
                    self.ui.cap_nhat_trang_thai_xe_ra(ma_the, "", False, "Kh√¥ng t√¨m th·∫•y phi√™n g·ª≠i xe")
                return

            print(f"üîç DEBUG: Session object nh·∫≠n ƒë∆∞·ª£c: {session}")
            
            # Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ session
            print("üîç DEBUG: Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ session:")
            print(f"  - Bi·ªÉn s·ªë: {getattr(session, 'bienSo', '')}")
            print(f"  - Gi·ªù v√†o: {getattr(session, 'gioVao', '')}")
            print(f"  - Gi·ªù ra: {getattr(session, 'gioRa', '')}")
            print(f"  - Ph√≠: {getattr(session, 'phi', '')}")
            
            # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang format UI, ∆∞u ti√™n ph√≠ v√† gi·ªù ra ƒë∆∞·ª£c truy·ªÅn v√†o
            du_lieu_xe = self.chuyen_doi_session_object_sang_ui(session, override_phi=calculated_fee, override_gio_ra=actual_gio_ra)
            print(f"üîç DEBUG (QuanLyXe.load_va_hien_thi_du_lieu_xe_ra): D·ªØ li·ªáu UI ƒë∆∞·ª£c t·∫°o: {du_lieu_xe}")
            
            if self.ui:
                print(f"üîç DEBUG: C·∫≠p nh·∫≠t UI v·ªõi d·ªØ li·ªáu: {du_lieu_xe}")
                
                # C·∫≠p nh·∫≠t th√¥ng tin xe l√™n UI
                self.ui.cap_nhat_thong_tin_xe(du_lieu_xe)
                
                # C·∫≠p nh·∫≠t danh s√°ch xe
                self.cap_nhat_xe_trong_danh_sach(du_lieu_xe)
                self.ui.cap_nhat_danh_sach_xe(du_lieu_xe, la_moi=False)
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng
                self.ui.cap_nhat_trang_thai_xe_ra(ma_the, du_lieu_xe["bien_so"], True, "Xe ra th√†nh c√¥ng")
                
                # **HI·ªÇN TH·ªä ·∫¢NH V√ÄO SAU KHI XE RA TH√ÄNH C√îNG**
                # L·∫•y URL ·∫£nh v√†o v√† ·∫£nh m·∫∑t v√†o t·ª´ session
                anh_vao_url = getattr(session, 'anhVao', '') or ''
                anh_mat_vao_url = getattr(session, 'anhMatVao', '') or ''
                
                print(f"üéØ G·ªçi hi·ªÉn th·ªã ·∫£nh v√†o sau xe ra th√†nh c√¥ng - Xe: {anh_vao_url}, Face: {anh_mat_vao_url}")
                
                # G·ªçi method hi·ªÉn th·ªã ·∫£nh v√†o tr√™n camera frames
                self.ui.hien_thi_anh_vao_sau_xe_ra_thanh_cong(anh_vao_url, anh_mat_vao_url)
                
                # ƒê·∫∑t timer kh√¥i ph·ª•c camera sau 3 gi√¢y
                self.ui.root.after(3000, self.ui.khoi_phuc_live_camera_feeds)
                
                print(f"‚úÖ ƒê√£ load v√† hi·ªÉn th·ªã d·ªØ li·ªáu ho√†n ch·ªânh cho m√£ th·∫ª {ma_the}")
            
        except Exception as e:
            print(f"‚ùå L·ªói load v√† hi·ªÉn th·ªã d·ªØ li·ªáu: {e}")
            import traceback
            traceback.print_exc()
            if self.ui:
                self.ui.cap_nhat_trang_thai_xe_ra(ma_the, "", False, f"L·ªói load d·ªØ li·ªáu: {str(e)}")

    def chuyen_doi_session_object_sang_ui(self, session, override_phi: Optional[float] = None, override_gio_ra: Optional[str] = None):
        """Chuy·ªÉn ƒë·ªïi session object t·ª´ API response sang format UI"""
        try:
            # L·∫•y d·ªØ li·ªáu t·ª´ session object s·ª≠ d·ª•ng getattr
            gio_vao_str = getattr(session, 'gioVao', '') or ''
            gio_ra_str = override_gio_ra if override_gio_ra is not None else (getattr(session, 'gioRa', '') or '')
            bien_so = getattr(session, 'bienSo', '') or ''
            ma_the = getattr(session, 'uidThe', '') or ''
            chinh_sach = getattr(session, 'chinhSach', '') or ''
            cong_vao = getattr(session, 'congVao', '') or ''
            cong_ra = getattr(session, 'congRa', '') or ''
            phi_value = override_phi if override_phi is not None else (getattr(session, 'phi', '') or '')
            
            print(f"üîç DEBUG (QuanLyXe.chuyen_doi_session_object_sang_ui): Gi√° tr·ªã 'phi_value' tr√≠ch xu·∫•t: {phi_value}")
            
            print(f"üîç DEBUG: Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ session:")
            print(f"  - Bi·ªÉn s·ªë: {bien_so}")
            print(f"  - Gi·ªù v√†o: {gio_vao_str}")
            print(f"  - Gi·ªù ra: {gio_ra_str}")
            print(f"  - Ph√≠: {phi_value}")
            
            # T√≠nh th·ªùi gian ƒë·ªó
            thoi_gian_do_formatted = ""
            if gio_vao_str and gio_ra_str:
                try:
                    gio_vao = datetime.strptime(gio_vao_str, "%Y-%m-%d %H:%M:%S")
                    gio_ra = datetime.strptime(gio_ra_str, "%Y-%m-%d %H:%M:%S")
                    thoi_gian_do = gio_ra - gio_vao
                    
                    gio_do = int(thoi_gian_do.total_seconds() // 3600)
                    phut_do = int((thoi_gian_do.total_seconds() % 3600) // 60)
                    thoi_gian_do_formatted = f"{gio_do}h {phut_do}m"
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói t√≠nh th·ªùi gian ƒë·ªó: {e}")
                    thoi_gian_do_formatted = "N/A"
            
            # Format ph√≠
            phi_formatted = ""
            if phi_value:
                try:
                    phi = int(phi_value)
                    phi_formatted = f"{phi:,} VND"
                except:
                    phi_formatted = str(phi_value)
            
            # X√°c ƒë·ªãnh lo·∫°i xe
            loai_xe = "xe_may"  # m·∫∑c ƒë·ªãnh
            if "oto" in chinh_sach.lower() or "xe_hoi" in chinh_sach.lower() or "CS_OTO" in chinh_sach:
                loai_xe = "oto"
            
            # T·∫°o d·ªØ li·ªáu UI
            du_lieu_xe = {
                "bien_so": bien_so,
                "gio_vao": gio_vao_str,
                "gio_ra": gio_ra_str,
                "ma_the": ma_the,
                "thoi_gian_do": thoi_gian_do_formatted,
                "phi": phi_formatted,
                "cong_vao": cong_vao,
                "cong_ra": cong_ra,
                "chinh_sach": chinh_sach,
                "trang_thai": "ƒê√£ ra" if gio_ra_str else "Trong b√£i",
                "loai_xe": loai_xe,
                "nhan_dien_boi_api": getattr(session, 'plate_match', 0) == 1,
                "da_xac_minh": True,
            }
            
            print(f"üîç DEBUG (QuanLyXe.chuyen_doi_session_object_sang_ui): D·ªØ li·ªáu UI ƒë∆∞·ª£c t·∫°o: {du_lieu_xe}")
            return du_lieu_xe
            
        except Exception as e:
            print(f"‚ùå L·ªói chuy·ªÉn ƒë·ªïi session object: {e}")
            import traceback
            traceback.print_exc()
            
            # Fallback data
            return {
                "bien_so": getattr(session, 'bienSo', '') if hasattr(session, 'bienSo') else "",
                "gio_vao": getattr(session, 'gioVao', '') if hasattr(session, 'gioVao') else "",
                "gio_ra": getattr(session, 'gioRa', '') if hasattr(session, 'gioRa') else "",
                "ma_the": getattr(session, 'uidThe', '') if hasattr(session, 'uidThe') else "",
                "thoi_gian_do": "",
                "phi": "",
                "cong_vao": getattr(session, 'congVao', '') if hasattr(session, 'congVao') else "",
                "cong_ra": getattr(session, 'congRa', '') if hasattr(session, 'congRa') else "",
                "chinh_sach": getattr(session, 'chinhSach', '') if hasattr(session, 'chinhSach') else "",
                "trang_thai": "L·ªói d·ªØ li·ªáu",
                "loai_xe": "xe_may",
                "nhan_dien_boi_api": False,
                "da_xac_minh": False
            }

    def kiem_tra_bien_so_khop(self, bien_so_vao, bien_so_ra):
        """Ki·ªÉm tra xem bi·ªÉn s·ªë c√≥ kh·ªõp kh√¥ng"""
        if not bien_so_vao or not bien_so_ra:
            return False
        
        # Chu·∫©n h√≥a bi·ªÉn s·ªë (lo·∫°i b·ªè kho·∫£ng tr·∫Øng, chuy·ªÉn hoa)
        bien_so_vao_clean = str(bien_so_vao).strip().upper().replace(" ", "").replace("-", "")
        bien_so_ra_clean = str(bien_so_ra).strip().upper().replace(" ", "").replace("-", "")
        
        print(f"So s√°nh bi·ªÉn s·ªë: '{bien_so_vao_clean}' vs '{bien_so_ra_clean}'")
        
        # Ki·ªÉm tra kh·ªõp ch√≠nh x√°c TR∆Ø·ªöC
        if bien_so_vao_clean == bien_so_ra_clean:
            print("Bi·ªÉn s·ªë kh·ªõp ch√≠nh x√°c")
            return True
        
        # **TH√äM KI·ªÇM TRA CH·∫∂T CH·∫º H∆†N**
        # N·∫øu ƒë·ªô d√†i kh√°c nhau qu√° 2 k√Ω t·ª± -> kh√¥ng kh·ªõp
        if abs(len(bien_so_vao_clean) - len(bien_so_ra_clean)) > 2:
            print("Bi·ªÉn s·ªë kh√°c nhau qu√° nhi·ªÅu v·ªÅ ƒë·ªô d√†i")
            return False
        
        # Ki·ªÉm tra kh·ªõp v·ªõi tolerance nh∆∞ng CH·∫∂T H∆†N
        from difflib import SequenceMatcher
        similarity = SequenceMatcher(None, bien_so_vao_clean, bien_so_ra_clean).ratio()
        
        print(f"ƒê·ªô t∆∞∆°ng ƒë·ªìng: {similarity:.2%}")
          # **GI·∫¢M THRESHOLD XU·ªêNG 95%** ƒë·ªÉ ch·∫∑t ch·∫Ω h∆°n
        is_similar = similarity >= 0.95
        
        if is_similar:
            print("Bi·ªÉn s·ªë ƒë∆∞·ª£c coi l√† kh·ªõp (similarity >= 95%)")
        else:
            print("Bi·ªÉn s·ªë KH√îNG kh·ªõp (similarity < 95%)")
        
        return is_similar
    
    def xu_ly_loi_bien_so(self, ma_the, bien_so_vao, bien_so_ra, anh_xe_ra, duong_dan_face_ra=None):
        """X·ª≠ l√Ω khi bi·ªÉn s·ªë kh√¥ng kh·ªõp"""
        try:
            from dialogs.BienSoLoiDialog import BienSoLoiDialog
            
            # L·∫•y URL ·∫£nh v√†o t·ª´ session hi·ªán t·∫°i
            response = api.loadPhienGuiXeTheoMaThe(ma_the)
            anh_vao_url = None
            anh_mat_vao_url = None
            
            if response:
                session = None
                if isinstance(response, list) and len(response) > 0:
                    session = response[0]
                elif isinstance(response, dict) and response.get("success") and response.get("data"):
                    data = response["data"]
                    session = data[0] if isinstance(data, list) and len(data) > 0 else data
                elif hasattr(response, '__dict__'):
                    session = response
                
                if session:
                    anh_vao_url = getattr(session, 'anhVao', '') or ''
                    anh_mat_vao_url = getattr(session, 'anhMatVao', '') or ''
                    print(f"üîç DEBUG Dialog: URL ·∫£nh v√†o: {anh_vao_url}")
                    print(f"üîç DEBUG Dialog: URL ·∫£nh m·∫∑t v√†o: {anh_mat_vao_url}")
            
            # Chuy·ªÉn ƒë·ªïi ·∫£nh ra n·∫øu c·∫ßn
            anh_pil = None
            if anh_xe_ra:
                try:
                    if isinstance(anh_xe_ra, str):
                        from PIL import Image
                        anh_pil = Image.open(anh_xe_ra)
                    elif hasattr(anh_xe_ra, 'save'):
                        anh_pil = anh_xe_ra
                except Exception as e:
                    print(f"L·ªói x·ª≠ l√Ω ·∫£nh ra: {e}")
            
            # Hi·ªÉn th·ªã dialog v·ªõi c·∫£ ·∫£nh v√†o, ·∫£nh ra v√† ·∫£nh m·∫∑t
            dialog = BienSoLoiDialog(
                self.ui.root, 
                ma_the, 
                bien_so_vao, 
                bien_so_ra, 
                anh_pil,
                anh_vao_url,
                anh_mat_vao_url,
                duong_dan_face_ra
            )
            
            ket_qua, bien_so_thuc = dialog.hien_thi()
            print(f"üîç DEBUG Dialog: K·∫øt qu·∫£ = {ket_qua}, Bi·ªÉn s·ªë = {bien_so_thuc}")
            
            if ket_qua == "xac_nhan" and bien_so_thuc:
                return f"xac_nhan:{bien_so_thuc}"
            else:
                return ket_qua or "huy"
                
        except Exception as e:
            print(f"‚ùå L·ªói hi·ªÉn th·ªã dialog: {e}")
            import traceback
            traceback.print_exc()
            return "huy"

    def cap_nhat_xe_trong_danh_sach(self, du_lieu_xe):
        """C·∫≠p nh·∫≠t ho·∫∑c th√™m xe v√†o danh s√°ch qu·∫£n l√Ω"""
        # T·∫°o danh s√°ch n·∫øu ch∆∞a c√≥
        if not hasattr(self, 'xe') or not isinstance(self.xe, list):
            self.xe = []
        
        ma_the = du_lieu_xe["ma_the"]
        bien_so = du_lieu_xe["bien_so"]
        
        # T√¨m xe trong danh s√°ch
        xe_ton_tai = None
        for xe in self.xe:
            if xe["ma_the"] == ma_the:
                xe_ton_tai = xe
                break
        
        if xe_ton_tai:
            # C·∫≠p nh·∫≠t xe hi·ªán c√≥
            xe_ton_tai.update(du_lieu_xe)
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t xe {bien_so} trong danh s√°ch")
        else:
            # Th√™m xe m·ªõi
            self.xe.append(du_lieu_xe)
            print(f"‚úÖ ƒê√£ th√™m xe {bien_so} v√†o danh s√°ch")

    def quay_lai_che_do_quan_ly(self):
        """Quay l·∫°i ch·∫ø ƒë·ªô qu·∫£n l√Ω"""
        if self.ui:
            # Kh√¥i ph·ª•c t·∫•t c·∫£ camera v·ªÅ ch·∫ø ƒë·ªô live feed
            self.ui.khoi_phuc_live_camera_feeds()
            # Chuy·ªÉn v·ªÅ ch·∫ø ƒë·ªô qu·∫£n l√Ω
            self.ui.chuyen_che_do("quan_ly")
        
        ma_khu_vuc = None
        if self.selected_zone_data:
            ma_khu_vuc = getattr(self.selected_zone_data, 'maKhuVuc', None)
            if not ma_khu_vuc and isinstance(self.selected_zone_data, dict):
                ma_khu_vuc = self.selected_zone_data.get('maKhuVuc')