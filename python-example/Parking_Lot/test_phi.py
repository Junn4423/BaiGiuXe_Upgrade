import requests
from datetime import datetime, timedelta
import models
import server.url as url
from server import api # Import api module
from typing import List

def test_tinh_phi():
    print("--- B·∫Øt ƒë·∫ßu ki·ªÉm tra t√≠nh ph√≠ g·ª≠i xe ---")

    test_uid_the = "TESTCARD1234"
    test_bien_so = "86TEST4H"
    test_chinh_sach = "CS_XEMAY_4H"

    # B∆∞·ªõc 0: ƒêƒÉng k√Ω th·∫ª RFID n·∫øu ch∆∞a t·ªìn t·∫°i
    print(f"\n--- B∆∞·ªõc 0: ƒêƒÉng k√Ω th·∫ª RFID {test_uid_the} ---")
    try:
        them_the_result = api.themThe(uid_the=test_uid_the, loai_the="Th·∫ª test", trang_thai="1")
        if them_the_result.get("success"):
            print(f"Th·∫ª {test_uid_the} ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω ho·∫∑c ƒë√£ t·ªìn t·∫°i: {them_the_result.get("message")}")
        else:
            if "ƒë√£ t·ªìn t·∫°i" not in them_the_result.get("message", ""):
                print(f"L·ªói khi ƒëƒÉng k√Ω th·∫ª {test_uid_the}: {them_the_result.get("message")}")
                return
            else:
                print(f"Th·∫ª {test_uid_the} ƒë√£ t·ªìn t·∫°i (b·ªè qua ƒëƒÉng k√Ω): {them_the_result.get("message")}")
    except Exception as e:
        print(f"L·ªói g·ªçi API th√™m th·∫ª: {e}")
        return

    # B∆∞·ªõc 0.5: Ki·ªÉm tra v√† k·∫øt th√∫c phi√™n ƒëang g·ª≠i c≈© n·∫øu c√≥
    print(f"\n--- B∆∞·ªõc 0.5: Ki·ªÉm tra v√† k·∫øt th√∫c phi√™n ƒëang g·ª≠i c≈© cho th·∫ª {test_uid_the} (n·∫øu c√≥) ---")
    try:
        existing_sessions = api.loadPhienGuiXeTheoMaThe(test_uid_the)
        if existing_sessions:
            print(f"T√¨m th·∫•y {len(existing_sessions)} phi√™n ƒëang g·ª≠i cho th·∫ª {test_uid_the}. ƒêang ti·∫øn h√†nh k·∫øt th√∫c...")
            for session_to_end in existing_sessions:
                # C·∫≠p nh·∫≠t th√¥ng tin xe ra cho phi√™n c≈©
                session_to_end.congRa = "GATE_OUT_AUTO"
                session_to_end.gioRa = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                session_to_end.anhRa = "auto_exit_image.jpg"
                session_to_end.anhMatRa = ""
                session_to_end.plate_match = 1
                session_to_end.plate = session_to_end.bienSo # Gi·ªØ nguy√™n bi·ªÉn s·ªë c≈©
                # session_to_end.trangThai = "DA_RA" # Backend s·∫Ω t·ª± c·∫≠p nh·∫≠t tr·∫°ng th√°i khi xe ra

                print(f"  - ƒêang c·∫≠p nh·∫≠t phi√™n c≈© {session_to_end.maPhien} th√†nh DA_RA...")
                update_old_session_result = api.capNhatPhienGuiXe(session_to_end)
                print(f"    K·∫øt qu·∫£ c·∫≠p nh·∫≠t phi√™n c≈©: {update_old_session_result}")
                
                if update_old_session_result.get("success"):
                    print(f"  - ƒêang t√≠nh ph√≠ cho phi√™n c≈© {session_to_end.maPhien}...")
                    phi_old_session_result = api.tinhPhiGuiXe(session_to_end.maPhien)
                    print(f"    K·∫øt qu·∫£ t√≠nh ph√≠ phi√™n c≈©: {phi_old_session_result}")
                else:
                    print("    ‚ö†Ô∏è C·∫≠p nh·∫≠t phi√™n c≈© th·∫•t b·∫°i. C√≥ th·ªÉ v·∫´n c√≤n phi√™n ƒëang g·ª≠i.")
        else:
            print(f"Kh√¥ng t√¨m th·∫•y phi√™n n√†o ƒëang g·ª≠i cho th·∫ª {test_uid_the}.")
    except Exception as e:
        print(f"L·ªói trong qu√° tr√¨nh k·∫øt th√∫c phi√™n c≈©: {e}")
        # Kh√¥ng return, c·ªë g·∫Øng ti·∫øp t·ª•c test ch√≠nh

    # 1. T·∫°o m·ªôt phi√™n g·ª≠i xe (xe v√†o)
    # Gi·∫£ l·∫≠p th·ªùi gian v√†o l√† 4 ti·∫øng 1 ph√∫t tr∆∞·ªõc th·ªùi ƒëi·ªÉm hi·ªán t·∫°i
    gioVao = (datetime.now() - timedelta(hours=7, minutes=-1)).strftime("%Y-%m-%d %H:%M:%S") # ƒê·ªÉ test th·ªùi gian d√†i h∆°n

    session_vao = models.PhienGuiXe(
        uidThe=test_uid_the,
        bienSo=test_bien_so,
        chinhSach=test_chinh_sach,
        congVao="GATE_IN1",
        gioVao=gioVao,
        anhVao="test_image_vao.jpg",
        anhMatVao=""
    )

    print(f"\n--- B∆∞·ªõc 1: Th√™m phi√™n g·ª≠i xe (xe v√†o) v·ªõi gi·ªù v√†o: {gioVao} ---")
    try:
        them_phien_result = api.themPhienGuiXe(session_vao)
        print(f"K·∫øt qu·∫£ th√™m phi√™n: {them_phien_result}")
        if not them_phien_result.get("success"):
            print("L·ªói: Kh√¥ng th·ªÉ th√™m phi√™n g·ª≠i xe. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin th·∫ª/bi·ªÉn s·ªë/ch√≠nh s√°ch v√† log backend.")
            return

        ma_phien_moi = str(them_phien_result.get("maPhien")) # ƒê·∫£m b·∫£o l√† string
        if not ma_phien_moi:
            print("L·ªói: Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ phi√™n sau khi th√™m.")
            return
        print(f"M√£ phi√™n m·ªõi ƒë∆∞·ª£c t·∫°o: {ma_phien_moi}")

        # 1.5. Load l·∫°i phi√™n g·ª≠i xe v·ª´a t·∫°o ƒë·ªÉ c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        print(f"\n--- B∆∞·ªõc 1.5: Load l·∫°i phi√™n g·ª≠i xe ƒëang g·ª≠i cho m√£ th·∫ª: {test_uid_the} ---")
        loaded_sessions_after_entry = api.loadPhienGuiXeTheoMaThe(test_uid_the)
        if not loaded_sessions_after_entry:
            print(f"L·ªói: Kh√¥ng t√¨m th·∫•y phi√™n g·ª≠i xe ƒëang g·ª≠i cho m√£ th·∫ª {test_uid_the} sau khi th√™m.")
            return
        # L·∫•y phi√™n ƒëang g·ª≠i m·ªõi nh·∫•t (l√† phi√™n v·ª´a ƒë∆∞·ª£c th√™m v√†o)
        current_session = loaded_sessions_after_entry[0]
        print(f"Phi√™n ƒëang g·ª≠i ƒë∆∞·ª£c t·∫£i: {current_session}")

    except Exception as e:
        print(f"L·ªói khi th√™m phi√™n g·ª≠i xe: {e}")
        return

    # 2. C·∫≠p nh·∫≠t phi√™n g·ª≠i xe (xe ra)
    # Gi·∫£ l·∫≠p th·ªùi gian ra l√† ngay b√¢y gi·ªù
    gioRa = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # C·∫≠p nh·∫≠t th√¥ng tin xe ra v√†o phi√™n ƒë√£ t·∫£i (current_session)
    current_session.congRa = "GATE_OUT1"
    current_session.gioRa = gioRa
    current_session.anhRa = "test_image_ra.jpg"
    current_session.anhMatRa = ""
    current_session.plate_match = 1
    current_session.plate = test_bien_so # Bi·ªÉn s·ªë xe ra kh·ªõp v·ªõi bi·ªÉn s·ªë v√†o

    print(f"\n--- B∆∞·ªõc 2: C·∫≠p nh·∫≠t phi√™n g·ª≠i xe (xe ra) v·ªõi gi·ªù ra: {gioRa} ---")
    try:
        # Truy·ªÅn ƒë·ªëi t∆∞·ª£ng current_session ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·∫ßy ƒë·ªß
        cap_nhat_phien_result = api.capNhatPhienGuiXe(current_session)
        print(f"K·∫øt qu·∫£ c·∫≠p nh·∫≠t phi√™n: {cap_nhat_phien_result}")
        if not cap_nhat_phien_result.get("success"):
            print("L·ªói: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t phi√™n g·ª≠i xe. Vui l√≤ng ki·ªÉm tra l·∫°i log backend.")
            return
    except Exception as e:
        print(f"L·ªói khi c·∫≠p nh·∫≠t phi√™n g·ª≠i xe: {e}")
        return

    # 3. G·ªçi API t√≠nh ph√≠
    print(f"\n--- B∆∞·ªõc 3: G·ªçi API t√≠nh ph√≠ cho m√£ phi√™n: {ma_phien_moi} ---")
    try:
        phi_result = api.tinhPhiGuiXe(ma_phien_moi)
        print(f"K·∫øt qu·∫£ t√≠nh ph√≠: {phi_result}")

        if phi_result.get("success"):
            phi_tinh_duoc = float(phi_result.get("phi", 0)) # Chuy·ªÉn sang float ƒë·ªÉ so s√°nh
            tong_phut = int(phi_result.get("tongPhut", 0)) # Chuy·ªÉn sang int
            print(f"\n‚úÖ Ph√≠ t√≠nh ƒë∆∞·ª£c: {phi_tinh_duoc} VND")
            print(f"‚úÖ T·ªïng th·ªùi gian g·ª≠i: {tong_phut} ph√∫t")
            
            # C·∫ßn ƒëi·ªÅu ch·ªânh logic ki·ªÉm tra theo ch√≠nh s√°ch m·ªõi c·ªßa b·∫°n
            # Ch√≠nh s√°ch: 5000ƒë/4 ti·∫øng, sau ƒë√≥ c·ª© th√™m 4 ti·∫øng l√† th√™m 5000
            # V√≠ d·ª•: 3 ti·∫øng v·∫´n 5000, 4-7 ti·∫øng l√† 10000, 8-11 ti·∫øng l√† 15000
            expected_fee = 5000.00
            base_time_minutes = 4 * 60 # 4 ti·∫øng = 240 ph√∫t
            fee_per_block = 5000.00

            if tong_phut > base_time_minutes:
                # T√≠nh s·ªë block v∆∞·ª£t qu√°, l√†m tr√≤n l√™n
                over_time_minutes = tong_phut - base_time_minutes
                num_additional_blocks = math.ceil(over_time_minutes / base_time_minutes)
                expected_fee += num_additional_blocks * fee_per_block

            # So s√°nh v·ªõi m·ªôt sai s·ªë nh·ªè do t√≠nh to√°n s·ªë th·ª±c
            if abs(phi_tinh_duoc - expected_fee) < 0.01:
                print(f"üëç Ph√≠ {expected_fee} VND l√† ch√≠nh x√°c cho {tong_phut} ph√∫t.")
            else:
                print(f"‚ö†Ô∏è Ph√≠ kh√¥ng kh·ªõp mong ƒë·ª£i. Expected: {expected_fee}, Got: {phi_tinh_duoc}")

        else:
            print(f"‚ùå L·ªói khi t√≠nh ph√≠: {phi_result.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}")
    except Exception as e:
        print(f"L·ªói khi g·ªçi API t√≠nh ph√≠: {e}")
        import traceback
        traceback.print_exc()

    print("\n--- K·∫øt th√∫c ki·ªÉm tra t√≠nh ph√≠ g·ª≠i xe ---")

if __name__ == "__main__":
    import math # C·∫ßn import math cho ceil
    test_tinh_phi()
